//-----------------------------------------------------------------------------
// MiscTableScroll Java BUGS
// $Id: JAVA-BUGS.txt,v 1.3 99/07/15 17:24:13 sunshine Exp $
//-----------------------------------------------------------------------------

BUGS:
----
- bridget is not using the correct type (NSCell*) in some of the
    cell retire and revive methods even though the correct type is specified
    in MiscTableScrollJava.h in a JavaSignatures category.  It appears that
    the failures are in methods that are mostly in the categories, although
    even this is not entirely true.  I do not yet recognize the failure
    pattern.
- Can not create a MAB binary of the MiscTableScrollJava library since Apple
    did not ship MAB libraries in /usr/lib/java with MacOS/X Server DR2.


FIXED:
-----
v140.1
- bridget should be, but is not generating unique names for the methods
    -javaGetNextEditLocation & -javaGetNextEditLocation:.  It incorrectly
    generates the same name javaNextEditLocationNative() which causes an
    "already defined" error at compile time.  This is a bug in the way bridget
    generates "native" function names for overloaded method names.  It is not
    distinguishing the colon ":" in the second name.  [To fix, I renamed
    -javaGetNextEditLocation: to -javaGetNextEditLocationInDirection:.]
- The Java bridge automatically tries to create mappings for
    -tableScroll:willPrintPage{Header|Footer}:info: and
    -tableScroll:getISearchColumn: even though these methods are not exposed
    to the Java side.  Unfortunately it tries exporting all three as
    tableScroll() which causes run-time warnings.  [I turned the will-print
    delegate messages into notifications -- along with others -- which changed
    their signature.  For instance -tableScrollWillPrintPageHeader: which is
    exposed uniquely to Java.]
- JavaScrollDir's DirWindow.java incorrectly implements
    tableScrollDraggingSourceOperationMaskForLocal() rather than the correct
    tableScrollDraggingSourceOperationMask().
- In DirWindow.java, it would be more correct to use Object.class when creating
    the NSSelector for the lock slot's prototype cell's action rather than
    this.getClass().
- Methods -builtinValidRequestorForSendType:returnType: is not being exposed
    with the correct name.
- These mappings are absent from 'jobs' file:
    -setColumnOrderFromString: -> setColumnOrder()
    -setColumnSizesFromString: -> setColumnSizes()
    -setRowOrderFromString: -> setRowOrder()
    -setRowSizesFromString: -> setRowSizes()
- Mapping for tableScrollAbortEditAtLocation() is mispelled as
    tableScrollabortEditAtLocation().  Note lower-case "a".
- The install target places an errant "com" directory in the main source
    directory which "clean" does not remove.  This directory should not be
    copied here in the first place.  [I hacked around this bug in the system
    makefiles by forcing COPY_JAVA_CLASSES to invoke a do-nothing target.]
- On Windows, 'make clean' is leaving the .lib file laying around.
- The bridget tool generates code which complains about discard of "const"
    when -Wwrite-strings is used.  [To fix I no longer enable this warning.]
- Under Windows, the stub file generated by bridget for MiscTableScroll has so
    many exported symbols that the compiler generates a single line of asembly
    which is so long that it overflows the assembler's input buffer, resulting
    in a crash.  [I fixed this by writing a "sed" script which breaks the line
    into smaller chunks, and by patching the makefile to generate assembly
    files from .m files instead of directly generating .o files from .m files.]
- When compiling the Java wrapper for ppc on Mach for DR2, the compiler
    complains about missing prototypes for built-in functions
    objc_msgSendSuper_stret() and objc_msgSend_stret().  [It turns out that
    the Apple header java-vm.h is broken and only defines prototypes for these
    functions on the Windows platform.  Consequently, I patched
    MiscTableScrollJava.h to define them manually on ppc for Mach.]
- JavaScrollDir crashes with message sent to freed object.  The example
    program launches, loads, and displays a directory window correctly but
    crashes upon activation of the window.  The crash results from an attempt
    by the AppKit to dispatch -respondsToSelector: to a freed object.  This
    crash does not occur on DR2.  [While researching the problem, I ran across
    an item in the latest Java release notes on the Apple web site which
    mentioned that the behavior of the Objective-C to Java bridge changed with
    regards to pure Java objects which have only a "weak" reference on the
    Objective-C side.  As of MacOS/X Server, the bridge now deallocates the
    Objective-C proxy object of weakly referenced pure Java objects if the
    object's proxy has not been retained on the Objective-C side.  Weakly
    referenced objects are actually a common occurrence.  For instance a pure
    Java object as an NSWindow's delegate, is one example.  The NSWindow
    merely maintains a pointer to the Java object's Objective-C proxy, but
    does not retain it.  Consequently the bridge thinks that the proxy is
    unused and should be deallocated.  On DR2, these weakly referenced proxy
    objects were merely leaked.  In the case of JavaScrollDir, DirWindow is a
    pure Java object which is both the NSWindow's and MiscTableScroll's
    delegate.  Consequently, DirWindow's Objective-C proxy gets freed by the
    bridge even though NSWindow and MiscTableScroll are still pointing at it.
    To fix the problem some entity on the Objective-C side needs to retain
    DirWindow's Objective-C proxy object.  A simple way to do this is to store
    a reference to the DirWindow in an NSArray.  As it turns out, DirWindow
    already maintains a list of active DirWindow objects, named OPEN_DIRS, in
    a Java Vector object.  Simply converting OPEN_DIRS from a Vector to an
    NSArray fixes the problem by creating a strong reference on the
    Objective-C side.]
- On MacOS/X Server for Mach, the compiler complains about conflicting
    prototypes for objc_msgSendSuper_stret() & objc_msgSend_stret().
    MiscTableScrollJava.h manually declares these two prototypes since
    /System/Java/Headers/java-vm.h as shipped with DR2 neglects to do so for
    PPC targets.  As of MacOS/X Server, the declaration of these functions
    changed (the argument list differs), they have moved to objc-runtime.h,
    and they are correctly declared for PPC targets.  To avoid conflicting
    prototype errors, MiscTableScrollJava.h must only declare the prototypes
    on DR2, but not on MacOS/X Server.  [To fix, it was necessary to
    conditionalize MiscTableScrollJava.h an #if directive to only declare
    these prototypes on DR2.  To do so required finding a macro which can be
    used to distinguish between DR2 and MacOS/X Server.]
- The Java bridge does not know anything about NSPopUpList which exists in
    nibs created with OpenStep 4.x.  Whenever such a nib is loaded, the bridge
    complains about the unknown class.  Since TableScroll supports OpenStep
    in addition to MacOS/X Server, the nibs must remain in this format.
    Fortunately, the nibs still function properly even though the bridge
    complains about them.  Note that MacOS/X Server nibs which contain pop-up
    buttons do not exhibit this behavior.  [To work around this problem, I
    added a MOSXS-specific nib, MiscExporterAccessoryView-macintosh.nib,
    which was generated with the MOSXS Interface Builder.]
