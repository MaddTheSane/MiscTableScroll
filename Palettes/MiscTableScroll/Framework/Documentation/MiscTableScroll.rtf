{\rtf0\ansi{\fonttbl\f3\fnil Times-Roman;\f1\ftech Symbol;\f0\fswiss Helvetica;\f4\fmodern Courier;\f2\fmodern Ohlfs;}
\paperw16160
\paperh11220
\margl120
\margr120
{\colortbl;\red0\green0\blue0;}
\f3\b0\i0\ulnone\ql\fs24\fi0\li0\gray0\fc0\cf0\up0\dn0 Release 2.0  Copyright 
\f1 ã
\f3 1995, 1996, 1997, 1998, 1999 by Paul S. McCarthy and Eric Sunshine  All Rights Reserved.\
Paul S. McCarthy and Eric Sunshine  --  August 20, 1999\

\pard\tx2480\tx2860\tx3240\fc0\cf0 \

\pard\f0\b\fs52\li1460\fc0\cf0 MiscTableScroll\

\pard\tx4880\fs80\li1460\fc0\cf0 \

\pard\tx4220\fs24\fi-2720\li4220\fc0\cf0 Inherits From:
\fs28 	
\f3\b0 NSScrollView : NSView : NSResponder : NSObject\

\fs20 \

\f0\b\fs24\fi-2740 Conforms To:	
\f3\b0\fs28 NSCoding (NSObject)\

\fs20\fi-2720 \

\f0\b\fs24 Declared In:
\f3\b0\fs28 	MiscTableScroll.h\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx4220\f0\b\fs24\fi-2740\li4220\fc0\cf0 Java Class:	
\f3\b0\fs28 org.misckit.yellow.application.TableScroll\

\pard\tx4880\f0\b\fs16\li1360\fc0\cf0 \
\
\

\pard\fs28\fi-1020\li1200\fc0\cf0 Class Description\

\fs16\fi0\li1360 \

\pard\tx3600\tx3980\tx4340\f3\b0\fs28\li1500\fc0\cf0 This class provides a convenient and powerful user-interface object for displaying and manipulating tabular data.  The appearance and behavior is similar to NSTableView but is functionally superior.  Although it inherits from NSScrollView, the programmatic interface is similar to the NSMatrix class.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \
\

\f0\b\fs24\li1500 User Interface Highlights\

\f3\b0\fs16\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Scrollable matrix.\
Column and row titles.\
Columns and rows can be resized.\
Columns and rows can be dragged (rearranged).\
Automatically sorts rows when columns are rearranged.\
Direct user control of sort direction (ascending vs. descending).\
Incremental search.\
In-cell text editing.\
Exports contents as ASCII, ASCII-delimited, or dBASE.\
Keyboard & mouse control.\
Interacts with the Pasteboard, Font Panel, and Services.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \
\

\f0\b\fs24\li1500 Programmatic Highlights\

\f3\b0\fs16\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Accessible from Objective-C and Java.\
Each column and row can have its own size.\
Each cell can have its own color and font or inherit them from the table.\
Each column can have its own cell-type.\
Lazy-mode for large or expensive-to-generate data sets.\
Full control over selection.\
Built-in sort support.\
Built-in image-dragging support.\
Smart memory management.\
Delegate methods for most features.\
Simple indexed access to rows and columns.\
Easy-to-use text-cell editing.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \
\

\f0\b\fs24\li1500 Delegates and Notifications\

\f3\b0\fs16\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Both a 
\i delegate
\i0  and a 
\i dataDelegate
\i0  can be assigned to MiscTableScroll.  Internally MiscTableScroll treats the delegates identically.  The distinction between the two is conceptual and provides a convenient mechanism for programmers to cleanly compartmentalize specific object behavior.  Conceptually the 
\i dataDelegate
\i0  provides data to MiscTableScroll upon request with methods such as 
\f4\fs24 -tableScroll:intValueAtRow:column:
\f3\fs28  and its cousins.  The 
\i delegate
\i0 , on the other hand, responds to messages which control or observe the behavior of MiscTableScroll, such as 
\f4\fs24 -tableScroll:canEdit:atRow:column:
\f3\fs28  or 
\f4\fs24 -tableScrollSlotDragged:
\f3\fs28 .  This compartmentalization of functionality allows programmers to create a clean division between an object which strictly manages data from one which manages higher level behavior.  For most applications, however, it is generally sufficient to have a single object which handles all such functionality and assign it as the 
\i delegate
\i0 .  In very simple cases even the 
\i delegate
\i0  may be unnecessary.\

\pard\tx2480\tx2860\tx3240\f0\b\fs16\li1360\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\f3\b0\fs28\li1500\fc0\cf0 MiscTableScroll also posts notifications to the application's default notification center.  Any object may register to receive one or more of the notifications posted by MiscTableScroll by sending 
\f4\fs24 -addObserver:selector:name:object:
\f3\fs28  to the default notification center.  MiscTableScroll automatically registers its delegates to receive these notifications if the delegates respond to the appropriate messages.  For instance, if the 
\i delegate
\i0  responds to 
\f4\fs24 -tableScrollTextColorChanged:
\f3\fs28 , then it will automatically be registered to receive 
\f4\fs24 MiscTableScrollTextColorChangedNotification
\f3\fs28 .\

\pard\tx2480\tx2860\tx3240\f0\b\fs16\li1360\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\f3\b0\fs28\li1500\fc0\cf0 Standard delegate messages are only sent to one of the delegates even if both implement a particular message.  MiscTableScroll first checks the 
\i delegate
\i0  and then the 
\i dataDelegate
\i0 , and sends the message to the first object which responds to it.  Notifications, on the other hand, are sent to each delegate which responds to the appropriate notification message.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \
\

\f0\b\fs24\li1500 Similarities between Rows and Columns -- Slots and Borders\

\f3\b0\fs16\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Rows and columns are treated equally wherever it is practical and desirable to do so.  Almost every action and option that is available for columns is also available for rows and vice versa.  
\i Slot
\i0  is the generic term for a single column or row.  
\i Border
\i0  is the generic term for row or column orientation.  
\i Size
\i0  is the generic term for width or height.  Most methods come in two flavors: a row/column specific flavor that uses 
\i row
\i0  or 
\i column
\i0  as part of the name; and a generic flavor that has a 
\i border
\i0  argument and (when needed) a 
\i slot
\i0  argument.  Here are some examples:\

\pard\tx2480\tx2860\tx3240\f0\b\fs16\li1360\fc0\cf0 \

\pard\tx5400\f3\b0\ul\fs28\li2160\fc0\cf0 Generic
\ulnone 	
\ul Specific
\ulnone \
- border:setSlotTitlesOn:	- setColumnTitlesOn:\
	- setRowTitlesOn:\
- border:setSlot:size:	- setColumn:size:\
	- setRow:size:\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \
\

\f0\b\fs24\li1500 Differences between Rows and Columns\

\f3\b0\fs16\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 There are some differences between rows and columns.  This object is designed to maximize the efficiency of displaying many rows of data.  Hence, it is faster to add and remove rows than columns.  You should set up all your columns in InterfaceBuilder, or while the table is empty, then add and remove rows afterwards.  Rows are cached for re-use with the 
\f4\fs24 -renewRows:
\f3\fs28  method.  This makes it very fast to change the contents of the table on a row-oriented basis.  Despite the row-oriented bias, column-oriented operations can be performed at any time; they will just be slower than the corresponding row-oriented operations.  This behavior is intrinsic to the implementation, it cannot be changed.\

\pard\tx2480\tx2860\tx3240\f0\b\fs16\li1360\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\f3\b0\fs28\li1500\fc0\cf0 Cell-prototypes are only used for columns.  This behavior can only be changed by subclassing.\

\pard\tx2480\tx2860\tx3240\f0\b\fs16\li1360\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\f3\b0\fs28\li1500\fc0\cf0 Selection in the body of a table is done on a row-wise basis.  This behavior can be changed programmatically via the 
\f4\fs24 -setSelectsByRows:
\f3\fs28  method.\

\pard\tx2480\tx2860\tx3240\f0\b\fs16\li1360\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\f3\b0\fs28\li1500\fc0\cf0 There are numerous default settings which differ between columns and rows.  Most of these options can be changed in InterfaceBuilder; all of them can be changed programmatically.  Here is a summary of the defaults which differ between rows and columns:\

\pard\tx2480\tx2860\tx3240\li2100\fc0\cf0 \

\pard\tx5040\tx7200\tx10820\ul\li2160\fc0\cf0 Option
\ulnone 	
\ul Column Default
\ulnone 	
\ul Row Default
\ulnone \
modifier drag	NO	YES\
uniform size	NO	YES\
user sizeable	YES	NO\
user draggable	YES	NO\
titles displayed	YES	NO\
title mode	Custom	Auto-Numbered\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \
\

\f0\b\fs24\li1500 Slot Sizing\

\f3\b0\fs16\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Uniform size is the simplest sizing mode.  When you set the uniform size of a border to any non-zero value, all slots in that border will have the same (uniform) size.  Setting the uniform size of a border to zero enables slots to have individual sizes.  By default, rows are uniform size, columns are not.\

\pard\tx2480\tx2860\tx3240\f0\b\fs16\li1360\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\f3\b0\fs28\li1500\fc0\cf0 If uniform sizing is not set for a border, the following sizing information is maintained for each slot in the border:\

\pard\tx2480\tx2860\tx3240\f0\b\fs16\li1360\fc0\cf0 \

\pard\f3\b0\fs28\li2160\fc0\cf0 target size\
minimum size\
maximum size\
adjusted size\
user-sizeable-flag\
autosize-flag\

\pard\tx2480\tx2860\tx3240\f0\b\fs16\li1360\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\f3\b0\fs28\li1500\fc0\cf0 Target size is the desired size for a particular slot.  Minimum and maximum sizes are the lower and upper bounds for the size of a slot.  Adjusted size is the final display size of the slot after all other factors have been taken into account.  When a slot is marked as user-sizeable, the user will be able to resize the slot (subject to further conditions described below).  The adjusted size of autosize slots will be increased if needed to prevent a "gap" from appearing when the table is smaller than the display region.  The flag values are mutually independent, but user-sizeable and autosize do not mix well.  They cause bizarre, counter-intuitive behavior on narrow tables in wide views.\

\pard\tx2480\tx2860\tx3240\f0\b\fs16\li1360\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\f3\b0\fs28\li1500\fc0\cf0 Users resize columns by dragging the right-hand edge of the column's title cell to the desired width.  Likewise, users resize rows by dragging the bottom edge of the row's title cell to the desired height.  The cursor changes to a horizontal or vertical resize cursor whenever the cursor is over one of the resizing areas.  When users resize a slot, they are setting the target size for the slot on non-uniform-size borders.  On uniform-size borders, they are setting the new uniform-size for the border.\

\pard\tx2480\tx2860\tx3240\f0\b\fs16\li1360\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\f3\b0\fs28\li1500\fc0\cf0 All of the following conditions must be met to enable the user to resize a particular slot:\

\pard\tx2480\tx2860\tx3240\f0\b\fs16\li1360\fc0\cf0 \

\pard\f3\b0\fs28\fi-440\li2600\fc0\cf0 (a) The title cells must be displayed (
\f4\fs24 -border:setSlotTitlesOn:YES
\f3\fs28 )\
(b) The border in question must allow user-sizing of slots (
\f4\fs24 -border:setSizeableSlots:YES
\f3\fs28 )\
(c) The border must be uniform-size (
\f4\fs24 -setBorder:uniformSizeSlots:
\f3\fs28 ) or the slot in question must be user-sizeable  (
\f4\fs24 -border:setSlot:sizeable:YES
\f3\fs28 ).\
(d) There must be some room to grow or shrink between the slot's current adjusted size and the slot's minimum and maximum sizes.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 All of these conditions are met by default for new columns, unless you explicitly disable one of the global options for column sizing.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \
\

\f0\b\fs24\li1500 Slot Dragging and Indexing -- Visual vs. Physical\

\f3\b0\fs16\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Dragging and sizing are independent of each other.  You can have borders that are not sizeable in any way, but are still draggable, and vice versa.  You can also have borders that are both draggable and sizeable, or neither draggable nor sizeable.\

\pard\tx2480\tx2860\tx3240\f0\b\fs16\li1360\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\f3\b0\fs28\li1500\fc0\cf0 Users drag slots by dragging the title cells until the leading edge is over the desired new location and "dropping" the slot there.  For example, the left edge of the cell shows you where the column will end up when dragging a column to the left.  Likewise, the right edge is used when the column is dragged to the right.  This makes it possible to clearly see the new location without guessing.\

\pard\tx2480\tx2860\tx3240\f0\b\fs16\li1360\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\f3\b0\fs28\li1500\fc0\cf0 Dragging must be enabled for that border.  By default, columns are dragged with an unmodified drag, and they are selected with a command-drag.  By default, rows are selected with an unmodified drag, and they are dragged with a command-drag.  By default, dragging is enabled for columns, but not for rows.\

\pard\tx2480\tx2860\tx3240\f0\b\fs16\li1360\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\f3\b0\fs28\li1500\fc0\cf0 If slot-dragging is enabled for a border then an internal mapping vector is maintained which translates the original physical position of the slot to its current visual position.  All programmer-interface methods and all delegate call-back methods use the original physical position of the slot so you can ignore the current visual ordering in your programs.  If you need or want to examine the current visual ordering, you can do so with the 
\f4\fs24 -border:slotPosition:
\f3\fs28  and 
\f4\fs24 -border:slotAtPosition:
\f3\fs28  methods.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \
\

\f0\b\fs24\li1500 Keyboard Operations\

\f3\b0\fs16\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 MiscTableScroll provides keyboard control over almost all functions.  Keyboard equivalents are available for scrolling, selection, and performing actions (simulating double-click).  This class displays a dashed rectangle around the slot which is currently the focus of keyboard operations.  Display of the cursor can be disabled and re-enabled with calls to the methods 
\f4\fs24 -disableCursor
\f3\fs28  and 
\f4\fs24 -enableCursor
\f3\fs28 .\

\pard\tx2480\tx2860\tx3240\f0\b\fs16\li1360\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\f3\b0\fs28\li1500\fc0\cf0 MiscTableScroll instances can be linked into the next-key-view chain just like all other Views.  This can be done directly in InterfaceBuilder
\f1 ä
\f3 , or programmatically via 
\f4\fs24 -nextKeyView
\f3\i\fs28 , 
\f4\i0\fs24 -setNextKeyView:
\f3\fs28 , and related functions.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 The keyboard 
\i cursor
\i0  can be moved with the standard arrow keys as well as the editing keys on the numeric keypad, including the page-up, page-down, home, and end keys -- as well as the 
\i real
\i0  page-up, page-down, home, and end on keyboards which actually supply these keys.  For functions which do not normally appear on any keyboard -- such as page-left and page-right -- modified arrow-keys can be used.  Please refer to the following table:\

\pard\tx2480\tx2860\tx3240\f0\b\fs16\li1360\fc0\cf0 \

\pard\tx3780\tx5760\b0\ul\fs24\li2160\fc0\cf0 Key(²)
\ulnone\fc1\cf1 	
\ul\fc0\cf0 Action
\ulnone\fc1\cf1 	
\ul\fc0\cf0 Action Modified(³)\

\ulnone space	select slot	select slot\
return	perform action	perform action\
up-arrow	up	page-up\
down-arrow	down	page-down\
left-arrow	left	page-left\
right-arrow	right	page-right\
page-up	page-up	top-edge\
page-down	page-down	bottom-edge\
home	top-edge	left-edge\
end	bottom-edge	right-edge\
enter(*)	perform action	perform action\
insert(*)	select slot	select slot\

\pard\tx2480\tx2860\tx3240\b\fs16\li1360\fc0\cf0 \

\pard\tx2520\tx3720\tx4260\tx4800\tx5320\b0\fs24\fi-360\li2520\fc0\cf0 (²)	These functions are recognized when generated from both the standard editing keys as well as those on the numeric keypad.\

\pard\tx2480\tx2860\tx3240\b\fs16\li1360\fc0\cf0 \

\pard\tx2520\tx3720\tx4260\tx4800\tx5320\b0\fs24\fi-360\li2520\fc0\cf0 (³)	Modified actions are produced by holding down a modifier while typing the primary key.  Any of Shift, Control, or Alt can be used to produce a modified action -- and all have the same affect.  So, for instance, one can generate a page-left from any of ctrl-left-arrow, shift-left-arrow, or alt-left-arrow.\

\pard\tx2480\tx2860\tx3240\b\fs16\li1360\fc0\cf0 \

\pard\tx2520\tx3720\tx4260\tx4800\tx5320\b0\fs24\fi-360\li2520\fc0\cf0 (*)	Applicable to the numeric keypad only.\

\pard\tx2480\tx2860\tx3240\b\fs16\li1360\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\f3\b0\fs28\li1500\fc0\cf0 Keys which perform the 
\i select-slot
\i0  function simulate a single mouse-click.  Keys which perform 
\i perform-action
\i0  simulate a double mouse-click.  When performing a 
\i select-slot
\i0  via the keyboard, one can use the same modifier keys one uses when selecting via the mouse.  In other words, one can use shift-single-click to select multiple slots (one at a time) with the mouse.  Likewise one can use shift-space to select multiple slots (one at a time) with the keyboard.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \
\

\f0\b\fs24\li1500 Selection Modes\

\f3\b0\fs16\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Three selection modes are supported: List, Highlight, and Radio.  Unlike NSMatrix, this class treats the different selection modes as uniformly as possible (see 
\i Mouse Tracking
\i0  below).  Methods such as 
\f4\fs24 -selectionMode
\f3\fs28  and 
\f4\fs24 -setSelectionMode:
\f3\fs28  allow direct control over the mode.\

\pard\tx2480\tx2860\tx3240\f0\b\fs16\li1360\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\f3\b0\fs28\li1500\fc0\cf0 Methods such as 
\f4\fs24 -hasRowSelection
\f3\i\fs28 , 
\f4\i0\fs24 -numberOfSelectedRows
\f3\i\fs28 , 
\f4\i0\fs24 -rowIsSelected:
\f3\i\fs28 , 
\i0 as well as the border and slot variations allow selection querying, while methods such as 
\f4\fs24 -selectedRows
\f3\i\fs28 , 
\f4\i0\fs24 -selectedRowTags
\f3\i\fs28 , 
\f4\i0\fs24 -selectRows:
\f3\i\fs28 , 
\i0 and 
\f4\fs24 -selectRowsWithTags:
\f3\fs28  along with their variations allow batch-oriented selection modification.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \
\

\f0\b\fs24\li1500 Mouse Tracking\

\f3\b0\fs16\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 The manner in which MiscTableScroll performs mouse-tracking is different from the manner in which NSMatrix does so.  This class gives the cells the opportunity to track the mouse in 
\i all
\i0  selection modes, whereas NSMatrix allows the cells to participate in mouse-tracking in all 
\i but
\i0  List mode.  NSMatrix make a special case of List mode, and in addition to the mouse-tracking difference it also modifies the cells' 
\i state
\i0  variables in this mode.  In all other modes NSMatrix allows the cell's mouse-tracking methods to manipulate the 
\i state
\i0  rather than doing so itself.  MiscTableScroll, on the other hand, treats all selection modes uniformly.  It always highlights a cell via its 
\i highlight
\i0  flag and 
\i never
\i0  alters the cell's 
\i state
\i0  -- instead it leaves alteration of 
\i state
\i0  to the cell's mouse-tracking methods.\

\pard\tx2480\tx2860\tx3240\f0\b\fs16\li1360\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\f3\b0\fs28\li1500\fc0\cf0 Upon receipt of a 
\f4\fs24 -mouseDown:
\f3\fs28 , this class gives the cell at the mouse-down location an opportunity to track the mouse by invoking its 
\f4\fs24 -trackMouse:inRect:ofView:untilMouseUp:
\f3\fs28  method.  That method normally tracks the mouse until either a mouse-up event in which case it returns YES, or until the mouse leaves the cell-frame in which case it returns NO.  If 
\f4\fs24 -trackMouse:inRect:ofView:untilMouseUp:
\f3\fs28  returns NO, then MiscTableScroll goes into its own modal-responder loops, continues tracking the mouse itself, and updates the selection appropriately until a mouse-up event.  Only the cell under the mouse-down event is given a chance to participate in tracking -- after that no other cells are offered the opportunity.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \
\

\f0\b\fs24\li1500 Image Dragging\

\f3\b0\fs16\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 MiscTableScroll has built in support for dragging images directly out of cells using the standard AppKit dragging services.  Dragging is enabled by implementing a few simple methods in the delegate or dataDelegate.  Two required methods are 
\f4\fs24 -tableScroll:allowDragOperationAtRow:column:
\f3\fs28  and 
\f4\fs24 -tableScroll:preparePasteboard:forDragOperationAtRow:column:
\f3\fs28 .  Each method is passed a pointer to the MiscTableScroll and the cell's physical coordinates.  The first method gives the delegate or dataDelegate a chance to allow or veto the drag operation.  The second method is responsible for declaring types and, possibly, providing data for the pasteboard.\

\pard\tx2480\tx2860\tx3240\f0\b\fs16\li1360\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\f3\b0\fs28\li1500\fc0\cf0 A third delegate method 
\f4\fs24 -tableScroll:imageForDragOperationAtRow:column:
\f3\fs28  is required for non-image cells and optional for cells which contain an image.  This method allows the delegate or dataDelegate to supply an image for dragging.  If the cell from which dragging is taking place contains its own image, then this method need not be implemented or can return 0, in which case the cell's own image is used by default.\

\pard\tx2480\tx2860\tx3240\f0\b\fs16\li1360\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\f3\b0\fs28\li1500\fc0\cf0 Other methods allow the delegate or dataDelegate to respond to the standard dragging source protocol methods.
\f0\b\fs16 \

\pard\tx2480\tx2860\tx3240\li1360\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\f3\b0\fs28\li1500\fc0\cf0 As usual, when dealing with pasteboards, keep in mind that if a non-nil 
\i owner 
\i0 is specified
\i , 
\i0 the NSPasteboard will retain it.  Only upon the initiation of another dragging operation will the owner receive the 
\f4\fs24 -pasteboardChangedOwner:
\f3\fs28  message and be released.  Therefore the 
\i owner
\i0  needs to remain in a valid state, along with any necessary data, even after completion of the drag operation.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \
\

\f0\b\fs24\li1500 Prototype Cells\

\f3\b0\fs16\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Each column maintains a prototype cell which is used when new rows are created.  When new rows are created, a 
\f4\fs24 -copyWithZone:
\f3\fs28  message is sent to the prototype cell for each column, and the new copy of the prototype cell is put into the new row.  This means that all prototype cells must implement the 
\f4\fs24 -copyWithZone:
\f3\fs28  method appropriately.  Generally this implies performing a 
\i deep
\i0  copy.\

\pard\tx2480\tx2860\tx3240\f0\b\fs16\li1360\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\f3\b0\fs28\li1500\fc0\cf0 The prototype cell can be one of the built-in types (text, icon, or button), it can be supplied by the delegate, or you can set it programmatically.  If you set a prototype cell programmatically, the MiscTableScroll object will retain the prototype cell, and will release it when it is finished with it.  If the delegate provides the prototype cell, the delegate retains ownership -- the MiscTableScroll object will neither retain nor release prototype cells provided by the delegate.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \
\

\f0\b\fs24\li1500 Represented Objects\

\f3\b0\fs16\li2100 \

\fs28\li1500 Represented objects are objects which slots and cells may represent.  By setting a represented object for a slot or cell you make an association between that object and the slot or cell in question.  For instance, you might have a table in which each row represents a font, and lists its name as well as associated information such as its style, italic angle, and underline position.  As a convenience you could set each row's represented object, using 
\f4\fs24 -setRow:representedObject:
\f3\fs28 , to the actual NSFont which is described by that row.  When a user selects one of the rows, the represented NSFont can be retrieved easily with 
\f4\fs24 -rowRepresentedObject:
\f3\fs28 .  A represented object can also be associated with the entire table.\

\f0\b\fs16\li1360 \

\f3\b0\fs28\li1500 The represented object functions as a more specific form of 
\i tag
\i0  that allows you to associate any object, not just an integer, with the table, slot, or cell.  This feature is solely for the developer's convenience.  MiscTableScroll itself does not access the represented object, except to retain, release, archive and restore it.\

\fs16\li2100 \
\

\f0\b\fs24\li1500 Cell Owner and Inherited Font and Color Attributes\

\f3\b0\fs16\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 The MiscTableScroll class implements an informal 
\i owner
\i0  protocol with the cells that it manages.  The MiscTableCell class implements the other side this informal protocol.  This protocol enables the cells to specify that they want to inherit their font and color attributes from their owner.  In this case, the owner is the MiscTableScroll object.  This makes it possible to propagate global 
\i default
\i0  font and color attributes to all such cells easily and efficiently.  At the same time, individual cells can use custom font and color attributes which will override the global default inherited values.  Cells that use the inherited values do not need to store copies of those inherited values.  Only cells that use custom values need to remember and store their own custom values.  See the documentation for the MiscTableCell class for more details.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \
\

\f0\b\fs24\li1500 Cell Owner and Owner-Draw\

\f3\b0\fs16\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Another feature of the informal 
\i owner
\i0  protocol is a specialized notion of delegated drawing.  All cells that respond YES to the 
\f4\fs24 -ownerDraw
\f3\fs28  message are drawn by the MiscTableScroll rather than drawing themselves.  Since the MiscTableScroll object typically manages many cells with similar font and color attributes, the MiscTableScroll object can eliminate large amounts of redundant font and color setting PostScript code.  Likewise, contiguous cells with the same background colors have all of their backgrounds drawn with a single PostScript operator rather than several.  The built-in drawing mechanism also eliminates a lot of very expensive clipping path operations by simply not drawing partial characters that would be clipped.  (You can force the partially visible text to be displayed with the 
\f4\fs24 -setDrawsClippedText:YES
\f3\fs28  message.)  Any object used as a cell in an instance of MiscTableScroll object can take advantage of these facilities as long as the cell consists of plain (single font) text with a single (optional) image, and does not have borders or other drawing requirements.  This results in a very considerable improvement in drawing performance -- especially noticable on older, slower CPUs.  <FIXME: Owner-draw is currently restricted to cells containing 7-bit ASCII text.  See OPENSTEP-BUGS.txt>\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \
\

\f0\b\fs24\li1500 Lazy vs. Eager\

\f3\b0\fs16\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 In general, eager mode is much easier to use than lazy mode.  In eager mode, you can usually take advantage of the cells themselves to store the data that you are retrieving and displaying.  Even complex data types can be stored by allocating the record and assigning it as the 
\i represented object
\i0  for the row or cell.  By contrast, lazy mode forces you to manage all the storage yourself.  In eager mode, the MiscTableScroll object allocates and manages a dense matrix of cells, which you fill in with data as needed.  In lazy mode, the MiscTableScroll object does not manage any cells at all.  You are responsible for implementing 
\f4\fs24 -tableScroll:cellAtRow:column:
\f3\fs28  to provide the MiscTableScroll object with a cell whenever it needs one.  In lazy mode, you generally want to implement many of the 
\f4\fs24 -tableScroll:...ValueAtRow:column:
\f3\fs28  methods to improve performance.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \
\

\f0\b\fs24\li1500 Usage Tips\

\f3\b0\fs16\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 For simple, flexible and maintainable access to the columns of the table scroll, you should declare an 
\b enum
\b0  which identifies the columns in the MiscTableScroll, for instance:\

\pard\tx2480\tx2860\tx3240\f0\b\fs16\li1360\fc0\cf0 \

\f4\b0\fs24\li2100 enum\
	\{\
	PHOTO_SLOT,\
	LAST_NAME_SLOT,\
	FIRST_NAME_SLOT,\
	AGE_SLOT\
	\};\

\f3\fs28 \

\pard\tx3600\tx3980\tx4340\li1500\fc0\cf0 Then you use the enumeration identifiers whenever you need to specify a column.  Using an enumeration this way lets you add, remove and shuffle the slots just by updating the enum declaration, rather than searching through the code to find all the places that need to be fixed.  It also makes your code more readable.\

\pard\tx2480\tx2860\tx3240\f0\b\fs16\li1360\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\f3\b0\fs28\li1500\fc0\cf0 There are two standard patterns for putting the data into eager (non-lazy) MiscTableScroll objects: 
\f4\fs24 -renewRows:
\f3\fs28  and 
\f4\fs24 -addRow
\f3\fs28 .\

\pard\tx2480\tx2860\tx3240\f0\b\fs16\li1360\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\f3\fs28\li1500\fc0\cf0 -renewRows
\b0 :\
When you know the number of rows in advance, it is most efficient to use the 
\f4\fs24 -renewRows:
\f3\fs28  method to tell the MiscTableScroll object the number of rows that you will need.  Your code will usually be structured as follows:\

\pard\tx2480\tx2860\tx3240\f0\b\fs16\li1360\fc0\cf0 \

\f4\b0\fs24\li2100 int row;\
int const nrows = [dataSource count];\
\
[tableScroll 
\b renewRows
\b0 :nrows];\

\b for
\b0  (row = 0;  row < nrows;  row++)\
    \{\
    id item = [dataSource itemAtRow:row];\
    [tableScroll setRow:row representedObject:item];\
    [[tableScroll cellAtRow:row column:LAST_NAME_SLOT] setStringValue:[item lastName]];\
    [[tableScroll cellAtRow:row column:AGE_SLOT] setIntValue:[item age]];\
    //... and so on ...\
    \}\
\
if ([tableScroll autoSortRows])\
	[tableScroll sortRows];\

\f0\b\fs16\li1360 \

\pard\tx3600\tx3980\tx4340\f3\fs28\li1500\fc0\cf0 -addRow
\b0 \
When you do not know the final number of rows in advance, your code will usually be structured as follows:\

\pard\tx2480\tx2860\tx3240\f0\b\fs16\li1360\fc0\cf0 \

\f4\b0\fs24\li2100 id item;\
int row = 0;\
[tableScroll 
\b empty
\b0 ];\
\

\b while
\b0  ((item = [self getNextItem]) != 0)\
	\{\
	[tableScroll 
\b addRow
\b0 ];\
	[tableScroll setRow:row representedObject:item];\
	[[tableScroll cellAtRow:row column:LAST_NAME_SLOT] setStringValue:[item lastName]];\
	[[tableScroll cellAtRow:row column:AGE_SLOT] setIntValue:[item age]];\
	//... and so on ...\
	row++;\
	\}\
\
[tableScroll 
\b sizeToCells
\b0 ];\
\
if ([tableScroll autoSortRows])\
	[tableScroll sortRows];\

\f0\b\fs16\li1360 \

\pard\tx3600\tx3980\tx4340\f3\b0\fs28\li1500\fc0\cf0 A common programming mistake is forgetting to call 
\f4\fs24 -sizeToCells
\f3\fs28 .  You must call 
\f4\fs24 -sizeToCells
\f3\fs28  after you have finished adding rows so that the MiscTableScroll can update the frames of its various subviews.  If you forget to call 
\f4\fs24 -sizeToCells
\f3\fs28 , the MiscTableScroll will appear to be empty when it is displayed.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \
\

\f0\b\fs24\li1500 Smart Memory Management\

\f3\b0\fs16\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 The MiscTableScroll class implements 
\i smart
\i0  memory management.  It does not allocate support structures until and unless they are needed.  For example, since rows are uniform-size by default, the MiscTableScroll will not allocate the array of sizing-info structures until and unless you make the rows non-uniform size.  In a complimentary fashion, if you make the columns uniform size, the MiscTableScroll object will release the sizing-info array for the columns.  Similarly, custom titles must be stored in an array.  However, no other title-mode requires this array, and the array will only exist  for borders that have custom titles.  Likewise, the visual-to-physical mapping vector that supports user-draggable slots is only created when the first slot is actually moved.  Even if the draggable option is turned on, you will not incur the memory overhead until the option is used.  The net result of all this is that you only pay for the features that you use.  \

\pard\tx2480\tx2860\tx3240\f0\b\fs16\li1360\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\f3\b0\fs28\li1500\fc0\cf0 On the other hand, you do pay for the features that you do use.  These extra features exact a price in storage and cpu.  You should be careful about using them for rows when you expect thousands of rows.\

\pard\tx2480\tx2860\tx3240\f0\b\fs16\li1360\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\f3\b0\fs28\li1500\fc0\cf0 The MiscTableScroll class is designed to provide high-quality, consistent, flexible behavior to the user while supporting a wide range of load requirements -- from dozens of  rows to hundreds of thousands of rows.  Smart memory management is an important element in achieving that goal.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \
\

\f0\b\fs24\li1500 Java\

\fs16\li1360 \

\pard\tx3600\tx3980\tx4340\f3\b0\fs28\li1500\fc0\cf0 As of MacOS/X Server (DR2), MiscTableScroll and its supporting classes are accessible from Java.  The framework classes are exposed to Java with these names:\

\pard\tx2480\tx2860\tx3240\f0\b\fs16\li1360\fc0\cf0 \

\pard\tx2340\tx4680\tx9180\f3\b0\ul\fs24\fi-2780\li4680\fc0\cf0 Objective-C
\ulnone 	
\ul Java\

\f4\ulnone MiscTableScroll	org.misckit.yellow.application.TableScroll\
MiscTableCell	org.misckit.yellow.application.TableScroll.Cell\
MiscExporter	org.misckit.yellow.application.TableScroll.Exporter\

\pard\tx2480\tx2860\tx3240\f0\b\fs16\li1360\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\f3\b0\fs28\li1500\fc0\cf0 A number of informal interfaces are also provided which define methods which the delegate or data-delegate may implement.  The interfaces are said to be 
\i informal
\i0  since the delegate need only implement the methods which it requires.  Provided that the implementations of these methods use the correct signatures, they will be dispatched as needed by MiscTableScroll.  There is no need for the delegate to explicitly state, in Java terminology, that it 
\i implements
\i0  an interface.  The methods defined in these interfaces are described later in this document in the sections 
\i Methods Implemented by the Delegate
\i0 ,
\i  Delegate Methods for Dragging Source Operations
\i0 , and 
\i Methods Implemented by Cell Subclasses
\i0 .  The exposed interfaces are:\

\pard\tx2480\tx2860\tx3240\f0\b\fs16\li1360\fc0\cf0 \

\pard\tx2340\tx5400\tx9180\f4\b0\fs24\fi-2420\li4320\fc0\cf0 org.misckit.yellow.application.TableScroll.Delegate\
org.misckit.yellow.application.TableScroll.Notifications\
org.misckit.yellow.application.TableScroll.DataSource\
org.misckit.yellow.application.TableScroll.DataCell\

\pard\tx2480\tx2860\tx3240\f0\b\fs16\li1360\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\f3\b0\fs28\li1500\fc0\cf0 Some Objective-C methods, such as 
\f4\fs24 -getRow:column:forPoint:
\f3\fs28  and 
\f4\fs24 -getRow:column:ofCell:
\f3\fs28  return row and column values by reference.  Since Java does not support the return of multiple values from a single method invocation, the Java counterparts 
\f4\fs24 locationForPoint()
\f3\fs28  and 
\f4\fs24 locationOfCell()
\f3\fs28  return a simple wrapper object, 
\f4\fs24 org.misckit.yellow.application.TableScroll.Location
\f3\fs28 , which defines two public integer fields, 
\f4\fs24 row
\f3\fs28  and 
\f4\fs24 column
\f3\fs28 .  The actual definition of 
\f4\fs24 Location
\f3\fs28  is presented later in the 
\i Constants and Defined Classes
\i0  section.  Constants which are exported by the framework, such as 
\f4\fs24 TableScrollSlotDraggedNotification
\f3\fs28 , 
\f4\fs24 MAX_PIXELS_SIZE
\f3\fs28 , and 
\f4\fs24 BORDER_COLUMN
\f3\fs28 , are also presented in that section.\

\pard\tx2480\tx2860\tx3240\f0\b\fs16\li1360\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\f3\b0\fs28\li1500\fc0\cf0 In general, the names of Java methods are identical or nearly identical to their Objective-C counterparts, but with extra punctuation stripped away.  Here are some examples:\

\pard\tx2480\tx2860\tx3240\f0\b\fs16\li1360\fc0\cf0 \

\pard\tx2340\tx6660\tx9180\f3\b0\ul\fs24\fi-4760\li6660\fc0\cf0 Objective-C
\ulnone 	
\ul Java\

\f4\ulnone -addRow	addRow()\
-setDelegate:	setDelegate(java.lang.Object)\
-cellAtRow:column:	cellAtLocation(int,int)\
-setColumn:minSize:	setColumnMinSize(int,float)\
-border:setSlot:minSize:	setSlotMinSize(int,int,float)\
-selectRow:	selectRow(int)\
-selectRow:byExtendingSelection:	selectRow(int,boolean)\
-setColumnSizes:	setColumnSizes(com.apple.yellow.foundation.NSArray)\
-setColumnSizesFromString:	setColumnSizes(String)\

\pard\tx2480\tx2860\tx3240\f0\b\fs16\li1360\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\f3\b0\fs28\li1500\fc0\cf0 Familiarity with the use of MiscTableScroll from Objective-C translates easily to Java.  To illustrate, here is a Java translation of a previously presented Objective-C code fragment from the 
\i Usage Tips
\i0  section.\

\pard\tx2480\tx2860\tx3240\f0\b\fs16\li1360\fc0\cf0 \

\f4\b0\fs24\li2100 int row = 0;\
tableScroll.empty();\
\
while ((item = getNextItem()) != null) \{\
	tableScroll.addRow();\
	tableScroll.setRowRepresentedObject(row,item);\
	tableScroll.cellAtLocation(row,LAST_NAME_SLOT).setStringValue(item.lastName());\
	tableScroll.cellAtLocation(row,AGE_SLOT).setIntValue(item.age());\
	//... and so on ...\
	row++;\
\}\
\
tableScroll.sizeToCells();\
\
if (tableScroll.autoSortRows())\
	tableScroll.sortRows();\

\f0\b\fs16\li1360 \

\pard\tx3600\tx3980\tx4340\f3\b0\fs28\li1500\fc0\cf0 The resources which allow MiscTableScroll to be accessed from Java are located within the MiscTableScroll framework.  In particular, these resources consist of a dynamically loaded library, 
\f4\fs24 MiscTableScrollJava
\f3\fs28 , and the compiled Java byte-code (the .
\f4\fs24 class
\f3\fs28  files).  To use MiscTableScroll from Java in a project, it is necessary to provide the correct search path to ensure that these resources can be properly located within the framework at both compilation time and execution time.\

\pard\tx2480\tx2860\tx3240\f0\b\fs16\li1360\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\f3\b0\fs28\li1500\fc0\cf0 Follow these steps to use MiscTableScroll in a Java project:\

\pard\tx2480\tx2860\tx3240\f0\b\fs16\li1360\fc0\cf0 \

\pard\tx2380\tx2860\tx3240\f3\b0\fs28\fi-280\li2380\fc0\cf0 1.	Add 
\f4\fs24 MiscTableScroll.framework
\f3\fs28  to the project's 
\i Framework
\i0  list.\
2.	Add the 
\f4\fs24 MiscTableScrollJava
\f3\fs28  dynamically linked library to the project's 
\i Libraries
\i0  list.\
3. Add the library's path to the project's 
\i Library Search Order
\i0  list.\
4.	In 
\f4\fs24 Makefile.preamble
\f3\fs28 , ensure that the definition of 
\f4\fs24 CLASSPATH
\f3\fs28  includes the 
\f4\fs24 Resources/Java
\f3\fs28  directory within the MiscTableScroll framework.\
5.	Add a 
\f4\fs24 CustomInfo.plist
\f3\fs28  file to the project which defines configuration options which allow the application to locate the compiled Java byte-code and dynamically linked library at execution time, as discussed below.\

\pard\tx2480\tx2860\tx3240\f0\b\fs16\li1360\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\f3\b0\fs28\li1500\fc0\cf0 The dynamically linked library, which is added to the project in step 2, is located within the framework's 
\f4\fs24 Resource
\f3\fs28  directory.  On Mach it is named 
\f4\fs24\fc1\cf1 libMiscTableScrollJava.dylib
\f3\fs28\fc0\cf0 .  On Microsoft Windows it is named 
\f4\fs24\fc1\cf1 MiscTableScrollJava.lib
\f3\fs28\fc0\cf0 .  On Windows, an additional file, 
\f4\fs24\fc1\cf1 MiscTableScrollJava.dll
\f3\fs28\fc0\cf0  is also installed in the standard 
\f4\fs24\fc1\cf1 Excutables
\f3\fs28\fc0\cf0  directory along with other framework executable files.  The 
\f4\fs24\fc1\cf1 Executables
\f3\fs28\fc0\cf0  directory must be mentioned in the Windows 
\f4\fs24\fc1\cf1 PATH
\f3\fs28\fc0\cf0  environment variable.  At minimum, when adding entries to the project's 
\i Library Search Order
\i0  in step 3, these paths should probably be included:\

\pard\tx2480\tx2860\tx3240\f0\b\fs16\li1360\fc0\cf0 \

\f4\b0\fs24\fi-240\li2340 $(NEXT_ROOT)/$(LOCAL_LIBRARY_DIR)/Frameworks/MiscTableScroll.framework/Resources\
$(NEXT_ROOT)/Network/Library/Frameworks/MiscTableScroll.framework/Resources\

\f0\b\fs16\fi0\li1360 \

\pard\tx3600\tx3980\tx4340\f3\b0\fs28\li1500\fc0\cf0 The Java compiler needs to know the location of the compiled byte-code (.
\f4\fs24 class
\f3\fs28  files) when the project is built.  The 
\f4\fs24 CLASSPATH
\f3\fs28  environment variable can be used to convey this information to the Java compiler.  A convenient way to ensure that 
\f4\fs24 CLASSPATH
\f3\fs28  includes the path to MiscTableScroll's byte-code is to insert the following code into the project's 
\f4\fs24 Makefile.preamble
\f3\fs28 , as instructed in step 4.  This sample code should work for the most common cases where MiscTableScroll is installed in one of the standard locations.\

\pard\tx2480\tx2860\tx3240\f0\b\fs16\li1360\fc0\cf0 \

\f4\b0\fs24\li2100 #------------------------------------------------------------------------------\
# Makefile.preamble\
#------------------------------------------------------------------------------\
# Ensure that the Java directory within the MiscTableScroll framework is\
# included in the class-path passed to the Java compiler.\
#------------------------------------------------------------------------------\
CLASSPATH = $(subst $(THINAIR) $(THINAIR),:,$(strip \\\
    $(NEXT_ROOT)/$(LOCAL_LIBRARY_DIR)/Frameworks/MiscTableScroll.framework/Resources/Java \\\
    $(NEXT_ROOT)/Network/Library/Frameworks/MiscTableScroll.framework/Resources/Java \\\
    $(shell javaconfig DefaultClasspath)))\

\f0\b\fs16\li1360 \

\pard\tx3600\tx3980\tx4340\f3\b0\fs28\li1500\fc0\cf0 The 
\f4\fs24 CustomInfo.plist
\f3\fs28 , which is added in step 5, is used to address a number of Java issues relevant at execution time.  When the project is built, the 
\f4\fs24 CustomInfo.plist
\f3\fs28  file is automatically merged into the generated 
\f4\fs24 Info.plist
\f3\fs28  file which is placed into the application wrapper.  Among other uses, 
\f4\fs24 Info.plist
\f3\fs28  is loaded into the running application early during its execution and provides a convenient place to put configuration options which affect the application's behavior.\

\pard\tx2480\tx2860\tx3240\f0\b\fs16\li1360\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\f3\b0\fs28\li1500\fc0\cf0 When the compiled application is executed, the Java engine must be able to locate the compiled MiscTableScroll byte-code (.
\f4\fs24 class
\f3\fs28  files).  To ensure that the engine can locate the byte-code, add an 
\f4\fs24 NSJavaUserPath
\f3\fs28  entry to 
\f4\fs24 CustomInfo.plist
\f3\fs28  which specifies the location of the MiscTableScroll Java resources.  Here is a definition of 
\f4\fs24 NSJavaUserPath
\f3\fs28  for use in 
\f4\fs24 CustomInfo.plist
\f3\fs28  which works in most cases when MiscTableScroll is installed in one of the standard locations:\

\pard\tx2480\tx2860\tx3240\f0\b\fs16\li1360\fc0\cf0 \

\f4\b0\fs24\li2100 NSJavaUserPath = (\
    /Local/Library/Frameworks/MiscTableScroll.framework/Resources/Java,\
    /Apple/Local/Library/Frameworks/MiscTableScroll.framework/Resources/Java,\
    /Network/Library/Frameworks/MiscTableScroll.framework/Resources/Java\
    );\

\f0\b\fs16\li1360 \

\pard\tx3600\tx3980\tx4340\f3\b0\fs28\li1500\fc0\cf0 Likewise, the Java engine must be able to locate the dynamically linked library at execution time.  The library path specified in step 3 provides the linker with the means to locate the library at build time, however the Java engine does not have access to this information when the application is finally executed.  To ensure that the Java engine can locate the library as well, an 
\f4\fs24 NSJavaLibraryPath
\f3\fs28  entry may be added to 
\f4\fs24 CustomInfo.plist
\f3\fs28 .  Here is a definition of 
\f4\fs24 NSJavaLibraryPath
\f3\fs28  which works in most cases:\

\pard\tx2480\tx2860\tx3240\f0\b\fs16\li1360\fc0\cf0 \

\f4\b0\fs24\li2100 NSJavaLibraryPath = (\
    /Local/Library/Frameworks/MiscTableScroll.framework/Resources,\
    /Network/Library/Frameworks/MiscTableScroll.framework/Resources\
    );\

\f0\b\fs16\li1360 \

\pard\tx3600\tx3980\tx4340\f3\b0\fs28\li1500\fc0\cf0 As a convenience, MiscTableScroll can be configured to automatically update the library search path instead of manually specifying it via 
\f4\fs24 NSJavaLibraryPath
\f3\fs28 .  To do so, add an entry for 
\f4\fs24 MiscTableScrollAddLibrarySearchPaths
\f3\fs28  with a value of 
\f4\fs24 Yes
\f3\fs28  to 
\f4\fs24 CustomInfo.plist
\f3\fs28 .  MiscTableScroll will then automatically update the library search path to include all standard 
\i library
\i0  directories as returned by a call to 
\f4\fs24 NSPathUtilities.searchPathForDirectoriesInDomains()
\f3\fs28 .  The default value of 
\f4\fs24 MiscTableScrollAddLibrarySearchPaths
\f3\fs28  is 
\f4\fs24 No
\f3\fs28 .  To enable this option in 
\f4\fs24 CustomInfo.plist
\f3\fs28 , specify:\

\pard\tx2480\tx2860\tx3240\f0\b\fs16\li1360\fc0\cf0 \

\f4\b0\fs24\li2100 MiscTableScrollAddLibrarySearchPaths = Yes;\

\f0\b\fs16\li1360 \

\pard\tx3600\tx3980\tx4340\f3\b0\fs28\li1500\fc0\cf0 Finally, a restriction in the Objective-C to Java bridge prevents Java programs from correctly accessing MiscTableScroll when the default Java security manager is in use.  To work around this limitation, it is necessary to install the 
\f4\fs24 NullSecurityManager
\f3\fs28  early in the application's execution.  It is typically sufficient to perform this task in a static initializer within the application's controlling Java class.  For instance:\

\pard\tx2480\tx2860\tx3240\f0\b\fs16\li1360\fc0\cf0 \

\f4\b0\fs24\li2100 static \{\
	try \{\
		com.apple.security.NullSecurityManager.installSystemSecurityManager();\
	\} catch (Exception e) \{\}\
\}\

\f0\b\fs16\li1360 \

\pard\tx3600\tx3980\tx4340\f3\b0\fs28\li1500\fc0\cf0 As a convenience, MiscTableScroll can be configured to automatically install the 
\f4\fs24 NullSecurityManager
\f3\fs28  on the application's behalf, instead of having to do so manually.  To enable this option, add an entry for 
\f4\fs24 MiscTableScrollUseNullSecurityManager
\f3\fs28  with a value of 
\f4\fs24 Yes
\f3\fs28  to 
\f4\fs24 CustomInfo.plist
\f3\fs28 .  Its default value is 
\f4\fs24 No
\f3\fs28 .\

\pard\tx2480\tx2860\tx3240\f0\b\fs16\li1360\fc0\cf0 \

\f4\b0\fs24\li2100 MiscTableScrollUseNullSecurityManager = Yes;\

\f0\b\fs16\li1360 \

\pard\tx3600\tx3980\tx4340\f3\b0\fs28\li1500\fc0\cf0 For most projects the following sample 
\f4\fs24 CustomInfo.plist
\f3\fs28  should be sufficient to enable use of MiscTableScroll from Java.  It can be copied, verbatim, into the project's 
\f4\fs24 CustomInfo.plist
\f3\fs28  file.\

\pard\tx2480\tx2860\tx3240\f0\b\fs16\li1360\fc0\cf0 \

\f4\b0\fs24\li2100 // CustomInfo.plist\
\{\
MiscTableScrollUseNullSecurityManager = Yes;\
MiscTableScrollAddLibrarySearchPaths = Yes;\
NSJavaUserPath = (\
    /Local/Library/Frameworks/MiscTableScroll.framework/Resources/Java,\
    /Apple/Local/Library/Frameworks/MiscTableScroll.framework/Resources/Java,\
    /Network/Library/Frameworks/MiscTableScroll.framework/Resources/Java\
    );\
\}\

\f3\fs16 \
\

\f0\b\fs24\li1500 Errors\

\fs16\li1360 \

\pard\tx3600\tx3980\tx4340\f3\b0\fs28\li1500\fc0\cf0 The only exception currently raised by MiscTableScroll is NSInternalInconsistencyException.  This exception is raised when MiscTableScroll detects an internal inconsistency.  This is typically indicative of a bug within this class.\

\pard\tx2480\tx2860\tx3240\f0\b\fs16\li1360\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\f3\b0\fs28\li1500\fc0\cf0 This exception is also currently raised when an out-of-range slot index is passed as an argument to a method which can not sensibly handle the bad index.  For instance, there is no sensible value which 
\f4\fs24 -rowTag:
\f3\fs28  can return when given a bad index, hence it raises an exception.  On the other hand no exception is raised by 
\f4\fs24 -selectRow:
\f3\fs28  since it can simply ignore the bad index.  <FIXME: In the future such methods will raise a more suitable exception, such as NSRangeException.>\

\fs14 \

\fs56 \

\pard\f0\b\fs28\fi-1020\li1200\fc0\cf0 Method Types\

\fs16\fi0\li1360 \

\pard\tx6080\tx11280\f3\b0\fs28\fi-4840\li6320\fc0\cf0 Creating and destroying instances	±initWithFrame:\

\pard\tx11280\fi-240\li6320\fc0\cf0 ±dealloc\

\pard\tx6140\tx9660\tx10180\fs16\fi-4040\li6140\fc0\cf0 \

\pard\tx6080\tx11280\fs28\fi-4840\li6320\fc0\cf0 Delegates	±setDelgate:\

\pard\tx11280\fi-240\li6320\fc0\cf0 ±delegate\
± setDataDelegate:\
± dataDelegate\

\pard\tx6140\tx9660\tx10180\fs16\fi-4040\li6140\fc0\cf0 \

\pard\tx6080\tx11280\fs28\fi-4840\li6320\fc0\cf0 Transmitting action	±setTarget:\

\pard\tx11280\fi-240\li6320\fc0\cf0 ±target\
± setDoubleTarget:\
± doubleTarget\
± setAction:\
± action\
± setDoubleAction:\
± doubleAction\

\pard\tx9660\tx10180\fs16\fi-520\li6640\fc0\cf0 \

\pard\tx11280\fs28\fi-240\li6320\fc0\cf0 ± sendAction:to:forAllCells:\
± sendAction:to:\
± sendAction\
± sendDoubleAction\
± sendActionIfEnabled\
± sendDoubleActionIfEnabled\

\pard\tx9660\tx10180\fs16\fi-520\li6640\fc0\cf0 \

\pard\tx11280\fs28\fi-240\li6320\fc0\cf0 ± isTrackingMouse\

\pard\tx9660\tx10180\fs16\fi-520\li6640\fc0\cf0 \

\pard\tx11280\fs28\fi-240\li6320\fc0\cf0 ± clickedSlot:\
± clickedRow\
± clickedColumn\
± clickedCell\

\pard\tx6140\tx9660\tx10180\fs16\fi-4040\li6140\fc0\cf0 \

\pard\tx6080\tx11280\fs28\fi-4840\li6320\fc0\cf0 Enabling and disabling	±setEnabled:\

\pard\tx11280\fi-240\li6320\fc0\cf0 ±isEnabled\

\pard\tx6140\tx9660\tx10180\fs16\fi-4040\li6140\fc0\cf0 \

\pard\tx6080\tx11280\fs28\fi-4840\li6320\fc0\cf0 Selection	± setSelectionMode:\

\pard\tx11280\fi-240\li6320\fc0\cf0 ±selectionMode\

\pard\tx9660\tx10180\fs16\fi-520\li6640\fc0\cf0 \

\pard\tx11280\fs28\fi-240\li6320\fc0\cf0 ± border:slotIsSelected:\
± rowIsSelected:\
± columnIsSelected:\
± cellIsSelectedAtRow:column:\

\pard\tx9660\tx10180\fs16\fi-520\li6640\fc0\cf0 \

\pard\tx11280\fs28\fi-240\li6320\fc0\cf0 ± selectedSlot:\
± selectedRow\
± selectedColumn\
± selectedCell\
± selectedSlotTags:\
± selectedRowTags\
± selectedColumnTags\
± selectedSlots:\
± selectedRows\
± selectedColumns\

\pard\tx9660\tx10180\fs16\fi-520\li6640\fc0\cf0 \

\pard\tx11280\fs28\fi-240\li6320\fc0\cf0 ± border:selectSlot:byExtendingSelection:\
± border:selectSlot:\
± selectRow:byExtendingSelection:\
± selectRow:\
± selectColumn:byExtendingSelection:\
± selectColumn:\
± border:selectSlotsWithTags:byExtendingSelection:\
± border:selectSlotsWithTags:\
± selectRowsWithTags:byExtendingSelection:\
± selectRowsWithTags:\
± selectColumnsWithTags:byExtendingSelection:\
± selectColumnsWithTags:\
± border:selectSlots:byExtendingSelection:\
± border:selectSlots:\
± selectRows:byExtendingSelection:\
± selectRows:\
± selectColumns:byExtendingSelection:\
± selectColumns:\
± selectAllSlots:\
± selectAllRows\
± selectAllColumns\
± selectAll:\

\pard\tx9660\tx10180\fs16\fi-520\li6640\fc0\cf0 \

\pard\tx11280\fs28\fi-240\li6320\fc0\cf0 ±border:deselectSlot:\
±deselectRow:\
±deselectColumn:\
± border:deselectSlotsWithTags:\
±deselectRowsWithTags:\
±deselectColumnsWithTags:\
± border:deselectSlots:\
±deselectRows:\
±deselectColumns:\
± clearSlotSelection:\
± clearRowSelection\
± clearColumnSelection\
±clearSelection\
±deselectAll:\

\pard\tx9660\tx10180\fs16\fi-520\li6640\fc0\cf0 \

\pard\tx11280\fs28\fi-240\li6320\fc0\cf0 ± hasSlotSelection:\
± hasRowSelection\
± hasColumnSelection\
± hasMultipleSlotSelection:\
± hasMultipleRowSelection\
± hasMultipleColumnSelection\
± numberOfSelectedSlots:\
± numberOfSelectedRows\
± numberOfSelectedColumns\

\pard\tx6140\tx9660\tx10180\fs16\fi-4040\li6140\fc0\cf0 \

\pard\tx11280\fs28\fi-240\li6320\fc0\cf0 ± setSelectsByRows:\
± selectsByRows\

\pard\tx6140\tx9660\tx10180\fs16\fi-4040\li6140\fc0\cf0 \

\pard\tx11280\fs28\fi-240\li6320\fc0\cf0 ± selectionChanged\

\pard\tx6140\tx9660\tx10180\fs16\fi-4040\li6140\fc0\cf0 \

\pard\tx6080\tx11280\fs28\fi-4840\li6320\fc0\cf0 Keyboard cursor	± border:setCursorSlot:\

\pard\tx11280\fi-240\li6320\fc0\cf0 ± clearCursorSlot:\
± cursorSlot:\
± hasValidCursorSlot:\
± clearCursor\
± clearCursorColumn\
± clearCursorRow\
± cursorColumn\
± cursorRow\
± disableCursor\
± enableCursor\
± hasValidCursorColumn\
± hasValidCursorRow\
± isCursorEnabled\
± setCursorColumn:\
± setCursorRow:\

\pard\tx6140\tx9660\tx10180\fs16\fi-4040\li6140\fc0\cf0 \

\pard\tx6080\tx11280\fs28\fi-4840\li6320\fc0\cf0 Incremental search	± incrementalSearch:\

\pard\tx11280\fi-240\li6320\fc0\cf0 ± doIncrementalSearch:column:\
± getIncrementalSearchColumn:\
± doGetIncrementalSearchColumn:\

\pard\tx6140\tx9660\tx10180\fs16\fi-4040\li6140\fc0\cf0 \

\pard\tx6080\tx11280\fs28\fi-4840\li6320\fc0\cf0 Scrolling	± scrollCellToVisibleAtRow:column:\

\pard\tx11280\fi-240\li6320\fc0\cf0 ± scrollColumnToVisible:\
± scrollRowToVisible:\
± scrollSelectionToVisible\

\pard\tx9660\tx10180\fs16\fi-520\li6640\fc0\cf0 \

\pard\tx11280\fs28\fi-240\li6320\fc0\cf0 ± border:setFirstVisibleSlot:\
± border:setLastVisibleSlot:\
± border:slotIsVisible:\
± firstVisibleSlot:\
± lastVisibleSlot:\
± numberOfVisibleSlots:\

\pard\tx9660\tx10180\fs16\fi-520\li6640\fc0\cf0 \

\pard\tx11280\fs28\fi-240\li6320\fc0\cf0 ± columnIsVisible:\
± firstVisibleColumn\
± lastVisibleColumn\
± numberOfVisibleColumns\
± setFirstVisibleColumn:\
± setLastVisibleColumn:\

\pard\tx9660\tx10180\fs16\fi-520\li6640\fc0\cf0 \

\pard\tx11280\fs28\fi-240\li6320\fc0\cf0 ± rowIsVisible:\
± firstVisibleRow\
± lastVisibleRow\
± numberOfVisibleRows\
± setFirstVisibleRow:\
± setLastVisibleRow:\

\pard\tx6140\tx9660\tx10180\fs16\fi-4040\li6140\fc0\cf0 \

\pard\tx6080\tx11280\fs28\fi-4840\li6320\fc0\cf0 Titles	± border:setSlotTitlesOn:\

\pard\tx11280\fi-240\li6320\fc0\cf0 ± setColumnTitlesOn:\
± setRowTitlesOn:\
± slotTitlesOn:\
± columnTitlesOn\
± rowTitlesOn\

\pard\tx9660\tx10180\fs16\fi-520\li6640\fc0\cf0 \

\pard\tx11280\fs28\fi-240\li6320\fc0\cf0 ± border:setSlotTitleMode:\
± setColumnTitleMode:\
± setRowTitleMode:\
± slotTitleMode:\
± columnTitleMode\
± rowTitleMode\

\pard\tx9660\tx10180\fs16\fi-520\li6640\fc0\cf0 \

\pard\tx11280\fs28\fi-240\li6320\fc0\cf0 ± border:setSlot:title:\
± setColumn:title:\
± setRow:title:\
± border:slotTitle:\
± columnTitle:\
± rowTitle:\

\pard\tx9660\tx10180\fs16\fi-520\li6640\fc0\cf0 \

\pard\tx11280\fs28\fi-240\li6320\fc0\cf0 ± cornerTitle\
± setCornerTitle:\

\pard\tx6140\tx9660\tx10180\fs16\fi-4040\li6140\fc0\cf0 \

\pard\tx6080\tx11280\fs28\fi-4840\li6320\fc0\cf0 Sizing	± border:setUniformSizeSlots:\

\pard\tx11280\fi-240\li6320\fc0\cf0 ± border:setMinUniformSizeSlots:\
± border:setMaxUniformSizeSlots:\
± setUniformSizeColumns:\
± setMinUniformSizeColumns:\
± setMaxUniformSizeColumns:\
± setUniformSizeRows:\
± setMinUniformSizeRows:\
± setMaxUniformSizeRows:\
± uniformSizeSlots:\
± minUniformSizeSlots:\
± maxUniformSizeSlots:\
± uniformSizeColumns\
± minUniformSizeColumns\
± maxUniformSizeColumns\
± uniformSizeRows\
± minUniformSizeRows\
± maxUniformSizeRows\

\pard\tx9660\tx10180\fs16\fi-520\li6640\fc0\cf0 \

\pard\tx11280\fs28\fi-240\li6320\fc0\cf0 ± border:setSizeableSlots:\
± setSizeableColumns:\
± setSizeableRows:\
± sizeableSlots:\
± sizeableColumns:\
± sizeableRows:\

\pard\tx9660\tx10180\fs16\fi-520\li6640\fc0\cf0 \

\pard\tx11280\fs28\fi-240\li6320\fc0\cf0 ± border:setSlot:size:\
± setColumn:size:\
± setRow:size:\
± border:slotSize:\
± columnSize:\
± rowSize:\

\pard\tx9660\tx10180\fs16\fi-520\li6640\fc0\cf0 \

\pard\tx11280\fs28\fi-240\li6320\fc0\cf0 ± border:setSlot:minSize:\
± setColumn:minSize:\
± setRow:minSize:\
± border:slotMinSize:\
± columnMinSize:\
± rowMinSize:\

\pard\tx9660\tx10180\fs16\fi-520\li6640\fc0\cf0 \

\pard\tx11280\fs28\fi-240\li6320\fc0\cf0 ± border:setSlot:maxSize:\
± setColumn:maxSize:\
± setRow:maxSize:\
± border:slotMaxSize:\
± columnMaxSize:\
± rowMaxSize:\

\pard\tx6140\tx9660\tx10180\fs16\fi-4040\li6140\fc0\cf0 \

\pard\tx11280\fs28\fi-240\li6320\fc0\cf0 ± border:slotAdjustedSize:\
± columnAdjustedSize:\
± rowAdjustedSize:\

\pard\tx9660\tx10180\fs16\fi-520\li6640\fc0\cf0 \

\pard\tx11280\fs28\fi-240\li6320\fc0\cf0 ± border:setSlot:autosize:\
± setColumn:autosize:\
± setRow:autosize:\
± border:slotIsAutosize:\
± columnIsAutosize:\
± rowIsAutosize:\

\pard\tx9660\tx10180\fs16\fi-520\li6640\fc0\cf0 \

\pard\tx11280\fs28\fi-240\li6320\fc0\cf0 ± border:setSlot:sizeable:\
± setColumn:sizeable:\
± setRow:sizeable:\
± border:slotIsSizeable:\
± columnIsSizeable:\
± rowIsSizeable:\

\pard\tx9660\tx10180\fs16\fi-520\li6640\fc0\cf0 \

\pard\tx11280\fs28\fi-240\li6320\fc0\cf0 ± constrainSize\
± totalSize:\
± totalHeight\
± totalWidth\

\pard\tx9660\tx10180\fs16\fi-520\li6640\fc0\cf0 \

\pard\tx11280\fs28\fi-240\li6320\fc0\cf0 ± border:slotResized:\

\pard\tx9660\tx10180\fs16\fi-520\li6640\fc0\cf0 \

\pard\tx11280\fs28\fi-240\li6320\fc0\cf0 ± border:setSlotTitlesSize:\
± slotTitlesSize:\
± setColumnTitlesHeight:\
± columnTitlesHeight\
± setRowTitlesWidth:\
± rowTitlesWidth\

\pard\tx6140\tx9660\tx10180\fs16\fi-4040\li6140\fc0\cf0 \

\pard\tx11280\fs28\fi-240\li6320\fc0\cf0 ± sizeToCells\
± sizeToFit\

\pard\tx6140\tx9660\tx10180\fs16\fi-4040\li6140\fc0\cf0 \

\pard\tx6080\tx11280\fs28\fi-4840\li6320\fc0\cf0 Dragging	± border:setDraggableSlots:\

\pard\tx11280\fi-240\li6320\fc0\cf0 ± setDraggableColumns:\
± setDraggableRows:\
± draggableSlots:\
± draggableColumns\
± draggableRows\

\pard\tx9660\tx10180\fs16\fi-520\li6640\fc0\cf0 \

\pard\tx11280\fs28\fi-240\li6320\fc0\cf0 ± border:setModifierDragSlots:\
± setModifierDragColumns:\
± setModifierDragRows:\
± modifierDragSlots:\
± modifierDragColumns\
± modifierDragRows\

\pard\tx9660\tx10180\fs16\fi-520\li6640\fc0\cf0 \

\pard\tx11280\fs28\fi-240\li6320\fc0\cf0 ± border:moveSlot:toSlot:\
± moveColumn:toColumn:\
± moveRow:toRow:\

\pard\tx9660\tx10180\fs16\fi-520\li6640\fc0\cf0 \

\pard\tx11280\fs28\fi-240\li6320\fc0\cf0 ± border:slotAtPosition:\
± columnAtPosition:\
± rowAtPosition:\

\pard\tx9660\tx10180\fs16\fi-520\li6640\fc0\cf0 \

\pard\tx11280\fs28\fi-240\li6320\fc0\cf0 ± border:slotPosition:\
± columnPosition:\
± rowPosition:\

\pard\tx9660\tx10180\fs16\fi-520\li6640\fc0\cf0 \

\pard\tx11280\fs28\fi-240\li6320\fc0\cf0 ± border:physicalToVisual:\
± border:visualToPhysical:\

\pard\tx9660\tx10180\fs16\fi-520\li6640\fc0\cf0 \

\pard\tx11280\fs28\fi-240\li6320\fc0\cf0 ± border:slotDragged:toSlot:\

\pard\tx6140\tx9660\tx10180\fs16\fi-4040\li6140\fc0\cf0 \

\pard\tx6080\tx11280\fs28\fi-4840\li6320\fc0\cf0 Inserting and deleting	± numberOfSlots:\

\pard\tx11280\fi-240\li6320\fc0\cf0 ± numberOfColumns\
± numberOfRows\

\pard\tx9660\tx10180\fs16\fi-520\li6640\fc0\cf0 \

\pard\tx11280\fs28\fi-240\li6320\fc0\cf0 ± addSlot:\
± addColumn\
± addRow\

\pard\tx9660\tx10180\fs16\fi-520\li6640\fc0\cf0 \

\pard\tx11280\fs28\fi-240\li6320\fc0\cf0 ± border:insertSlot:\
± insertColumn:\
± insertRow:\

\pard\tx9660\tx10180\fs16\fi-520\li6640\fc0\cf0 \

\pard\tx11280\fs28\fi-240\li6320\fc0\cf0 ± border:removeSlot:\
± removeColumn:\
± removeRow:\

\pard\tx9660\tx10180\fs16\fi-520\li6640\fc0\cf0 \

\pard\tx11280\fs28\fi-240\li6320\fc0\cf0 ± empty\
± emptyAndReleaseCells\
± renewRows:\

\pard\tx6140\tx9660\tx10180\fs16\fi-4040\li6140\fc0\cf0 \

\pard\tx6080\tx11280\fs28\fi-4840\li6320\fc0\cf0 Cell prototypes	± border:setSlot:cellType:\

\pard\tx11280\fi-240\li6320\fc0\cf0 ± setColumn:cellType:\
± setRow:cellType:\
± border:slotCellType:\
± columnCellType:\
± rowCellType:\

\pard\tx9660\tx10180\fs16\fi-520\li6640\fc0\cf0 \

\pard\tx11280\fs28\fi-240\li6320\fc0\cf0 ± border:setSlot:cellPrototype:\
± setColumn:cellPrototype:\
± setRow:cellPrototype:\
± border:slotCellPrototype:\
± columnCellPrototype:\
± rowCellPrototype:\

\pard\tx6140\tx9660\tx10180\fs16\fi-4040\li6140\fc0\cf0 \

\pard\tx6080\tx11280\fs28\fi-4840\li6320\fc0\cf0 Tags	± tag\

\pard\tx11280\fi-240\li6320\fc0\cf0 ± setTag:\

\pard\tx6140\tx9660\tx10180\fs16\fi-4040\li6140\fc0\cf0 \

\pard\tx11280\fs28\fi-240\li6320\fc0\cf0 ± border:setSlot:tag:\
± setColumn:tag:\
± setRow:tag:\
± border:slotTag:\
± columnTag:\
± rowTag:\
± tagAtRow:column:\

\pard\tx6140\tx9660\tx10180\fs16\fi-4040\li6140\fc0\cf0 \

\pard\tx6080\tx11280\fs28\fi-4840\li6320\fc0\cf0 Represented Objects	± representedObject\

\pard\tx11280\fi-240\li6320\fc0\cf0 ± setRepresentedObject:\

\pard\tx6140\tx9660\tx10180\fs16\fi-4040\li6140\fc0\cf0 \

\pard\tx11280\fs28\fi-240\li6320\fc0\cf0 ± border:setSlot:representedObject:\
± setColumn:representedObject:\
± setRow:representedObject:\
± border:slotRepresentedObject:\
± columnRepresentedObject:\
± rowRepresentedObject:\

\pard\tx6140\tx9660\tx10180\fs16\fi-4040\li6140\fc0\cf0 \

\pard\tx6080\tx11280\fs28\fi-4840\li6320\fc0\cf0 Drawing	± drawCellAtRow:column:\

\pard\tx11280\fi-240\li6320\fc0\cf0 ± border:drawSlot:\
± drawRow:\
± drawColumn:\
± border:drawSlotTitle:\
± drawRowTitle:\
± drawColumnTitle:\
± selectionChanged\
±cellFrameAtRow:column:\
± documentClipRect\
± drawsClippedText\
± setDrawsClippedText:\

\pard\tx6140\tx9660\tx10180\fs16\fi-4040\li6140\fc0\cf0 \

\pard\tx6080\tx11280\fs28\fi-4840\li6320\fc0\cf0 Editing and first responder	± abortEditing\

\pard\tx11280\fi-240\li6320\fc0\cf0 ± suspendEditing\
± resumeEditing\
± isEditing\
± getPreviousEditRow:column:\
± getNextEditRow:column:\
± getNext:editRow:column:\
± edit:atRow:column:\
± canEdit:atRow:column:\
± editIfAble:atRow:column:\
± editCellAtRow:column:\

\pard\tx6140\tx9660\tx10180\fs16\fi-4040\li6140\fc0\cf0 \

\pard\tx11280\fs28\fi-240\li6320\fc0\cf0 ± textDidBeginEditing:\
± textDidChange:\
± textDidEndEditing:\
± textShouldBeginEditing:\
± textShouldEndEditing:\

\pard\tx6140\tx9660\tx10180\fs16\fi-4040\li6140\fc0\cf0 \

\pard\tx11280\fs28\fi-240\li6320\fc0\cf0 ± didBecomeFirstResponder\
± didResignFirstResponder\

\pard\tx6140\tx9660\tx10180\fs16\fi-4040\li6140\fc0\cf0 \

\pard\tx6080\tx11280\fs28\fi-4840\li6320\fc0\cf0 Data control	± setLazy:\

\pard\tx11280\fi-240\li6320\fc0\cf0 ± isLazy\
± cellAtRow:column:\
± bufferCount\
± empty\
± emptyAndReleaseCells\
± sizeToCells\

\pard\tx6140\tx9660\tx10180\fs16\fi-4040\li6140\fc0\cf0 \

\pard\tx11280\fs28\fi-240\li6320\fc0\cf0 ± addSlot:\
± border:insertSlot:\
± border:removeSlot:\
± numberOfSlots:\

\pard\tx6140\tx9660\tx10180\fs16\fi-4040\li6140\fc0\cf0 \

\pard\tx11280\fs28\fi-240\li6320\fc0\cf0 ± addColumn\
± insertColumn:\
± removeColumn:\
± numberOfColumns\

\fs16 \

\fs28 ± addRow\
± insertRow:\
± removeRow:\
± numberOfRows\
± renewRows:\

\fs16 \

\fs28 ± doRetireCell:atRow:column:\
± doReviveCell:atRow:column:\
± retireCell:atRow:column:\
± reviveCell:atRow:column:\

\fs16 \

\fs28 ± tagAtRow:column:\
± intValueAtRow:column:\
± floatValueAtRow:column:\
± doubleValueAtRow:column:\
± stringValueAtRow:column:\
± titleAtRow:column:\
± stateAtRow:column:\

\pard\tx6140\tx9660\tx10180\fs16\fi-4040\li6140\fc0\cf0 \

\pard\tx6080\tx11280\fs28\fi-4840\li6320\fc0\cf0 Sorting	± autoSortColumns\

\pard\tx11280\fi-240\li6320\fc0\cf0 ± autoSortRows\
± autoSortSlots:\
± border:setAutoSortSlots:\
± border:setSlot:sortDirection:\
± border:setSlot:sortFunction:\
± border:setSlot:sortType:\
± border:setSlotSortVector:\
± border:slotDragged:toSlot:\
± border:slotResized:\
± border:slotSortDirection:\
± border:slotSortFunction:\
± border:slotSortReversed:\
± border:slotSortType:\
± border:sortSlot:\
± slotSortVector:\
± columnSortDirection:\
± columnSortFunction:\
± columnSortType:\
± columnSortVector\
± compareSlotFunction\
± rowSortDirection:\
± rowSortFunction:\
± rowSortType:\
± rowSortVector\
± setAutoSortColumns:\
± setAutoSortRows:\
± setColumn:sortDirection:\
± setColumn:sortFunction:\
± setColumn:sortType:\
± setColumnSortVector:\
± setCompareSlotFunction:\
± setRow:sortDirection:\
± setRow:sortFunction:\
± setRow:sortType:\
± setRowSortVector:\
± sortColumn:\
± sortColumns\
± sortRow:\
± sortRows\
± sortSlots:\

\pard\tx9660\tx10180\fs16\fi-520\li6640\fc0\cf0 \

\pard\tx11280\fs28\fi-240\li6320\fc0\cf0 ± slotsAreSorted:\
± rowsAreSorted\
± columnsAreSorted\
± border:slotIsSorted:\
± columnIsSorted:\
± rowIsSorted:\

\pard\tx9660\tx10180\fs16\fi-520\li6640\fc0\cf0 \

\pard\tx11280\fs28\fi-240\li6320\fc0\cf0 ± border:compareSlots::\
± border:compareSlots::info:\
± compareColumns::\
± compareColumns::info:\
± compareRows::\
± compareRows::info:\

\pard\tx9660\tx10180\fs16\fi-520\li6640\fc0\cf0 \

\pard\tx11280\fs28\fi-240\li6320\fc0\cf0 ± sortInfoInit:border:\
± sortInfoDone:\

\pard\tx6140\tx9660\tx10180\fs16\fi-4040\li6140\fc0\cf0 \

\pard\tx6080\tx11280\fs28\fi-4840\li6320\fc0\cf0 Font	+ defaultFont\

\pard\tx11280\fi-240\li6320\fc0\cf0 ± font\
± setFont:\

\pard\tx6140\tx9660\tx10180\fs16\fi-4040\li6140\fc0\cf0 \

\pard\tx6080\tx11280\fs28\fi-4840\li6320\fc0\cf0 Color	± backgroundColor\

\pard\tx11280\fi-240\li6320\fc0\cf0 ± color\
+ defaultBackgroundColor\
+ defaultSelectedBackgroundColor\
+ defaultSelectedTextColor\
+ defaultTextColor\
± selectedBackgroundColor\
± selectedTextColor\
± setBackgroundColor:\
± setColor:\
± setSelectedBackgroundColor:\
± setSelectedTextColor:\
± setTextColor:\
± textColor\

\pard\tx6140\tx9660\tx10180\fs16\fi-4040\li6140\fc0\cf0 \

\pard\tx6080\tx11280\fs28\fi-4840\li6320\fc0\cf0 Multicast	± makeCellsPerformSelector:\

\pard\tx11280\fi-240\li6320\fc0\cf0 ± makeCellsPerformSelector:selectedOnly:\
± makeCellsPerformSelector:with:\
± makeCellsPerformSelector:with:selectedOnly:\
± makeCellsPerformSelector:with:with:\
± makeCellsPerformSelector:with:with:selectedOnly:\

\pard\tx6140\tx9660\tx10180\fs16\fi-4040\li6140\fc0\cf0 \

\pard\tx6080\tx11280\fs28\fi-4840\li6320\fc0\cf0 Finding	± border:slotWithTag:\

\pard\tx11280\fi-240\li6320\fc0\cf0 ± border:slotWithRepresentedObject:\
± cellWithTag:\
± cellWithRepresentedObject:\
± columnWithTag:\
± columnWithRepresentedObject:\
± rowWithTag:\
± rowWithRepresentedObject:\
± getRow:column:ofCell:\
± getRow:column:ofCellWithTag:\
± getRow:column:ofCellWithRepresentedObject:\
±getRow:column:forPoint:\

\pard\tx6140\tx9660\tx10180\fs16\fi-4040\li6140\fc0\cf0 \

\pard\tx6080\tx11280\fs28\fi-4840\li6320\fc0\cf0 Save / restore	± border:setSlotOrder:\

\pard\tx11280\fi-240\li6320\fc0\cf0 ± border:setSlotOrderFromString:\
± slotOrder:\
± slotOrderAsString:\
± border:setSlotSizes:\
± border:setSlotSizesFromString:\
± slotSizes:\
± slotSizesAsString:\
± columnOrder\
± columnOrderAsString\
± columnSizes\
± columnSizesAsString\
± rowOrder\
± rowOrderAsString\
± rowSizes\
± rowSizesAsString\
± setColumnOrder:\
± setColumnOrderFromString:\
± setColumnSizes:\
± setColumnSizesFromString:\
± setRowOrder:\
± setRowOrderFromString:\
± setRowSizes:\
± setRowSizesFromString:\

\pard\tx6140\tx9660\tx10180\fs16\fi-4040\li6140\fc0\cf0 \

\pard\tx6080\tx11280\fs28\fi-4840\li6320\fc0\cf0 Pasteboard and services	± copy:\

\pard\tx11280\fi-240\li6320\fc0\cf0 ± cut:\
± builtinCanWritePboardType:\
± builtinReadSelectionFromPasteboard:\
± builtinRegisterServicesTypes\
± builtinValidRequestorForSendType:returnType:\
± builtinStringForPboardType:\
± builtinWriteSelectionToPasteboard:types:\
± canWritePboardType:\
± readSelectionFromPasteboard:\
± registerServicesTypes\
± validRequestorForSendType:returnType:\
± stringForNSStringPboardType\
± stringForNSTabularTextPboardType\
± stringForPboardType:\
± writeSelectionToPasteboard:types:\

\pard\tx6140\tx9660\tx10180\fs16\fi-4040\li6140\fc0\cf0 \

\pard\tx6080\tx11280\fs28\fi-4840\li6320\fc0\cf0 Printing	± print:\

\pard\tx6140\tx9660\tx10180\fs16\fi-4040\li6140\fc0\cf0 \

\pard\tx6080\tx11280\fs28\fi-4840\li6320\fc0\cf0 Methods implemented by delegate	± tableScroll:abortEditAtRow:column:\

\pard\tx11280\fi-240\li6320\fc0\cf0 ± tableScroll:allowDragOperationAtRow:column:\
± tableScrollBackgroundColorChanged:\
± tableScroll:border:slotPrototype:\
± tableScroll:border:slotTitle:\
± tableScrollBufferCount:\
± tableScroll:canEdit:atRow:column:\
± tableScroll:canWritePboardType:\
± tableScroll:cellAtRow:column:\
± tableScrollChangeFont:\
± tableScrollDidBecomeFirstResponder:\
± tableScrollDidEdit:\
± tableScrollDidPrint:\
± tableScrollDidResignFirstResponder:\
± tableScroll:draggingSourceOperationMaskForLocal:\
± tableScroll:doubleValueAtRow:column:\
± tableScroll:floatValueAtRow:column:\
± tableScrollFontChanged:\
± tableScroll:getIncrementalSearchColumn:\
± tableScrollIgnoreModifierKeysWhileDragging:\
± tableScroll:imageForDragOperationAtRow:column:\
± tableScroll:intValueAtRow:column:\
± tableScroll:preparePasteboard:forDragOperationAtRow:column:\
± tableScroll:readSelectionFromPasteboard:\
± tableScrollRegisterServicesTypes:\
± tableScroll:retireCell:atRow:column:\
± tableScroll:reviveCell:atRow:column:\
± tableScrollSelectedBackgroundColorChanged:\
± tableScrollSelectedTextColorChanged:\
± tableScroll:setStringValue:atRow:column:\
± tableScroll:shouldDelayWindowOrderingForEvent:\
± tableScrollSlotDragged:\
± tableScrollSlotResized:\
± tableScrollSlotSortReversed:\
± tableScroll:stateAtRow:column:\
± tableScroll:stringForPboardType:\
± tableScroll:stringValueAtRow:column:\
± tableScroll:tagAtRow:column:\
± tableScrollTextColorChanged:\
± tableScroll:titleAtRow:column:\
± tableScroll:validRequestorForSendType:returnType:\
± tableScrollWillEdit:\
±tableScrollWillPrint:\
±tableScrollWillPrintPageFooter:\
±tableScrollWillPrintPageHeader:\
± tableScroll:writeSelectionToPasteboard:types:\

\pard\tx6140\tx9660\tx10180\fs16\fi-4040\li6140\fc0\cf0 \

\pard\tx6080\tx11280\fs28\fi-4840\li6320\fc0\cf0 Methods implemented by cells	± tableScroll:retireAtRow:column:\

\pard\tx11280\fi-240\li6320\fc0\cf0 ± tableScroll:reviveAtRow:column:\

\fs70 \

\pard\f0\b\fs28\fi-1020\li1200\fc0\cf0 Class Methods\

\fs16\fi0\li1360 \

\pard\tx8260\fs28\li1500\fc0\cf0 defaultBackgroundColor\

\pard\f3\b0\fi-620\li2520\fc0\cf0 + (NSColor*)
\b defaultBackgroundColor
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 static NSColor 
\b defaultBackgroundColor
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns 
\f4\fs24 [NSColor controlBackgroundColor]
\f3\fs28 .  This is the default background color for new MiscTableScroll objects.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 defaultFont\

\pard\f3\b0\fi-620\li2520\fc0\cf0 + (NSFont*)
\b defaultFont
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 static NSFont 
\b defaultFont
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the user's preferred font at 12pt size.  This is the default font for new MiscTableScroll objects.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 defaultSelectedBackgroundColor\

\pard\f3\b0\fi-620\li2520\fc0\cf0 + (NSColor*)
\b defaultSelectedBackgroundColor
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 static NSColor 
\b defaultSelectedBackgroundColor
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns 
\f4\fs24 [NSColor selectedControlColor]
\f3\fs28 .  This is the default selected background color for new MiscTableScroll objects.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 defaultSelectedTextColor\

\pard\f3\b0\fi-620\li2520\fc0\cf0 + (NSColor*)
\b defaultSelectedTextColor
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 static NSColor 
\b defaultSelectedTextColor
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns 
\f4\fs24 [NSColor selectedControlTextColor]
\f3\fs28 .  This is the default selected text color for new MiscTableScroll objects.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 defaultTextColor\

\pard\f3\b0\fi-620\li2520\fc0\cf0 + (NSColor*)
\b defaultTextColor
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 static NSColor 
\b defaultTextColor
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns 
\f4\fs24 [NSColor controlTextColor]
\f3\fs28 .  This is the default text color for new MiscTableScroll objects.\

\pard\tx11280\fs70\fi-240\li6320\fc0\cf0 \

\pard\f0\b\fs28\fi-1020\li1200\fc0\cf0 Instance Methods\

\fs16\fi0\li1360 \

\pard\tx8260\fs28\li1500\fc0\cf0 abortEditing\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b abortEditing
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b abortEditing
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Abort cell editing.  Does not go though the normal 
\f4\fs24 -control:textShouldEndEditing:
\f3\fs28  validation method, nor does it go through the 
\f4\fs24 -controlTextDidEndEditing:
\f3\fs28  method.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 action\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (SEL)
\b action
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 NSSelector 
\b action
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the action associated with a single click\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 addColumn\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b addColumn
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b addColumn
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Appends a new column.  See 
\b Usage Tips
\b0  in the introduction for a more complete discussion.  Equivalent to: 
\f4\fs24 -addSlot:MISC_COL_BORDER
\f3\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 addRow\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b addRow
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b addRow
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Appends a new row to the table.  If you know how many rows you will need in advance, you should use 
\f4\fs24 -renewRows:
\f3\fs28  instead; it will be faster.  If you do not know the number of rows in advance, use this method.  This method is faster than 
\f4\fs24 -insertColumn:
\f3\fs28 .  Internally, the table pre-allocates rows with a geometric growth pattern so there are only a logarithmic number of allocations.  See 
\b Usage Tips
\b0  in the introduction for a more complete discussion.  Equivalent to: 
\f4\fs24 -addSlot:MISC_ROW_BORDER
\f3\fs28 .\

\pard\tx2480\tx2860\tx3240\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\li1500\fc0\cf0 This method does no drawing, nor does it update the frames of the various subviews.  (This enhances performance when adding hundreds or thousands of rows.)  After you have finished adding rows, you must call 
\f4\fs24 -sizeToCells
\f3\fs28  so that the MiscTableScroll can update the frames of the various subviews.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 addSlot:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b addSlot:
\b0 (MiscBorderType)
\i border
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b addSlot
\b0 (int 
\i border
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Appends a new row or column to the table.  Appending rows is fast (geometric growth, logarithmic allocations, no shifting).  Appending columns is slower (linear growth, linear allocations, lots of shifting).  See 
\b Usage Tips
\b0  in the introduction for a more complete discussion.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also: 
\f3\fs28 -renewRows:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 autoSortColumns\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b autoSortColumns
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b autoSortColumns
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Indicates whether columns will be automatically sorted when the user drags rows.  Equivalent to 
\f4\fs24 -autoSortSlots:MISC_COL_BORDER
\f3\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 autoSortRows\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b autoSortRows
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b autoSortRows
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Indicates whether rows will be automatically sorted when the user drags columns.  Equivalent to 
\f4\fs24 -autoSortSlots:MISC_ROW_BORDER
\f3\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 autoSortSlots:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b autoSortSlots:
\b0 (MiscBorderType)
\i border
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b autoSortSlots
\b0 (int 
\i border
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Indicates whether or not slots on the given border will be automatically sorted when the user drags (rearranges) slots on the other border.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 backgroundColor\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (NSColor*)
\b backgroundColor
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 NSColor 
\b backgroundColor
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the current background color for the MiscTableScroll object.  The background color is used as the background color of unselected cells in the table body as well as the 
\i exposure color
\i0  for areas not covered by cells.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:compareSlots::\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (int)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b compareSlots:
\b0 (int)
\i slot1
\b\i0  :
\b0 (int)
\i slot2
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 int 
\b compareSlots
\b0 (int 
\i border
\i0 , int 
\i slot1
\i0 ,
\i  
\i0 int 
\i slot2
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 This method compares two slots.  Returns a value less than zero if 
\i slot1
\i0  should sort before 
\i slot2
\i0 , zero if 
\i slot1
\i0  should sort equally with 
\i slot2
\i0 , or greater than zero if 
\i slot1
\i0  should sort after 
\i slot2
\i0 .  It calls 
\f4\fs24 -sortInfoInit:border:
\f3\fs28  to compute the sorting information, then calls 
\f4\fs24 -border:compareSlots::info:
\f3\fs28 , and finally cleans up with 
\f4\fs24 -slotInfoDone:
\f3\fs28 .\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -border:compareSlots::info:, -border:slotIsSorted:, -border:sortSlot:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:compareSlots::info:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (int)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b compareSlots:
\b0 (int)
\i slot1
\b\i0  :
\b0 (int)
\i slot2
\i0  
\b info:
\b0 (MiscSlotSortInfo*)
\i sortInfo
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 This method compares two slots, given a pointer to the precomputed sorting information.  If you call this method, you are responsible for initializing 
\i sortInfo
\i0  by calling 
\f4\fs24 -sortInfoInit:border:
\f3\fs28 , and then releasing the resources by calling 
\f4\fs24 -sortInfoDone:
\f3\fs28 .\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -border:compareSlots::, -sortInfoDone:, -sortInfoInit:border:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:deselectSlot:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b deselectSlot:
\b0 (MiscCoord_P)
\i slot
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b deselectSlot
\b0 (int 
\i border
\i0 , int 
\i slot
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Deselects the indicated slot.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:deselectSlots:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b deselectSlots:
\b0 (NSArray*)
\i slots
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b deselectSlots
\b0 (int 
\i border
\i0 , NSArray 
\i slots
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Deselects each slot in 
\i slots
\i0 .  Each element in 
\i slots
\i0  is an NSNumber in Objective-C, and a java.lang.Integer in Java.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:deselectSlotsWithTags:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b deselectSlotsWithTags:
\b0 (NSArray*)
\i tags
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b deselectSlotsWithTags
\b0 (int 
\i border
\i0 , NSArray 
\i tags
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Deselects all slots whose tag value can be found in 
\i tags
\i0 .  Each element in 
\i tags
\i0  is an NSNumber in Objective-C, and a java.lang.Integer in Java.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:drawSlot:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b drawSlot:
\b0 (int)
\i slot
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b drawSlot
\b0 (int 
\i border
\i0 , int 
\i slot
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Draws a single row or column.  This method locks focus on the view if needed.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -drawCellAtRow:column:, -drawColumn:, -drawRow:\

\pard\tx7140\f0\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:drawSlotTitle:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b drawSlotTitle:
\b0 (int)
\i slot
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b drawSlotTitle
\b0 (int 
\i border
\i0 , int 
\i slot
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Draws the title cell for a single row or column.  This method locks focus on the view if needed.  You should never need to call this method in normal use, though it might be useful for subclasses.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -drawColumnTitle:, -drawRowTitle:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:insertSlot:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b insertSlot:
\b0 (int)
\i slot
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b insertSlot
\b0 (int 
\i border
\i0 , int 
\i slot
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Inserts a single row or column at the indicated position.  Position is a zero-based index.  The slot is inserted at physical index 
\i slot
\i0 , and also at visual index 
\i slot
\i0 .  This method performs linear allocation, and is slower than the corresponding 
\f4\fs24 -addRow
\f3\fs28  method when adding new rows to a table.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:moveSlot:toSlot:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b moveSlot:
\b0 (int)
\i from_slot
\i0  
\b toSlot:
\b0 (int)
\i to_slot
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b moveSlotToSlot
\b0 (int 
\i border
\i0 , int 
\i from_slot
\i0 , int 
\i to_slot
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 This is equivalent to the user dragging a slot from 
\i from_slot
\i0  to 
\i to_slot
\i0 .  Both 
\i from_slot
\i0  and 
\i to_slot
\i0  are zero-based indexes into the current visual ordering of the slots.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:physicalToVisual:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (NSArray*)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b physicalToVisual:
\b0 (NSArray*)
\i slots
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 NSArray 
\b physicalToVisual
\b0 (int 
\i border
\i0 , NSArray 
\i slots
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 This method accepts an array of 
\i physical
\i0  (original) slot numbers, and returns an array containing the corresponding 
\i visual
\i0  (current) slot numbers.  This is accomplished via a succession of calls to 
\f4\fs24 -border:slotPosition:
\f3\fs28 .  Each element in 
\i slots
\i0  is an NSNumber in Objective-C, and a java.lang.Integer in Java.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -border:slotPosition:, -border:visualToPhysical:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:removeSlot:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b removeSlot:
\b0 (int)
\i slot
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b removeSlot
\b0 (int 
\i border
\i0 , int 
\i slot
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Removes a single row or column.  All cells are released and other internal resources for the slot are deallocated immediately.  If you are just emptying the table so that you can refill it with new data, use 
\f4\fs24 -renewRows:
\f3\fs28  or 
\f4\fs24 -empty
\f3\fs28  instead since these methods cache the cells for later re-use.  See 
\b Usage Tips
\b0  in the introduction for a more complete discussion.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also: 
\f3\fs28 -empty, -emptyAndReleaseCells, -renewRows:\

\pard\tx7140\f0\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:selectSlot:byExtendingSelection:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b selectSlot:
\b0 (MiscCoord_P)
\i slot
\i0  
\b byExtendingSelection:
\b0 (BOOL)
\i extendSelection
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b selectSlot
\b0 (int 
\i border
\i0 , int 
\i slot
\i0 , boolean 
\i extendSelection
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Selects the indicated slot.  If 
\i extendSelection
\i0  is YES then does not clear the previous selection, hence 
\i slot
\i0  is added to the existing selection.  If 
\i extendSelection
\i0  is NO then the previous selection is cleared.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:selectSlot:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b selectSlot:
\b0 (MiscCoord_P)
\i slot
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b selectSlot
\b0 (int 
\i border
\i0 , int 
\i slot
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -border:
\i border
\i0  selectSlot:
\i slot
\i0  byExtendingSelection:NO
\f3\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\

\pard\tx8260\li1500\fc0\cf0 \

\fs28 border:selectSlots:byExtendingSelection:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b selectSlots:
\b0 (NSArray*)
\i slots
\i0  
\b byExtendingSelection:
\b0 (BOOL)
\i extendSelection
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b selectSlots
\b0 (int 
\i border
\i0 , NSArray 
\i slots
\i0 , boolean 
\i extendSelection
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Selects each slot in 
\i slots
\i0 .  Each element in 
\i slots
\i0  is an NSNumber in Objective-C, and a java.lang.Integer in Java.  If 
\i extendSelection
\i0  is YES then does not clear the previous selection, hence 
\i slots
\i0  are added to the existing selection.  If 
\i extendSelection
\i0  is NO then the previous selection is cleared.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:selectSlots:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b selectSlots:
\b0 (NSArray*)
\i slots
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b selectSlots
\b0 (int 
\i border
\i0 , NSArray 
\i slots
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -border:
\i border
\i0  selectSlots:
\i slots
\i0  byExtendingSelection:NO
\f3\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:selectSlotsWithTags:byExtendingSelection:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b selectSlotsWithTags:
\b0 (NSArray*)
\i tags
\i0  
\b byExtendingSelection:
\b0 (BOOL)
\i extendSelection
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b selectSlotsWithTags
\b0 (int 
\i border
\i0 , NSArray 
\i tags
\i0 , boolean 
\i extendSelection
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Selects all slots whose tag value can be found in 
\i tags
\i0 .  Each element in 
\i tags
\i0  is an NSNumber in Objective-C, and a java.lang.Integer in Java.  If 
\i extendSelection
\i0  is YES then does not clear the previous selection, hence the slots found in 
\i tags
\i0  are added to the existing selection.  If 
\i extendSelection
\i0  is NO then the previous selection is cleared.  This method is useful in conjunction with 
\f4\fs24 -selectedSlotTags:
\f3\fs28  to save and restore the user's selection when you have tag values that uniquely identify the slots.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:selectSlotsWithTags:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b selectSlotsWithTags:
\b0 (NSArray*)
\i tags
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b selectSlotsWithTags
\b0 (int 
\i border
\i0 , NSArray 
\i tags
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -border:
\i border
\i0  selectSlotsWithTags:
\i tags
\i0  byExtendingSelection:NO
\f3\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:setAutoSortSlots:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b setAutoSortSlots:
\b0 (BOOL)
\i flag
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setAutoSortSlots
\b0 (int 
\i border
\i0 , boolean 
\i flag
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Instructs the MiscTableScroll object whether or not to automatically sort the slots in border 
\i border
\i0 , when the user drags a slot from the other border.  For example, when you tell the MiscTableScroll object to auto-sort rows, the rows will be automatically sorted every time the user drags a column to a new position.  AutoSort is off by default.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:setCursorSlot:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b setCursorSlot:
\b0 (MiscCoord_P)
\i slot
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setCursorSlot
\b0 (int 
\i border
\i0 , int 
\i slot
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Sets the keyboard cursor to 
\i slot
\i0 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:setDraggableSlots:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b setDraggableSlots:
\b0 (BOOL)
\i flag
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setDraggableSlots
\b0 (int 
\i border
\i0 , boolean 
\i flag
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Enables or disables reordering of the slots.  To let the user drag slots, the titles must be displayed, and the slots must be draggable.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -border:setModifierDragSlots:, -border:setSizeableSlots:, -border:setSlotTitlesOn:
\f0\fs24 \

\pard\tx7140\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:setFirstVisibleSlot:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b setFirstVisibleSlot:
\b0 (int)
\i slot
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setFirstVisibleSlot
\b0 (int 
\i border
\i0 , int 
\i slot
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Scrolls the table so that 
\i slot
\i0  is the first slot displayed if possible.
\f0\b\fs16 \

\pard\tx7140\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:setLastVisibleSlot:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b setLastVisibleSlot:
\b0 (int)
\i slot
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setLastVisibleSlot
\b0 (int 
\i border
\i0 , int 
\i slot
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Scrolls the table so that 
\i slot
\i0  is the last slot displayed if possible.
\f0\b\fs16 \

\pard\tx7140\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:setMaxUniformSizeSlots:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b setMaxUniformSizeSlots:
\b0 (float)
\i size
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setMaxUniformSizeSlots
\b0 (int 
\i border
\i0 , float 
\i size
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Sets the upper bound for user-sizing of a uniform-sized border, 
\i border
\i0 .  See 
\b Slot Sizing
\b0  in the introduction for more details.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:setMinUniformSizeSlots:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b setMinUniformSizeSlots:
\b0 (float)
\i size
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setMinUniformSizeSlots
\b0 (int 
\i border
\i0 , float 
\i size
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Sets the lower bound for user-sizing of a uniform-sized border, 
\i border
\i0 .  See 
\b Slot Sizing
\b0  in the introduction for more details.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:setModifierDragSlots:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b setModifierDragSlots:
\b0 (BOOL)
\i flag
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setModifierDragSlots
\b0 (int 
\i border
\i0 , boolean 
\i flag
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 This option controls whether an unmodified mouse-down initiates selection, or slot-dragging.  When 
\i flag
\i0  is YES, an unmodified mouse-down initiates selection, and the user must hold down the command-key to drag a slot.  When 
\i flag
\i0  is NO, an unmodified mouse-down initiates dragging, and the user must hold down the command-key to select a slot.  By default, columns are dragged with an unmodified mouse-down and selected when the command-key modifier is used.  By default, rows behave the other way; an unmodified mouse-down initiates selection, and a command-key modifier must be used to initiate dragging.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:setSizeableSlots:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b setSizeableSlots:
\b0 (BOOL)
\i flag
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setSizeableSlots
\b0 (int 
\i border
\i0 , boolean 
\i flag
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Enables or disables user-sizing of the slots.  Many conditions must be met to enable the user to resize a particular slot.  See 
\b Slot Sizing
\b0  in the introduction for details.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:setSlot:autosize:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b setSlot:
\b0 (int)
\i slot
\i0  
\b autosize:
\b0 (BOOL)
\i flag
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setSlotAutosize
\b0 (int 
\i border
\i0 , int 
\i slot
\i0 , boolean 
\i flag
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Enables or disables 
\i autosizing
\i0  for a particular slot.  When YES, the slot will be adjusted proportionately with all other 
\i autosize
\i0  slots in the border to meet global minimum or maximum size restrictions for the border as a whole.  Currently, this only has effect for columns in narrow tables displayed in wide NSScrollViews.  See 
\b Slot Sizing
\b0  in the introduction for more details.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:setSlot:cellPrototype:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b setSlot:
\b0 (int)
\i slot
\i0  
\b cellPrototype:
\b0 (id)
\i cell
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setSlotCellPrototype
\b0 (int 
\i border
\i0 , int 
\i slot
\i0 , NSCell 
\i cell
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Set the cell prototype for a slot.  Currently, only column cell prototypes are used.  When new rows are allocated for the table, the cell prototype from each column is sent a 
\f4\fs24 -copyWithZone:
\f3\fs28  message.  The newly created cell is placed into the newly created row.  Thus all prototype cells must implement the 
\f4\fs24 -copyWithZone:
\f3\fs28  message appropriately.  (In general, this implies making a 
\i deep
\i0  copy.)  The MiscTableScroll retains 
\i cell
\i0  when this method is invoked and releases it when it is no longer needed.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -border:setSlot:cellType:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:setSlot:cellType:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b setSlot:
\b0 (int)
\i slot
\i0  
\b cellType:
\b0 (MiscTableCellStyle)
\i type
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setSlotCellType
\b0 (int 
\i border
\i0 , int 
\i slot
\i0 , int 
\i type
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Sets the type of cell that will be used for a particular slot.  Currently, only column cell types have any effect; row cell types are ignored.  The cell type, 
\i type
\i0 , can be any of the following:\

\pard\f4\fs24\li3600\fc0\cf0 \

\pard\tx2340\tx5760\tx9180\f3\ul\fi-3860\li5760\fc0\cf0 Objective-C
\ulnone 	
\ul Java\

\f4\ulnone MISC_TABLE_CELL_TEXT	CELL_TYPE_TEXT\
MISC_TABLE_CELL_IMAGE	CELL_TYPE_IMAGE\
MISC_TABLE_CELL_BUTTON	CELL_TYPE_BUTTON\
MISC_TABLE_CELL_CALLBACK	CELL_TYPE_CALLBACK\

\pard\li3600\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\f3\fs28\li1500\fc0\cf0 When this method is called, the MiscTableScroll object will create a prototype cell for the indicated slot of the indicated type.  
\f4\fs24 MISC_TABLE_CELL_TEXT
\f3\fs28  creates a text-cell; 
\f4\fs24 MISC_TABLE_CELL_IMAGE
\f3\fs28  creates an image-cell; 
\f4\fs24 MISC_TABLE_CELL_BUTTON
\f3\fs28  creates a button-cell; and 
\f4\fs24 MISC_TABLE_CELL_CALLBACK
\f3\fs28  instructs the MiscTableScroll object to ask the delegate for the for the prototype cell.  <FIXME: What is the interaction with setting an explicit prototype cell?  What message is sent to the delegate to get the prototype?  When is the message sent?  Does it ask for the cell itself, or just a prototype?  Is it sent to the delegate, or the data-delegate>\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -border:setSlot:cellPrototype:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:setSlot:maxSize:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b setSlot:
\b0 (int)
\i slot
\i0  
\b maxSize:
\b0 (float)
\i size
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setSlotMaxSize
\b0 (int 
\i border
\i0 , int
\i  slot
\i0 , float 
\i size
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Sets the maximum size for 
\i slot
\i0 .  The 
\i size
\i0  argument is in units of screen pixels.  See 
\b Slot Sizing
\b0  in the introduction for more details.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:setSlot:minSize:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b setSlot:
\b0 (int)
\i slot
\i0  
\b minSize:
\b0 (float)
\i size
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setSlotMinSize
\b0 (int 
\i border
\i0 , int 
\i slot
\i0 , float 
\i size
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Sets the minimum size for 
\i slot
\i0 .  The 
\i size
\i0  argument is in units of screen pixels.  See 
\b Slot Sizing
\b0  in the introduction for more details.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:setSlot:representedObject:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b setSlot:
\b0 (int)
\i slot
\i0  
\b representedObject:
\b0 (id)
\i object
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setSlotRepresentedObject
\b0 (int 
\i border
\i0 , int 
\i slot
\i0 , Object 
\i object
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Sets the represented object for 
\i slot 
\i0 to 
\i object
\i0 .  Releases the old represented object if any and then retains 
\i object
\i0 .  See 
\b Represented Objects
\b0  in the introduction for more details.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -border:setSlot:tag:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:setSlot:size:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b setSlot:
\b0 (int)
\i slot
\i0  
\b size:
\b0 (float)
\i size
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setSlotSize
\b0 (int 
\i border
\i0 , int 
\i slot
\i0 , float 
\i size
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Sets the 
\i target
\i0  size for 
\i slot
\i0 .  The 
\i size
\i0  argument is in units of screen pixels.  See 
\b Slot Sizing
\b0  in the introduction for more details.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:setSlot:sizeable:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b setSlot:
\b0 (int)
\i slot
\i0  
\b sizeable:
\b0 (BOOL)
\i flag
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setSlotSizeable
\b0 (int 
\i border
\i0 , int 
\i slot
\i0 , boolean 
\i flag
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Sets the 
\i user-sizeable
\i0  flag for 
\i slot
\i0 .  When 
\i flag
\i0   is YES, the user will be able to resize the slot.  When 
\i flag
\i0  is NO, the user will not be able to resize the slot.  There are many conditions which must be met for a user to be able to resize a slot.  See 
\b Slot Sizing
\b0  in the introduction for more details.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:setSlot:sortDirection:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b setSlot:
\b0 (int)
\i slot
\i0  
\b sortDirection:
\b0 (MiscSortDirection)
\i dir
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setSlotSortDirection
\b0 (int 
\i border
\i0 , int 
\i slot
\i0 , int 
\i dir
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Indicates whether 
\i slot
\i0  should be sorted in ascending or descending order.  
\i dir
\i0  must be one of the following two values:\

\pard\f4\fs24\li3600\fc0\cf0 \

\pard\tx2340\tx5400\tx9180\f3\ul\fi-3500\li5400\fc0\cf0 Objective-C
\ulnone 	
\ul Java\

\f4\ulnone MISC_SORT_ASCENDING	SORT_ORDER_ASCENDING\
MISC_SORT_DESCENDING	SORT_ORDER_DESCENDING\

\pard\tx2480\tx2860\tx3240\f3\fs28\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\li1500\fc0\cf0 All other values are ignored.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -border:setSlot:sortType:, -border:setSlot:sortFunction:, -border:slotSortDirection:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:setSlot:sortFunction
\f3\b0 :
\f0\b \

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b border:
\b0 (MiscBorderType)
\i b
\i0  
\b setSlot:
\b0 (int)
\i n
\i0  
\b sortFunction
\b0 :(MiscCompareEntryFunc)
\i func
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Makes 
\i func
\i0  the cell-to-cell comparison routine for the cells in slot 
\i n
\i0 .  The function, 
\i func
\i0 , must match the following prototype from 
\f4\fs24 MiscTableTypes.h
\f3\fs28 :\

\pard\tx2480\tx2860\tx3240\li2100\fc0\cf0 \

\pard\tx4320\f4\fs24\li2160\fc0\cf0 typedef int (*MiscCompareEntryFunc)\
	( int r1, int c1, int r2, int c2,\
	MiscEntrySortInfo const* entry_info,\
	MiscSlotSortInfo* sort_info );\

\pard\tx2480\tx2860\tx3240\f3\fs28\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\li1500\fc0\cf0 The function is given the coordinates of the two cells, and two pointers to structures containing additional sorting information.  The function should return an integer that is: (a) less than zero if the cell at (r1,c1) should sort before the cell at (r2,c2), (b) equal to zero if the two cells should sort equally, or (c) greater than zero if the cell at (r1,c1) should sort after the cell at (r2,c2).\

\pard\tx2480\tx2860\tx3240\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\li1500\fc0\cf0 The sort direction (ascending or descending) is applied to the value returned by the cell-to-cell comparison function by the slot-to-slot comparison function.  So if you supply a custom cell-to-cell comparison function you should ignore the sort direction for that slot.  You should always return the 
\i ascending
\i0  sort-order value.\

\pard\tx2480\tx2860\tx3240\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\li1500\fc0\cf0 Use this method when you need to perform custom sorting that the built-in sort-types cannot accommodate.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -border:setSlot:sortDirection:, -border:setSlot:sortType:, -border:slotSortFunction:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:setSlot:sortType:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b setSlot:
\b0 (int)
\i slot
\i0  
\b sortType:
\b0 (MiscSortType)
\i type
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setSlotSortType
\b0 (int 
\i border
\i0 , int 
\i slot
\i0 , int 
\i type
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Sets the type of sorting to be used by the built-in cell-to-cell comparison function for cells in 
\i slot
\i0 .  The sort 
\i type
\i0  must be one of the following values:\

\pard\tx2480\tx2860\tx3240\li2100\fc0\cf0 \

\pard\tx2340\tx6660\tx9180\ul\fs24\fi-4760\li6660\fc0\cf0 Objective-C
\ulnone 	
\ul Java\

\f4\ulnone MISC_SORT_STRING_CASE_INSENSITIVE	SORT_STRING_CASE_INSENSITIVE\
MISC_SORT_STRING_CASE_SENSITIVE	SORT_STRING_CASE_SENSITIVE\
MISC_SORT_INT	SORT_INT\
MISC_SORT_UNSIGNED_INT	SORT_UNSIGNED_INT\
MISC_SORT_TAG	SORT_TAG\
MISC_SORT_UNSIGNED_TAG	SORT_UNSIGNED_TAG\
MISC_SORT_FLOAT	SORT_FLOAT\
MISC_SORT_DOUBLE	SORT_DOUBLE\
MISC_SORT_SKIP	SORT_SKIP\
MISC_SORT_TITLE_CASE_INSENSITIVE	SORT_TITLE_CASE_INSENSITIVE\
MISC_SORT_TITLE_CASE_SENSITIVE	SORT_TITLE_CASE_SENSITIVE\
MISC_SORT_STATE	SORT_STATE\
MISC_SORT_UNSIGNED_STATE	SORT_UNSIGNED_STATE\

\pard\tx2480\tx2860\tx3240\f3\fs28\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\li1500\fc0\cf0 All other values are ignored.  Each of the types is described below.\

\pard\tx2480\tx2860\tx3240\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\f4\fs24\li1500\fc0\cf0 MISC_SORT_STRING_CASE_INSENSITIVE\
MISC_SORT_STRING_CASE_SENSITIVE
\fs10  
\fs24 \

\pard\f3\fs16\li2100\fc0\cf0 \

\fs28\li2160 The cells are compared as strings.  The string values are retrieved using the 
\f4\fs24 -stringValueAtRow:column:
\f3\fs28  message. 
\f4\fs24 MISC_SORT_STRING_CASE_INSENSITIVE
\f3\fs28  is the default sort-type.\

\fs16\li2100 \

\pard\tx3600\tx3980\tx4340\f4\fs24\li1500\fc0\cf0 MISC_SORT_INT\
MISC_SORT_UNSIGNED_INT\

\pard\f3\fs16\li2100\fc0\cf0 \

\fs28\li2160 The cells are compared as integers.  The integer values are retrieved using the 
\f4\fs24 -intValueAtRow:column:
\f3\fs28  message.
\f4\fs24 \

\f3\fs16\li2100 \

\pard\tx3600\tx3980\tx4340\f4\fs24\li1500\fc0\cf0 MISC_SORT_TAG\
MISC_SORT_UNSIGNED_TAG\

\pard\f3\fs16\li2100\fc0\cf0 \

\fs28\li2160 The cells are compared as integers.  The integer values are retrieved using the 
\f4\fs24 -tagAtRow:column:
\f3\fs28  message.  This feature is useful for sorting that is handled "behind-the-scenes".  For example, if the slot holds date information, you can put a numeric representation of the date (such as that obtained with 
\f4\fs24 -[NSDate timeIntervalSinceReferenceDate]
\f3\fs28 ) into the cell's tag, and format the string value any way you wish.  The slot will sort correctly regardless of the display format.  It is also useful for slots that hold keywords from an ordered set of values, like the following enumeration:\

\fs16\li2100 \

\f4\fs24\li2160 enum Severity \{ Notice, Warning, Error, Fatal \};\

\f3\fs16\li2100 \

\fs28\li2160 Sorting these alphabetically does not make sense, but if you put the enum value into the tag of the cell, you can sort them correctly.  This sort type also makes it possible to sort slots that hold icons.\

\fs16\li2100 \

\pard\tx3600\tx3980\tx4340\f4\fs24\li1500\fc0\cf0 MISC_SORT_FLOAT\

\pard\f3\fs16\li2100\fc0\cf0 \

\fs28\li2160 The cells are compared as single-precision floating point numbers.  The values are retrieved using the 
\f4\fs24 -floatValueAtRow:column:
\f3\fs28  message.\

\fs16\li2100 \

\pard\tx3600\tx3980\tx4340\f4\fs24\li1500\fc0\cf0 MISC_SORT_DOUBLE\

\pard\f3\fs16\li2100\fc0\cf0 \

\fs28\li2160 The cells are compared as double-precision floating point numbers.  The values are retrieved using the 
\f4\fs24 -doubleValueAtRow:column:
\f3\fs28  message.\

\fs16\li2100 \

\pard\tx3600\tx3980\tx4340\f4\fs24\li1500\fc0\cf0 MISC_SORT_SKIP\

\pard\tx2480\tx2860\tx3240\f3\fs16\li2100\fc0\cf0 \

\pard\fs28\li2160\fc0\cf0 The cells are not compared.  All cells in slots with the 
\f4\fs24 MISC_SORT_SKIP
\f3\fs28  sort-type are considered equal.  This can be used for slots that should not affect the sorting.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\f4\fs24\li1500\fc0\cf0 MISC_SORT_TITLE_CASE_INSENSITIVE\
MISC_SORT_TITLE_CASE_SENSITIVE
\fs10  
\fs24 \

\pard\tx2480\tx2860\tx3240\f3\fs16\li2100\fc0\cf0 \

\pard\fs28\li2160\fc0\cf0 The cells are compared as strings.  The string values are retrieved using the 
\f4\fs24 -titleAtRow:column: message
\f3\fs28 .  This is provided to support NSButtonCells.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\f4\fs24\li1500\fc0\cf0 MISC_SORT_STATE\
MISC_SORT_UNSIGNED_STATE\

\pard\tx2480\tx2860\tx3240\f3\fs16\li2100\fc0\cf0 \

\pard\fs28\li2160\fc0\cf0 The cells are compared as integers.  The integer values are retrieved using the 
\f4\fs24 -stateAtRow:column:
\f3\fs28  message.  This is provided to support NSButtonCells.
\f4\fs24 \

\pard\tx2480\tx2860\tx3240\f3\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -border:setSlot:sortDirection:, -border:setSlot:sortFunction:, -border:slotSortType:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:setSlot:tag:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b setSlot:
\b0 (int)
\i slot
\i0  
\b tag:
\b0 (int)
\i tag
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setSlotTag
\b0 (int 
\i border
\i0 , int 
\i slot
\i0 , int 
\i tag
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Sets the tag for 
\i slot 
\i0 to 
\i tag
\i0 .\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -border:setSlot:representedObject:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:setSlot:title:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b setSlot:
\b0 (int)
\i slot
\i0  
\b title:
\b0 (NSString*)
\i title
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setSlotTitle
\b0 (int 
\i border
\i0 , int 
\i slot
\i0 , String 
\i title)
\i0\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Sets the title for 
\i slot
\i0  to 
\i title
\i0 .  This method only works for borders with custom titles (that is, 
\f4\fs24 -border:
\i border
\i0  setSlotTitleMode:MISC_CUSTOM_TITLE
\f3\fs28 ).  If the border does not have custom titles, the request is silently ignored.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -border:setSlotTitleMode:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:setSlotOrder:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b setSlotOrder:
\b0 (NSArray*)
\i list
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b setSlotOrder
\b0 (int 
\i border
\i0 , NSArray 
\i list
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Rearranges the slots to match the order specified by 
\i list
\i0 .  Each element in 
\i list
\i0  is an NSNumber in Objective-C, and a java.lang.Integer in Java.  The list is organized in the 
\i physical
\i0  (original) order of the slots.  Each value in the list is the new 
\i visual
\i0  position for the corresponding slot.  In other words, 
\i list
\i0  is a physical to visual mapping.  This is useful for restoring the user's slot-order preference.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\i\fs28\li1500\fc0\cf0 List
\i0  also encodes the sort direction.  Negative values set the slot sort direction to descending.  Positive values set the slot sort direction to ascending.  Negative values are formed by using the 'C' bitwise complement operator (~). \

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 When 
\i list
\i0  is nil or an empty array, the slots are "unsorted" -- they are returned to their original physical order, and are reset to ascending sort-direction.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns YES on success, NO on failure.\

\pard\tx2480\tx2860\tx3240\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -border:setSlotOrderFromString:, -border:setSlotSizes:, -slotOrder:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:setSlotOrderFromString:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b setSlotOrderFromString:
\b0 (NSString*)
\i s
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b setSlotOrder
\b0 (int 
\i border
\i0 , String 
\i s
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 This is a convenience method which invokes 
\f4\fs24 -border:setSlotOrder:
\f3\fs28  using an 
\f4\fs24 NSArray
\f3\fs28  constructed from 
\i s
\i0 .\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -border:setSlotOrder:, -border:setSlotSizes:, -slotOrder:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:setSlotSizes:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b setSlotSizes:
\b0 (NSArray*)
\i list
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b setSlotSizes
\b0 (int 
\i border
\i0 , NSArray 
\i list
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Sets the sizes of all slots to the values in 
\i list
\i0 .  Each element in 
\i list
\i0  is an NSNumber in Objective-C, and a java.lang.Integer in Java.  List is organized in 
\i physical
\i0  (original) slot order.  Each value is the size of the corresponding slot.  This method is useful for restoring the user's slot size preferences.  Returns 
\b YES
\b0  on success, 
\b NO
\b0  on failure.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -border:setSlotOrder:, -border:setSlotSizesFromString:, -slotSizes:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:setSlotSizesFromString:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b setSlotSizesFromString:
\b0 (NSString*)
\i s
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b setSlotSizes
\b0 (int 
\i border
\i0 , String 
\i s
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 This is a convenience method which invokes 
\f4\fs24 -border:setSlotSizes:
\f3\fs28  using an 
\f4\fs24 NSArray
\f3\fs28  constructed from 
\i s
\i0 .\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -border:setSlotOrder:, -border:setSlotSizes:, -slotSizes:\

\pard\tx7140\f0\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:setSlotSortVector:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b setSlotSortVector:
\b0 (NSArray*)
\i v
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setSlotSortVector
\b0 (int 
\i border
\i0 , NSArray 
\i v
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Sets the order in which slots are considered when sorting.  Each value in 
\i v 
\i0 is the 
\i physical
\i0  (original) position of a slot.    The elements of 
\i v
\i0  are each an NSNumber in Objective-C, and a java.lang.Integer in Java.  The slots will be compared in the order that they appear in 
\i v
\i0 .  Use the one's complement (bitwise negation with the tilde, `~', operator) to reverse the sort direction (ascending / descending) of a slot.  The current 
\i visual
\i0  slot order is used by default; use this method to specify a different ordering.  This method turns off auto-sort for the other border.  That is, setting a 
\i slotSortVector
\i0  for the columns turns off auto-sort for the rows.  The auto-sort facility automatically sorts the table whenever a slot is dragged, so setting a slot sort vector invalidates the premise on which auto-sort works.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -slotSortVector
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:setSlotTitleMode:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b setSlotTitleMode:
\b0 (MiscTableTitleMode)
\i mode
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setSlotTitleMode
\b0 (int 
\i border
\i0 , int 
\i mode
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Sets the 
\i title-mode
\i0  for a border.  The 
\i mode
\i0  can be any of the following:\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2340\tx5040\tx7560\ul\fs24\fi-3140\li5040\fc0\cf0 Objective-C
\ulnone 	
\ul Java
\ulnone 	
\ul Description\

\f4\ulnone MISC_NO_TITLE,	TITLE_NONE	
\f3 No titles on row/column cells.
\f4 \
MISC_NUMBER_TITLE,	TITLE_NUMBER	
\f3 Titles are sequential numbers.
\f4 \
MISC_ALPHA_TITLE,	TITLE_ALPHA	
\f3 Titles are sequential alphabetics.
\f4 \
MISC_CUSTOM_TITLE,	TITLE_CUSTOM	
\f3 Titles are user-supplied strings.
\f4 \
MISC_DELEGATE_TITLE	TITLE_DELEGATE	
\f3 Ask the delegate for titles.
\f4 \

\pard\tx2480\tx2860\tx3240\f3\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -tableScroll:border:slotTitle: 
\b0 (delegate method)
\b \

\pard\tx7140\f0\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:setSlotTitlesOn:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b setSlotTitlesOn:
\b0 (BOOL)
\i flag
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b setSlotTitlesOn
\b0 (int 
\i border
\i0 , boolean 
\i flag
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Determines whether titles will be displayed.  When 
\i flag
\i0  is YES, the titles will be displayed.  When 
\i flag
\i0  is NO, the titles will not be displayed.  The titles must be displayed to let the user resize and drag slots.  See 
\b Slot Sizing
\b0  in the introduction for more details.  Returns YES if the titles were changed, NO otherwise.  For example, if this function is called to turn on the column titles, but the column titles are already on, the function will do nothing and return NO.  The function will only return YES if the titles were actually turned on or off by the call.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:setSlotTitlesSize:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b setSlotTitlesSize:
\b0 (float)
\i size
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setSlotTitlesSize
\b0 (int 
\i border
\i0 , float 
\i size
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 For column titles, sets their height.  For row titles, sets their width.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:setUniformSizeSlots:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b setUniformSizeSlots:
\b0 (float)
\i uniform_size
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setUniformSizeSlots
\b0 (int 
\i border
\i0 , float 
\i uniform_size
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Sets or clears the 
\i uniform-size
\i0  for a border.  If 
\i uniform_size
\i0  is zero, then each slot on that border will be able to have individually varying sizes.  If 
\i uniform_size
\i0  is non-zero, then every slot on that border will have the size, 
\i uniform_size
\i0 .  See 
\b Slot Sizing
\b0  in the introduction for more details.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:slotAdjustedSize:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (float)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b slotAdjustedSize:
\b0 (int)
\i slot
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 float 
\b slotAdjustedSize
\b0 (int 
\i border
\i0 , int 
\i slot
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the current display size of 
\i slot
\i0 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:slotAtPosition:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (int)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b slotAtPosition:
\b0 (int)
\i pos
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 int 
\b slotAtPosition
\b0 (int 
\i border
\i0 , int 
\i pos
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the original physical position of the slot in visual position 
\i pos
\i0 .  This is the visual-to-physical conversion routine.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -border:moveSlot:toSlot:, -border:slotPosition:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:slotCellPrototype:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (id)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b slotCellPrototype:
\b0 (int)
\i slot
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 NSCell 
\b slotCellPrototype
\b0 (int 
\i border
\i0 , int 
\i slot
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the cell prototype for 
\i slot
\i0 .\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -border:setSlot:cellPrototype:, -border:setSlot:cellType:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:slotCellType:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (MiscTableCellStyle)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b slotCellType:
\b0 (int)
\i slot
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 int 
\b slotCellType
\b0 (int 
\i border
\i0 , int 
\i slot
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the cell type for 
\i slot
\i0 .\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -border:setSlot:cellPrototype:, -border:setSlot:cellType:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:slotDragged:toSlot:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b slotDragged:
\b0 (int)
\i from_pos
\i0  
\b toSlot:
\b0 (int)
\i to_pos
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 protected void 
\b slotDraggedToSlot
\b0 (int 
\i border
\i0 , int 
\i from_pos
\i0 , int 
\i to_pos
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Internal method, invoked whenever the user drags a slot to a new position.  Posts 
\f4\fs24 MiscTableScrollSlotDraggedNotification
\f3\fs28  to the default notification center.  Can be useful in subclasses to recognize a user-initiated slot drag event.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:slotIsAutosize:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b slotIsAutosize:
\b0 (int)
\i slot
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b slotIsAutosize
\b0 (int 
\i border
\i0 , int 
\i slot
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the state of the autosize flag for 
\i slot
\i0 . See 
\b Slot Sizing
\b0  in the introduction for more details.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:slotIsSelected:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b slotIsSelected:
\b0 (MiscCoord_P)
\i slot
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b slotIsSelected
\b0 (int 
\i border
\i0 , int 
\i slot
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns YES if 
\i slot
\i0  is selected, else NO.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:slotIsSizeable:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b slotIsSizeable:
\b0 (int)
\i slot
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b slotIsSizeable
\b0 (int 
\i border
\i0 , int 
\i slot
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the state of the user-sizeable flag for 
\i slot
\i0 . See 
\b Slot Sizing
\b0  in the introduction for more details.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:slotIsSorted:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b slotIsSorted:
\b0 (int)
\i slot
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b slotIsSorted
\b0 (int 
\i border
\i0 , int 
\i slot
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 This method compares 
\i slot
\i0  with its neighbors.  It returns YES if these slots are sorted relative to each other.  It returns NO if any of these slots are out of order with respect to the others.  This method can be useful for determining whether or not the table must be resorted when you are changing values in the table.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also: 
\f3\fs28  -border:sortSlot:, -slotsAreSorted:\

\pard\tx7140\f0\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:slotIsVisible:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b slotIsVisible:
\b0 (int)
\i slot
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b slotIsVisible
\b0 (int 
\i border
\i0 , int 
\i slot
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns YES if any part of 
\i slot
\i0  is visible in the scrolling display.  Returns NO otherwise.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:slotMaxSize:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (float)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b slotMaxSize:
\b0 (int)
\i slot
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 float 
\b slotMaxSize
\b0 (int 
\i border
\i0 , int 
\i slot
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the maximum size for 
\i slot
\i0 . See 
\b Slot Sizing
\b0  in the introduction for more details.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:slotMinSize:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (float)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b slotMinSize:
\b0 (int)
\i slot
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 float 
\b slotMinSize
\b0 (int 
\i border, 
\i0 int 
\i slot
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the minimum size for 
\i slot
\i0 . See 
\b Slot Sizing
\b0  in the introduction for more details.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:slotPosition:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (int)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b slotPosition:
\b0 (int)
\i slot
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 int 
\b slotPosition
\b0 (int 
\i border
\i0 , int 
\i slot
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the current 
\i visual
\i0  position of the slot whose original 
\i physical
\i0  position was 
\i slot
\i0 .  This is the physical-to-visual conversion routine.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -border:moveSlot:toSlot:, -border:slotAtPosition:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:slotRepresentedObject:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (id)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b slotRepresentedObject:
\b0 (int)
\i slot
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 Object 
\b slotRepresentedObject
\b0 (int 
\i border
\i0 , int 
\i slot
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the represented object associated with 
\i slot
\i0 , or nil if no object has been associated with 
\i slot
\i0 .  See 
\b Represented Objects
\b0  in the introduction for more details.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -border:slotTag:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:slotResized:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b slotResized:
\b0 (int)
\i slot
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 protected void 
\b slotResized
\b0 (int 
\i border
\i0 , int 
\i slot
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Internal method called whenever the user resizes a slot.  Posts 
\f4\fs24 MiscTableScrollSlotResizedNotification
\f3\fs28  to the default notification center.  Can be useful in subclasses to recognize user-initiated slot resizing.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:slotSize:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (float)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b slotSize:
\b0 (int)
\i slot
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 float 
\b slotSize
\b0 (int 
\i border
\i0 , int 
\i slot)
\i0\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the target size for 
\i slot
\i0 . See 
\b Slot Sizing
\b0  in the introduction for more details.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:slotSortDirection:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (MiscSortDirection)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b slotSortDirection:
\b0 (int)
\i slot
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 int 
\b slotSortDirection
\b0 (int 
\i border
\i0 , int 
\i slot
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the sort direction (ascending or descending) for 
\i slot
\i0 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:slotSortFunction
\f3\b0 :
\f0\b \

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (MiscCompareEntryFunc)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b slotSortFunction
\b0 :(int)
\i slot
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the custom sort function for slot 
\i slot
\i0 , if any, otherwise it returns 0.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:slotSortReversed:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b slotSortReversed:
\b0 (int)
\i slot
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 protected void 
\b slotSortReversed
\b0 (int 
\i border
\i0 , int 
\i slot
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Internal method, invoked whenever the user reverses the sort direction of a slot.  Posts 
\f4\fs24 MiscTableScrollSlotSortReversedNotification
\f3\fs28  to the default notification center.  Can be useful in subclasses to recognize a user-initiated sort reverse event.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:slotSortType:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (MiscSortType)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b slotSortType:
\b0 (int)
\i slot
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 int 
\b slotSortType
\b0 (int 
\i border
\i0 , int 
\i slot
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the sort type of 
\i slot
\i0 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:slotTag:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (int)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b slotTag:
\b0 (int)
\i slot
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 int 
\b slotTag
\b0 (int 
\i border
\i0 , int 
\i slot
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the tag value associated with 
\i slot
\i0 .\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -border:slotRepresentedObject:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:slotTitle:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (NSString*)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b slotTitle:
\b0 (int)
\i slot
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 String 
\b slotTitle
\b0 (int 
\i border
\i0 , int 
\i slot
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the title for 
\i slot
\i0 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:slotWithRepresentedObject:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (int)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b slotWithRepresentedObject:
\b0 (id)
\i object
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 int 
\b slotWithRepresentedObject
\b0 (int 
\i border
\i0 , Object 
\i object
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the index of the first slot whose represented object is 
\i object
\i0 , or -1 if no match was found.  Equality between 
\i object
\i0  and each slot's represented object is tested with 
\f4\fs24 -isEqual:
\f3\fs28 .  See 
\b Represented Objects
\b0  in the introduction for more details.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -border:slotWithTag:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:slotWithTag:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (int)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b slotWithTag:
\b0 (int)
\i tag
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 int 
\b slotWithTag
\b0 (int 
\i border
\i0 , int 
\i tag
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the index of the first slot whose tag is 
\i tag
\i0 , or -1 if no match was found.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -border:slotWithRepresentedObject:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:sortSlot:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b sortSlot:
\b0 (int)
\i slot
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b sortSlot
\b0 (int 
\i border
\i0 , int 
\i slot
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Re-sorts a single slot.  This method can be used to restore the sort order after a single slot has been added or changed in such a way that it might not be in the correct sort position.  The results are unpredictable if the other slots are not already sorted.  Returns YES if the slot sorted to a new visual location, otherwise returns NO.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -sortSlots:, -sortColumn:, -sortRow:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 border:visualToPhysical:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (NSArray*)
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b visualToPhysical:
\b0 (NSArray*)
\i list
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 NSArray 
\b visualToPhysical
\b0 (int 
\i border
\i0 , NSArray 
\i list
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 This method accepts an array in which each element is a 
\i visual
\i0  (current) slot index, and returns an array containing the corresponding 
\i physical
\i0  (original) slot indexes.  This is accomplished via a succession of calls to 
\f4\fs24 -border:slotAtPosition:
\f3\fs28 .  Each element in 
\i list
\i0  is an NSNumber in Objective-C, and a java.lang.Integer in Java.  \

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -border:slotAtPosition:, -border:slotPosition:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 bufferCount\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (int)
\b bufferCount
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 int 
\b bufferCount
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 This method is only meaningful for lazy tables.  If the 
\i delegate
\i0  or 
\i dataDelegate
\i0  provide multiple buffers for responding to 
\f4\fs24 -tableScroll:cellAtRow:column:
\f3\fs28 , they are encouraged to respond to 
\f4\fs24 -tableScrollBufferCount:
\f3\fs28  with the number of buffers that they provide.  If the 
\i delegate
\i0  and 
\i dataDelegate
\i0  do not respond, a default value of one (1) is returned, which indicates that all values from a call to 
\f4\fs24 -cellAtRow:column:
\f3\fs28  must be copied before making a second call to 
\f4\fs24 -cellAtRow:column:
\f3\fs28 .  This method is called internally during 
\f4\fs24 -sortInfoInit:border:
\f3\fs28  to determine whether copying must be performed during sorting.  \

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -cellAtRow:column:, -isLazy, -setLazy:, -tableScrollBufferCount: 
\b0 (delegate method)
\b , -tableScroll:cellAtRow:column: 
\b0 (delegate method)
\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 builtinCanWritePboardType:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b builtinCanWritePboardType:
\b0 (NSString*)
\i type
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b builtinCanWritePboardType
\b0 (String 
\i type
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 The built-in method for determining which data types can be placed on the pasteboard.  This method returns YES for 
\f4\fs24 NSStringPboardType
\f3\fs28  and 
\f4\fs24 NSTabularTextPboardType
\f3\fs28 .  Override this method in your subclass if you will provide additional pasteboard datatypes.  This method is called from 
\f4\fs24 -canWritePboardType:
\f3\fs28 .\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -canWritePboardType:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 builtinReadSelectionFromPasteboard:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b builtinReadSelectionFromPasteboard:
\b0 (NSPasteboard*)
\i pboard
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b builtinReadSelectionFromPasteboard
\b0 (NSPasteboard 
\i pboard
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 This method merely returns NO.  The current implementation of MiscTableScroll never reads anything from the pasteboard.  Override this method in your subclass if you want to read data from the pasteboard.  This method is called from 
\f4\fs24 -readSelectionFromPasteboard:
\f3\fs28 .\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -readSelectionFromPasteboard:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 builtinRegisterServicesTypes\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b builtinRegisterServicesTypes
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b builtinRegisterServicesTypes
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 This method sends 
\f4\fs24 -registerServicesMenuSendTypes:returnTypes:
\f3\fs28  to NSApp.  It registers 
\f4\fs24 NSTabularTextPboardType
\f3\fs28  and 
\f4\fs24 NSStringPboardType
\f3\fs28  send types, and no return types.  Override this method in your subclass if you want to send or return different data types.  Called from 
\f4\fs24 -registerServicesTypes
\f3\fs28 .\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -registerServicesTypes, -registerServicesMenuSendTypes:returnTypes: 
\b0 (NSApplication)
\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 builtinValidRequestorForSendType:returnType:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (id)
\b builtinValidRequestorForSendType:
\b0 (NSString*)
\i sendType
\i0  
\b returnType:
\b0 (NSString*)
\i returnType
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 Object 
\b builtinValidRequestorForTypes
\b0 (String 
\i sendType
\i0 , String 
\i returnType
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 This method returns 
\b self
\b0  if 
\i sendType
\i0  is either 
\f4\fs24 NSTabularTextPboardType
\f3\fs28  or 
\f4\fs24 NSStringPboardType
\f3\fs28 , and 
\i returnType
\i0  is nil, and there is a selection, otherwise it returns the value from a call to 
\f4\fs24 [super validRequestorForSendType:
\f3\i\fs28 sendType
\f4\fs24  
\i0 returnType:
\f3\i\fs28 returnType
\f4\i0\fs24 ]
\f3\fs28 .  Override this method if your subclass can handle different combinations.  Called from 
\f4\fs24 -validRequestorForSendType:returnType:
\f3\fs28 .\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -validRequestorForSendType:returnType:\

\pard\tx7140\f0\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 builtinStringForPboardType:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (NSString*)
\b builtinStringForPboardType:
\b0 (NSString*)
\i type
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 String 
\b builtinStringForPboardType
\b0 (String 
\i type
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 If 
\i type
\i0  is 
\f4\fs24 NSStringPboardType
\f3\fs28 , then 
\f4\fs24 -stringForNSStringPboardType
\f3\fs28  is called, else if 
\i type
\i0  is 
\f4\fs24 NSTabularTextPboardType
\f3\fs28 , then 
\f4\fs24 -stringForNSTabularTextPboardType
\f3\fs28  is called.  Otherwise it does nothing.  Override this method in your subclass if you can write additional datatypes to the pasteboard.  Called from 
\f4\fs24 -writeSelectionToPasteboard:types:
\f3\fs28 .\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -writeSelectionToPasteboard:types:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 builtinWriteSelectionToPasteboard:types:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b builtinWriteSelectionToPasteboard:
\b0 (NSPasteboard*)
\i pboard
\i0  
\b types:
\b0 (NSArray*)
\i types
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b builtinWriteSelectionToPasteboardOfType
\b0 (NSPasteboard 
\i pboard
\i0 , NSArray 
\i types
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Writes all of the types that can be written to the pasteboard.  Each entry in 
\i types
\i0  is tested with 
\f4\fs24 -canWritePboardType:
\f3\fs28 .  If the result is YES, and there is a selection, it is passed on to 
\f4\fs24 -writeSelectionToPasteboard:types:
\f3\fs28 .  The data is written immediately, the MiscTableScroll object does not register a pasteboard owner.  Override this method in your subclass if you need different behavior.  Called from 
\f4\fs24 -writeSelectionToPasteboard:types:
\f3\fs28 .\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -canWritePboardType:, -writeSelectionToPasteboard:types:, -writeSelectionToPasteboard:types:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 canEdit:atRow:column:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b canEdit:
\b0 (NSEvent*)
\i event 
\b\i0 atRow:
\b0 (MiscCoord_P)
\i row 
\b\i0 column:
\b0 (MiscCoord_P)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b canEditAtLocation
\b0 (NSEvent 
\i event
\i0 , int 
\i row
\i0 , int 
\i col
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Determines whether or not the cell at 
\i row
\i0 , 
\i col
\i0  can be edited.  Attempts to send 
\f4\fs24 -tableScroll:canEdit:atRow:column:
\f3\fs28  to the 
\i delegate
\i0 , the 
\i dataDelegate
\i0 , or the cell at 
\i row
\i0 , 
\i col
\i0 , in that order.  The result is taken from the first of these three to respond to 
\f4\fs24 -tableScroll:canEdit:atRow:column:
\f3\fs28  and is returned to the caller of 
\f4\fs24 -canEdit:atRow:column:
\f3\fs28 .  If none of the three respond, then MiscTableScroll applies its own criteria to determine if editing is allowed.  If the cell is not both enabled and editable then NO is returned.  If 
\i event
\i0  is nil or represents a double-click by the mouse then YES is returned, otherwise NO.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 It is valid to specify nil for 
\i event
\i0  when editing needs to be invoked for a non-mouse-down event.  (For instance, 
\f4\fs24 -getNext:editRow:column:
\f3\fs28  operates in this fashion.)  If 
\i event
\i0  is not nil then it should point at a mouse-down event.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -isEditable 
\b0 (NSCell), 
\b -isEnabled 
\b0 (NSCell)
\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 canWritePboardType:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b canWritePboardType:
\b0 (NSString*)
\i type
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b canWritePboardType
\b0 (String 
\i type
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Responds to queries from 
\f4\fs24 -builtinWriteSelectionToPasteboard:types:
\f3\fs28 .  First it gives the 
\i delegate
\i0  an opportunity to answer via 
\f4\fs24 -tableScroll:canWritePboardType:
\f3\fs28 .  If the 
\i delegate
\i0  does not respond to that message, it gives the 
\i dataDelegate
\i0  an opportunity to answer the same message.  If neither object responds, the built-in implementation, 
\f4\fs24 -builtinCanWritePboardType:
\f3\fs28  is called.  Called from 
\f4\fs24 -builtinWriteSelectionToPasteboard:types:
\f3\fs28 .\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -builtinCanWritePboardType:, -builtinWriteSelectionToPasteboard:types:, -tableScroll:canWritePboardType: 
\b0 (delegate method)
\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 cellAtRow:column:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (id)
\b cellAtRow:
\b0 (int)
\i row
\i0  
\b column:
\b0 (int)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 NSCell 
\b cellAtLocation
\b0 (int 
\i row
\i0 , int 
\i col)
\i0\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns a pointer to the cell located at 
\i row
\i0 ,
\i col
\i0 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 cellFrameAtRow:column:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (NSRect)
\b cellFrameAtRow:
\b0 (int)
\i row
\i0  
\b column:
\b0 (int)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 NSRect 
\b cellFrameAtLocation
\b0 (int 
\i row
\i0 , int 
\i col
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the frame of the cell at the specified coordinates.  If 
\i row
\i0  or 
\i col
\i0  are out of bounds, then returns the empty rectangle.  < FIXME: Currently the returned rectangle also includes the intercell grid lines which are below and to the right of the cell. >\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 cellIsSelectedAtRow:column:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b cellIsSelectedAtRow:
\b0 (MiscCoord_P)
\i row
\i0  
\b column:
\b0 (MiscCoord_P)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b cellIsSelectedAtLocation
\b0 (int 
\i row
\i0 , int 
\i col
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns YES if the cell at 
\i row
\i0 , 
\i col
\i0  is selected.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 cellWithRepresentedObject:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (id)
\b cellWithRepresentedObject:
\b0 (id)
\i object
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 NSCell 
\b cellWithRepresentedObject
\b0 (Object 
\i object
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the first cell in the body of the table with a represented object equal to 
\i object
\i0 , or nil if no match was found.  Equality between 
\i object
\i0  and each cell's represented object is tested with 
\f4\fs24 -isEqual:
\f3\fs28 .  See 
\b Represented Objects
\b0  in the introduction for more details.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 - cellWithTag:\

\pard\tx7140\f0\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 cellWithTag:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (id)
\b cellWithTag:
\b0 (int)
\i tag
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 NSCell 
\b cellWithTag
\b0 (int 
\i tag
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the first cell in the body of the table with 
\i tag
\i0 , otherwise nil.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 - cellWithRepresentedObject:\

\pard\tx7140\f0\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 changeFont:\

\pard\tx7140\fs6\fi-380\li2480\fc0\cf0 \

\pard\f1\b0\fs28\fi-620\li2520\fc0\cf0 -
\f3  (void)
\b changeFont:
\b0 (id)
\i sender
\i0\fs24   [Objective-C]
\i\fs28 \

\pard\tx2480\tx2860\tx3240\i0\fi-620\li2520\fc0\cf0 void 
\b changeFont
\b0 (Object 
\i sender
\i0 )
\fs24   [Java]
\i\fs28 \

\i0\fs14\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Changes the font of the MiscTableScroll object as well all cells which inherit it.  The NSFontManager sends the 
\f4\fs24 -changeFont:
\f3\fs28  message whenever the user changes the font using either the NSFontPanel or the Font menu.  This method changes the font by sending 
\f4\fs24 -convertFont:
\f3\fs28  to the 
\i sender
\i0 , which is presumed to be an NSFontManager or similarly capable object, and then passes the returned font to 
\f4\fs24 -setFont:
\f3\fs28 .  This method posts 
\f4\fs24 MiscTableScrollChangeFontNotification
\f3\fs28  to the default notification center after 
\f4\fs24 -setFont:
\f3\fs28  posts 
\f4\fs24 MiscTableScrollFontChangedNotification
\f3\fs28 .\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 - setFont:, ± tableScrollChangeFont: 
\b0 (delegate method)
\b , ± tableScrollFontChanged: 
\b0 (delegate method)
\b \

\pard\tx7140\f0\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 clearColumnSelection\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b clearColumnSelection
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b clearColumnSelection
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -clearSlotSelection:MISC_COL_BORDER
\f3\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 clearCursor\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b clearCursor
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b clearCursor
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Calls 
\f4\fs24 [self clearCursorColumn]
\f3\fs28  and 
\f4\fs24 [self clearCursorRow]
\f3\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 clearCursorColumn\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b clearCursorColumn
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b clearCursorColumn
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Sets the column border's keyboard cursor slot to -1, effectively hiding it until it is next set to a valid position.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 clearCursorRow\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b clearCursorRow
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b clearCursorRow
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Sets the row border's keyboard cursor slot to -1, effectively hiding it until it is next set to a valid position.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 clearCursorSlot:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b clearCursorSlot:
\b0 (MiscBorderType)
\i border
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b clearCursorSlot
\b0 (int 
\i border
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Sets the border's keyboard cursor slot to -1, effectively hiding it until it is next set to a valid position.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 clearRowSelection\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b clearRowSelection
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b clearRowSelection
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -clearSlotSelection:MISC_ROW_BORDER
\f3\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 clearSelection\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b clearSelection
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b clearSelection
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Calls 
\f4\fs24 [self clearRowSelection]
\f3\fs28  and 
\f4\fs24 [self clearColumnSelection]
\f3\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 clearSlotSelection:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b clearSlotSelection:
\b0 (MiscBorderType)
\i border
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b clearSlotSelection
\b0 (int 
\i border
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Deselects all slots that were selected in 
\i border
\i0 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 clickedCell\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (id)
\b clickedCell
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 NSCell 
\b clickedCell
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 During mouse-tracking, returns the cell underneath the mouse, otherwise returns the cell which was under the mouse when tracking ended.  This method only really makes sense for eager-mode MiscTableScroll objects since a unique cell inhabits each row & column position, whereas in lazy-mode only one cell typically exists per column.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 ± clickedSlot:, ± clickedColumn, ± clickedRow, ± isTrackingMouse
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 clickedColumn\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (MiscCoord_P)
\b clickedColumn
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 int 
\b clickedColumn
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 During mouse-tracking, returns the column underneath the mouse, otherwise returns the column which was under the mouse when tracking ended.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 ± clickedSlot:, ± clickedCell, ± clickedRow, ± isTrackingMouse
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 clickedRow\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (MiscCoord_P)
\b clickedRow
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 int 
\b clickedRow
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 During mouse-tracking, returns the row underneath the mouse, otherwise returns the row which was under the mouse when tracking ended.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 ± clickedSlot:, ± clickedCell, ± clickedColumn, ± isTrackingMouse
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 clickedSlot:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (MiscCoord_P)
\b clickedSlot:
\b0 (MiscBorderType)
\i border
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 int 
\b clickedSlot
\b0 (int 
\i border
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 During mouse-tracking, returns the slot underneath the mouse, otherwise returns the slot which was under the mouse when tracking ended.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 ± clickedCell, ± clickedColumn, ± clickedRow, ± isTrackingMouse
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 color\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (NSColor*)
\b color
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 NSColor 
\b color
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -backgroundColor
\f3\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 columnAdjustedSize:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (float)
\b columnAdjustedSize:
\b0 (int)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 float 
\b columnAdjustedSize
\b0 (int 
\i col
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the current display width of 
\i col
\i0 .  Equivalent to: 
\f4\fs24 -border:MISC_COL_BORDER slotAdjustedSize:
\i col
\f3\i0\fs28 .\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -border:slotAdjustedSize:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 columnAtPosition:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (int)
\b columnAtPosition:
\b0 (int)
\i pos
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 int 
\b columnAtPosition
\b0 (int 
\i pos
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the original 
\i physical
\i0  position of the column at the current 
\i visual
\i0  position 
\i pos
\i0 .  This is the visual-to-physical conversion routine.  Equivalent to: 
\f4\fs24 -border:MISC_COL_BORDER slotAtPosition:
\i pos
\f3\i0\fs28 .\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -border:slotAtPosition:, -border:slotPosition:, -columnPosition:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 columnCellPrototype:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (id)
\b columnCellPrototype:
\b0 (int)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 NSCell 
\b columnCellPrototype
\b0 (int 
\i col
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the cell prototype for column 
\i col
\i0 .  Equivalent to: 
\f4\fs24 -border:MISC_COL_BORDER slotCellPrototype:
\i col
\f3\i0\fs28 .\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -border:setSlot:cellPrototype:, -border:slotCellPrototype:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 columnCellType:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (MiscTableCellStyle)
\b columnCellType:
\b0 (int)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 int 
\b columnCellType
\b0 (int 
\i col
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the cell type for column 
\i col
\i0 .  Equivalent to: 
\f4\fs24 -border:MISC_COL_BORDER slotCellType:
\i col
\f3\i0\fs28 .\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -border:setSlot:cellType:, -border:slotCellType:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 columnIsAutosize:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b columnIsAutosize:
\b0 (int)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b columnIsAutosize
\b0 (int 
\i col
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the state of the 
\i autosize
\i0  flag for column 
\i col
\i0 .  Equivalent to: 
\f4\fs24 -border:MISC_COL_BORDER slotIsAutosize:
\i col
\f3\i0\fs28 .\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -border:setSlot:autosize:, -border:slotIsAutosize:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 columnIsSelected:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b columnIsSelected:
\b0 (MiscCoord_P)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b columnIsSelected
\b0 (int 
\i col
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns YES if column 
\i col
\i0  is selected, else NO.  Equivalent to 
\f4\fs24 -border:MISC_COL_BORDER slotIsSelected:
\i col.
\f3\i0\fs28 \

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 columnIsSizeable:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b columnIsSizeable:
\b0 (int)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b columnIsSizeable
\b0 (int 
\i col
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the state of the 
\i user-sizeable
\i0  flag for column 
\i col
\i0 .  Equivalent to: 
\f4\fs24 -border:MISC_COL_BORDER slotIsSizeable:
\i col
\f3\i0\fs28 .\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -border:setSlot:sizeable:, -border:slotIsSizeable:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 columnIsSorted:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b columnIsSorted:
\b0 (int)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b columnIsSorted
\b0 (int 
\i col
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns YES if 
\i col
\i0  is sorted relative to its neighboring columns.  Returns NO otherwise.  Equivalent to 
\f4\fs24 -border:MISC_COL_BORDER slotIsSorted:
\i col
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 columnIsVisible:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b columnIsVisible:
\b0 (int)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b columnIsVisible
\b0 (int 
\i col)
\i0\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns YES if any part of 
\i col
\i0  is visible in the scrolling display.  Returns NO otherwise.  Equivalent to 
\f4\fs24 -border:MISC_COL_BORDER slotIsVisible:
\i col
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 columnMaxSize:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (float)
\b columnMaxSize:
\b0 (int)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 float 
\b columnMaxSize
\b0 (int 
\i col
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the maximum size for column 
\i col
\i0 .  Equivalent to: 
\f4\fs24 -border:MISC_COL_BORDER slotMaxSize:
\i col
\f3\i0\fs28 .\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -border:setSlot:maxSize:, -border:slotMaxSize:\

\pard\tx7140\f0\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 columnMinSize:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (float)
\b columnMinSize:
\b0 (int)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 float 
\b columnMinSize
\b0 (int 
\i col
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the minimum size for column 
\i col
\i0 .  Equivalent to: 
\f4\fs24 -border:MISC_COL_BORDER slotMinSize:
\i col
\f3\i0\fs28 .\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -border:setSlot:minSize:, -border:slotMinSize:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 columnOrder\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (NSArray*)
\b columnOrder
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 NSArray 
\b columnOrder
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to 
\f4\fs24 -slotOrder:MISC_COL_BORDER
\f3\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 columnOrderAsString\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (NSString*)
\b columnOrderAsString
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 String 
\b columnOrderAsString
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to
\f4\fs24  slotOrderAsString:MISC_COL_BORDER
\f3\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 columnPosition:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (int)
\b columnPosition:
\b0 (int)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 int 
\b columnPosition
\b0 (int 
\i col
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the current 
\i visual
\i0  position of the column whose original 
\i physical
\i0  position is 
\i pos
\i0 .  This is the physical-to-visual conversion routine.  Equivalent to: 
\f4\fs24 -border:MISC_COL_BORDER slotPosition:
\i pos
\f3\i0\fs28 .\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -border:moveSlot:toSlot:, -border:slotAtPosition:, -border:slotPosition:, -columnAtPosition:,  -moveColumn:toColumn:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 columnRepresentedObject:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (id)
\b columnRepresentedObject:
\b0 (int)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 Object 
\b columnRepresentedObject
\b0 (int 
\i col
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the represented object for column 
\i col
\i0 .  See 
\b Represented Objects
\b0  in the introduction for more details.  Equivalent to: 
\f4\fs24 -border:MISC_COL_BORDER slotRepresentedObject:
\i col
\f3\i0\fs28 .\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -columnTag:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 columnsAreSorted\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b columnsAreSorted
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b columnsAreSorted
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns YES if all columns are sorted.  Equivalent to 
\f4\fs24 -slotsAreSorted:MISC_COL_BORDER
\f3\fs28 .\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -columnIsSorted:, -slotsAreSorted:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 columnSize:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (float)
\b columnSize:
\b0 (int)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 float 
\b columnSize
\b0 (int 
\i col
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the target size for column 
\i col
\i0 .  Equivalent to: 
\f4\fs24 -border:MISC_COL_BORDER slotSize:
\i col
\f3\i0\fs28 .\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -border:setSlot:size:, -border:slotSize:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 columnSizes\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (NSArray*)
\b columnSizes
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 NSArray 
\b columnSizes
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 slotSizes:MISC_COL_BORDER.
\f3\fs28 \

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 columnSizesAsString\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (NSString*)
\b columnSizesAsString
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 String 
\b columnSizesAsString
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to 
\f4\fs24 -slotSizesAsString:MISC_COL_BORDER
\f3\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 columnSortDirection:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (MiscSortDirection)
\b columnSortDirection:
\b0 (int)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 int 
\b columnSortDirection
\b0 (int 
\i col
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the sort direction (ascending or descending) of 
\i col
\i0 .  Equivalent to: 
\f4\fs24 -border:MISC_COL_BORDER slotSortDirection:
\i col
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 columnSortFunction:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (MiscCompareEntryFunc)
\b columnSortFunction
\b0 :(int)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -border:MISC_COL_BORDER slotSortFunction:
\i col
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 columnSortType:
\f3\b0\fs24  
\f0\b\fs28 \

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (MiscSortType)
\b columnSortType:
\b0 (int)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 int 
\b columnSortType
\b0 (int 
\i col
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to 
\f4\fs24 -border:MISC_COL_BORDER slotSortType:
\f3\i\fs28 col
\i0 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 columnSortVector\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (NSArray*)
\b columnSortVector
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 NSArray 
\b columnSortVector
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -slotSortVector:MISC_COL_BORDER.
\f3\fs28 \

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 columnTag:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (int)
\b columnTag:
\b0 (int)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 int 
\b columnTag
\b0 (int 
\i col
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the tag for column 
\i col
\i0 .  Equivalent to: 
\f4\fs24 -border:MISC_COL_BORDER slotTag:
\i col
\f3\i0\fs28 .\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -columnRepresentedObject:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 columnTitle:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (NSString*)
\b columnTitle:
\b0 (int)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 String 
\b columnTitle
\b0 (int 
\i col
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the title for column 
\i col
\i0 .  Equivalent to: 
\f4\fs24 -border:MISC_COL_BORDER slotTitle:
\i col
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 columnTitleMode\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (MiscTableTitleMode)
\b columnTitleMode
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 int 
\b columnTitleMode
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the 
\i title-mode
\i0  for column 
\i col
\i0 .  Equivalent to: 
\f4\fs24 -border:MISC_COL_BORDER slotTitleMode:
\i col
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 columnTitlesHeight\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (float)
\b columnTitlesHeight
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 float 
\b columnTitlesHeight
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -slotTitlesSize:MISC_COL_BORDER.
\f3\fs28 \

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 columnTitlesOn\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b columnTitlesOn
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b columnTitlesOn
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Indicates whether or not column titles are displayed.  Equivalent to: 
\f4\fs24 -slotTitlesOn:MISC_COL_BORDER
\f3\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 columnWithRepresentedObject:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (int)
\b columnWithRepresentedObject:
\b0 (id)
\i object
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 int 
\b columnWithRepresentedObject
\b0 (Object 
\i object
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the index of the first column with a represented object equal to 
\i object
\i0 , or -1 if no match was found.  Equality between 
\i object
\i0  and each column's represented object is tested with 
\f4\fs24 -isEqual:
\f3\fs28 .  See 
\b Represented Objects
\b0  in the introduction for more details.  Equivalent to: 
\f4\fs24 -border:MISC_COL_BORDER slotWithRepresentedObject:
\i object
\f3\i0\fs28 .\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -columnWithTag:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 columnWithTag:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (int)
\b columnWithTag:
\b0 (int)
\i tag
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 int 
\b columnWithTag
\b0 (int 
\i tag
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the index of the first column with tag 
\i tag
\i0 , or -1 if no columns have tag 
\i tag
\i0 .  Equivalent to: 
\f4\fs24 -border:MISC_COL_BORDER slotWithTag:
\i tag
\f3\i0\fs28 .\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -columnWithRepresentedObject:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 compareColumns::\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (int)
\b compareColumns:
\b0 (int)
\i col1
\b\i0  :
\b0 (int)
\i col2
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 int 
\b compareColumns
\b0 (int 
\i col1
\i0 , int 
\i col2
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Compares two columns.  Equivalent to 
\f4\fs24 -border:MISC_COL_BORDER compareSlots:
\i col1
\i0 :
\i col2
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 compareColumns::info:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (int)
\b compareColumns:
\b0 (int)
\i col1
\b\i0  :
\b0 (int)
\i col2
\i0  
\b info:
\b0 (MiscSlotSortInfo*
\i )sortInfo
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Compares two columns.  Equivalent to 
\f4\fs24 -border:MISC_COL_BORDER compareSlots:
\i col1
\i0 :
\i col2 
\i0 info:
\i sortInfo
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 compareRows::\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (int)
\b compareRows:
\b0 (int)
\i row1
\b\i0  :
\b0 (int)
\i row2
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 int 
\b compareRows
\b0 (int 
\i row1
\i0 , 
\i row2
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Compares two columns.  Equivalent to 
\f4\fs24 -border:MISC_ROW_BORDER compareSlots:
\i row1
\i0 :
\i row2
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 compareRows::info:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (int)
\b compareRows:
\b0 (int)
\i row1
\b\i0  :
\b0 (int)
\i row2
\i0  
\b info:
\b0 (MiscSlotSortInfo*
\i )sortInfo
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Compares two columns.  Equivalent to 
\f4\fs24 -border:MISC_ROW_BORDER compareSlots:
\i row1
\i0 :
\i row2 
\i0 info:
\i sortInfo
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 compareSlotFunction\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (MiscCompareSlotFunc)
\b compareSlotFunction
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the slot comparison function.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 constrainSize\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b constrainSize
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b constrainSize
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Internal method that checks and applies new slot counts and min total size constraints to update the frames of the components of the MiscTableScroll object.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 copy:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b copy:
\b0 (id)
\i sender
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b copy
\b0 (Object 
\i sender
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Copies the selection to the pasteboard.  Calls 
\f4\fs24 -writeSelectionToPasteboard:types:
\f3\fs28 , with 
\f4\fs24 NSTabularTextPboardType
\f3\fs28  and 
\f4\fs24 NSStringPboardType
\f3\fs28  for types that should be written.  Override this method in your subclass if you want to write different datatypes to the pasteboard.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -writeSelectionToPasteboard:types:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 cornerTitle\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (NSString*)
\b cornerTitle
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 String 
\b cornerTitle
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the title for the corner cell.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 cursorColumn\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (MiscCoord_P)
\b cursorColumn
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 int 
\b cursorColumn
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the column that the column keyboard cursor is on.  Meaningless if tracking is by rows.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 cursorRow\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (MiscCoord_P)
\b cursorRow
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 int 
\b cursorRow
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the row that the row keyboard cursor is on.  Meaningless if tracking is by columns.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 cursorSlot:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (MiscCoord_P)
\b cursorSlot:
\b0 (MiscBorderType)
\i border
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 int 
\b cursorSlot
\b0 (int 
\i border
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the index of the slot that the keyboard cursor is currently on, or -1 if the keyboard cursor is not on any slot.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 cut:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b cut:
\b0 (id)
\i sender
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b cut
\b0 (Object 
\i sender
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Calls 
\f4\fs24 [self copy:
\i sender
\i0 ]
\f3\fs28 .  Nothing is deleted.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 dataDelegate\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (id)
\b dataDelegate
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 Object 
\b dataDelegate
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the data delegate of the MiscTableScroll object.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -setDataDelegate\

\pard\tx7140\f0\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 dealloc\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b dealloc
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Destroys the MiscTableScroll object, reclaiming all resources allocated by it.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 delegate\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (id)
\b delegate
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 Object 
\b delegate
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the delegate of the MiscTableScroll object.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -setDelegate
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 deselectAll:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b deselectAll:
\b0 (id)
\i sender
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b deselectAll
\b0 (Object 
\i sender
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Calls 
\f4\fs24 [self clearSelection]
\f3\fs28  followed by 
\f4\fs24 [self sendActionIfEnabled]
\f3\fs28 . \

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 deselectColumn:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b deselectColumn:
\b0 (MiscCoord_P)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b deselectColumn
\b0 (int 
\i col
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -border:MISC_COL_BORDER deselectSlot:
\i col
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 deselectColumns:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b deselectColumns:
\b0 (NSArray*)
\i cols
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b deselectColumns
\b0 (NSArray 
\i cols
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -border:MISC_COL_BORDER deselectSlots:
\f3\i\fs28 cols
\i0 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 deselectColumnsWithTags:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b deselectColumnsWithTags:
\b0 (NSArray*)
\i tags
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b deselectColumnsWithTags
\b0 (NSArray 
\i tags
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -border:MISC_COL_BORDER deselectSlotsWithTags:
\i tags
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 deselectRow:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b deselectRow:
\b0 (MiscCoord_P)
\i row
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b deselectRow
\b0 (int 
\i row
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -border:MISC_ROW_BORDER deselectSlot:
\i row
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 deselectRows:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b deselectRows:
\b0 (NSArray*)
\i rows
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b deselectRows
\b0 (NSArray 
\i rows
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -border:MISC_ROW_BORDER deselectSlots:
\f3\i\fs28 rows
\i0 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 deselectRowsWithTags:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b deselectRowsWithTags:
\b0 (NSArray*)
\i tags
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b deselectRowsWithTags
\b0 (NSArray 
\i tags
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -border:MISC_ROW_BORDER deselectSlotsWithTags:
\i tags
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 didBecomeFirstResponder\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b didBecomeFirstResponder
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 protected void 
\b didBecomeFirstResponder
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Internal method, invoked by the 
\i documentView
\i0 's 
\f4\fs24\fc1\cf1 -becomeFirstResponder
\f3\fs28\fc0\cf0  method whenever it becomes first responder.  The document view is an instance of the private class MiscTableView.  Sends 
\f4\fs24\fc1\cf1 -setSelectedFont:isMultiple:
\f3\fs28\fc0\cf0  to the shared NSFontManager with the current font setting, and then posts 
\f4\fs24 MiscTableScrollDidBecomeFirstResponderNotification
\f3\fs28  to the default notification center.  Subclasses which need to perform additional processing when the document view becomes first responder may wish to override this method.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 didResignFirstResponder\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b didResignFirstResponder
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 protected void 
\b didResignFirstResponder
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Internal method, invoked by the 
\i documentView
\i0 's 
\f4\fs24\fc1\cf1 -resignFirstResponder
\f3\fs28\fc0\cf0  method whenever it resigns first responder.  The document view is an instance of the private class MiscTableView.  Posts 
\f4\fs24 MiscTableScrollDidResignFirstResponderNotification
\f3\fs28  to the default notification center.  Subclasses which need to perform additional processing when the document view resigns first responder may wish to override this method.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 disableCursor\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b disableCursor
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b disableCursor
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Inhibits display of the keyboard cursor.  Calls to this method nest and should be balanced by calls to 
\f4\fs24 -enableCursor
\f3\fs28 .  The keyboard cursor is a dashed rectangle drawn around a row or column indicating which slot keyboard actions will affect.  See the discussion of 
\b Keyboard Operations
\b0  at the beginning of this document for further information.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 ± isCursorEnabled, ± enableCursor
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 documentClipRect\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (NSRect)
\b documentClipRect
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 NSRect 
\b documentClipRect
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the frame of the NSClipView which contains the document view.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 doGetIncrementalSearchColumn:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b doGetIncrementalSearchColumn:
\b0 (int*)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Built-in method to choose the incremental search column.  Returns YES if incremental search should be enabled and sets *
\i col
\i0  to the physical index of the column that should be searched,  otherwise returns NO.  To enable incremental search via this function, autoSortRows must be YES; the first sorting column must be string-based (stringValue or title); and there cannot be a custom sort function for the column.  This method works appropriately for normal tables, as long as autoSortRows is turned on.  Whenever the user drags a string-based column to the first position, incremental search will be enabled.  Non-sorting (skip) columns are ignored.  You can override this behavior by implementing the 
\f4\fs24 -tableScroll:getIncrementalSearchColumn:
\f3\fs28  method in your delegate.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -incrementalSearch:, -tableScroll:getIncrementalSearchColumn: 
\b0 (delegate method)
\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 doIncrementalSearch:column:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b doIncrementalSearch:
\b0 (NSEvent*)
\i event 
\b\i0 column:
\b0 (int)
\i column
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b doIncrementalSearch
\b0 (NSEvent 
\i event
\i0 , int 
\i column
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Built-in method that performs incremental search.  
\i Event
\i0  must be the key-down event that invoked incremental searching.  
\i Column
\i0  must be the column that will be searched.  The table must be sorted in 
\i column
\i0  order (ascending or descending).  The sort-type for 
\i col
\i0  must be string-based (
\f4\fs24 -stringValue
\f3\fs28  or 
\f4\fs24 -title
\f3\fs28 ).  
\i Column
\i0  cannot have a custom sort function.  You are responsible for ensuring that the table is sorted in 
\i column
\i0  order.  This method runs a modal event loop, processing keystrokes and scrolling the table appropriately.  Returns YES if 
\i column
\i0  was acceptable and 
\i event
\i0  was processed.  Returns NO if 
\i column
\i0  failed any of the tests mentioned.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -incrementalSearch:, -tableScroll:getIncrementalSearchColumn: 
\b0 (delegate method)
\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 doRetireCell:atRow:column:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (id)
\b doRetireCell:
\b0 (id)
\i cell
\i0  
\b atRow:
\b0 (int)
\i row 
\b\i0 column:
\b0 (int)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 NSCell 
\b doRetireCellAtLocation
\b0 (NSCell 
\i cell
\i0 , int 
\i row
\i0 , int 
\i col
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 This built-in implementation tries to recover storage before the cell is idled.  An attempt is made to send the following messages to the cell in this order: 
\f4\fs24 -setTitle:@""
\f3\fs28 , 
\f4\fs24 -setStringValue:@""
\f3\fs28 .  If the cell responds to a message, that message is sent, otherwise the next message is tried.  Override this method in your subclass if you need to do different processing when cells are retired to the cache.  Called from: 
\f4\fs24 -retireCell:atRow:column:
\f3\fs28 .  Returns 
\i cell
\i0 . \

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 doReviveCell:atRow:column:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (id)
\b doReviveCell:
\b0 (id)
\i cell
\i0  
\b atRow:
\b0 (int)
\i row 
\b\i0 column:
\b0 (int)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 NSCell 
\b doReviveCellAtLocation
\b0 (NSCell 
\i cell
\i0 , int 
\i row
\i0 , int 
\i col
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 This method tries to reset the cell so that it will "
\f4\fs24 useOwner
\f3\fs28 ..." values for font, textColor, backgroundColor, selectedTextColor, and  selectedBackgroundColor.  It tries to set the MiscTableScroll object as the 
\i owner
\i0  of the cell.  Then it tries to initialize the font, textColor, backgroundColor, selectedTextColor, and selectedBackgroundColor by first trying the "
\f4\fs24 setOwner
\f3\fs28 ..." value method, and then trying the straight "
\f4\fs24 set
\f3\fs28 ..." method if the cell does not respond to the "
\f4\fs24 setOwner
\f3\fs28 ..." version.  Override this method in your subclass if you need different behavior when a cell is brought into active service.  Called from 
\f4\fs24 -reviveCell:atRow:column:
\f3\fs28 .  Returns 
\i cell
\i0 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 doubleAction\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (SEL)
\b doubleAction
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 NSSelector 
\b doubleAction
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the selector message that is sent to the 
\i doubleTarget
\i0  on a double-click event.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 doubleTarget\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (id)
\b doubleTarget
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 Object 
\b doubleTarget
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns a pointer to the object which will receive the 
\i doubleAction
\i0  message on a double-click event.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 doubleValueAtRow:column:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (double)
\b doubleValueAtRow:
\b0 (int)
\i row
\b\i0  column:
\b0 (int)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 double 
\b doubleValueAtLocation
\b0 (int 
\i row
\i0 , int 
\i col
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the value of sending a 
\f4\fs24 -doubleValue
\f3\fs28  message to the cell at 
\i row
\i0 , 
\i col
\i0 .  If the table is lazy, the 
\i delegate
\i0 , and then the 
\i dataDelegate
\i0  are given the opportunity to reply to the 
\f4\fs24 -tableScroll:doubleValueAtRow:column:
\f3\fs28  message.  This gives lazy tables an opportunity to return this information directly, without the overhead of preparing and formatting a cell.  If the table is not lazy, or the 
\i delegate
\i0  and 
\i dataDelegate
\i0  do not respond to the 
\f4\fs24 -tableScroll:doubleValueAtRow:column:
\f3\fs28  message, then the cell is retrieved via 
\f4\fs24 -cellAtRow:column:
\f3\fs28 .  If the cell responds to the 
\f4\fs24 -doubleValue
\f3\fs28  message, that value is returned; otherwise, zero is returned.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -cellAtRow:column:, -isLazy, -setLazy:, -tableScroll:doubleValueAtRow:column: 
\b0 (delegate method)
\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 draggableColumns\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b draggableColumns
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b draggableColumns
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Indicates whether or not the user will be allowed to drag (rearrange) the columns.  Equivalent to: 
\f4\fs24 -draggableSlots:MISC_COL_BORDER
\f3\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 draggableRows\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b draggableRows
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b draggableRows
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Indicates whether or not the user will be allowed to drag (rearrange) the rows.  Equivalent to: 
\f4\fs24 -draggableSlots:MISC_ROW_BORDER
\f3\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 draggableSlots:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b draggableSlots:
\b0 (MiscBorderType)
\i border
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx3600\tx3980\tx4340\fi-620\li2520\fc0\cf0 boolean 
\b draggableSlots
\b0 (int 
\i border
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li1500 \

\fs28 Indicates whether or not the user will be allowed to drag (rearrange) the slots on this border.  To enable the user to drag slots, the slots must be draggable, and the titles must be displayed.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 drawCellAtRow:column:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3  (void)
\b drawCellAtRow:
\b0 (int)
\i row
\i0  
\b column:
\b0 (int)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b drawCellAtLocation
\b0 (int 
\i row
\i0 , int 
\i col
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Instructs the MiscTableScroll object to redraw the cell at position 
\i row
\i0 , 
\i col
\i0 .  This should be called whenever the contents of a single cell are changed and the screen should be updated to reflect the new state.  This method will lock focus on the view if needed.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  -border:drawSlot:, 
\f3\fs28 -display 
\b0 (View)
\b , -drawColumn:, -drawRow:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 drawsClippedText\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b drawsClippedText
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b drawsClippedText
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns YES if the MiscTableScroll object will use clipping rectangles and draw partially visible text.  Returns NO if the MiscTableScroll object will simply not draw partially visible text that would require clipping rectangles.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 drawColumn:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b drawColumn:
\b0 (int)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b drawColumn
\b0 (int 
\i col
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Instructs the MiscTableScroll object to redraw all the cells in column 
\i col
\i0 .  This method will lock focus on the view if needed.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -drawCellAtRow:column:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 drawColumnTitle:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b drawColumnTitle:
\b0 (int)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b drawColumnTitle
\b0 (int 
\i col
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Draws the title for column 
\i col
\i0 .  This method will lock focus on the view if needed.  You should never need to call this method in normal use, though it might be useful for subclasses.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\

\pard\tx8260\li1500\fc0\cf0 \

\fs28 drawRow:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3  (void)
\b drawRow:
\b0 (int)
\i row
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b drawRow
\b0 (int 
\i row
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Instructs the MiscTableScroll object to redraw all the cells in row 
\i row
\i0 .  This method will lock focus on the view if needed.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -drawCellAtRow:column:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 drawRowTitle:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b drawRowTitle:
\b0 (int)
\i row
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b drawRowTitle
\b0 (int 
\i row
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Draws the title for row 
\i row
\i0 .  This method will lock focus on the view if needed.  You should never need to call this method in normal use, though it might be useful for subclasses.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 edit:atRow:column:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b edit:
\b0 (NSEvent*)
\i event 
\b\i0 atRow:
\b0 (int)
\i row
\b\i0  column:
\b0 (int)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b editAtLocation
\b0 (NSEvent 
\i event
\i0 , int 
\i row
\i0 , int 
\i col
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Posts 
\f4\fs24 MiscTableScrollWillEditNotification
\f3\fs28  to the default notificiation center and then initiates editing at 
\i row, col
\i0 .  It is valid to specify NULL for 
\i event
\i0  when editing needs to be invoked for a non-mouse-down event.  If 
\i event
\i0  is non-NULL then it should be the mouse-down event which initiates editing.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 editCellAtRow:column:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b editCellAtRow:
\b0 (int)
\i row
\b\i0  column:
\b0 (int)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b editCellAtLocation
\b0 (int 
\i row
\i0 , int 
\i col
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Clears the selection, then selects the row (or column, if tracking by columns) of the cell, and invokes: 
\f4\fs24 -edit:0 atRow:
\i row column
\i0 :
\i co
\f3\fs28 l
\i0 .\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -selectsByRows
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 editIfAble:atRow:column:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b editIfAble:
\b0 (NSEvent*)
\i event 
\b\i0 atRow:
\b0 (int)
\i row
\b\i0  column:
\b0 (int)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b editIfAbleAtLocation
\b0 (NSEvent 
\i event
\i0 , int 
\i row
\i0 , int 
\i col
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Calls 
\f4\fs24 -canEdit:atRow:column:
\f3\fs28 , and then calls 
\f4\fs24 -edit:atRow:column:
\f3\fs28  if YES was returned.  Returns YES if editing was initiated, and NO if not. \

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 empty\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b empty
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b empty
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Resets the number of rows in the MiscTableScroll to zero.  Does not deallocate the rows, nor does it affect the number of columns.  The rows are retained in the cache for future use.  See 
\b Usage Tips
\b0  in the introduction for more details.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -addRow, -border:removeSlot:, -removeRow:, -emptyAndReleaseCells, -renewRows:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 emptyAndReleaseCells\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b emptyAndReleaseCells
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b emptyAndReleaseCells
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Resets the number of rows in the MiscTableScroll to zero; releases all cells stored in the cache, and deallocates all cache resources.  Does not affect the number of columns.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -addRow, -border:removeSlot:, -removeRow:, -empty, -renewRows:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 enableCursor\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b enableCursor
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b enableCursor
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Re-enables display of the keyboard cursor after a call to 
\f4\fs24 -disableCursor
\f3\fs28 .  Calls to this method should be made to balance previous calls to 
\f4\fs24 -disableCursor
\f3\fs28 .  The keyboard cursor is a dashed rectangle drawn around a row or column indicating which slot keyboard actions will affect.  See the discussion of 
\b Keyboard Operations
\b0  at the beginning of this document for further information.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 ± disableCursor, ± isCursorEnabled
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 finishEditing\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b finishEditing
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b finishEditing
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 If cell editing is in progress, then this method attempts to finish it.  This method invokes the normal edit termination routines, and the 
\f4\fs24 -control:textShouldEndEditing:
\f3\fs28  validation method gets an opportunity to veto the new value.  Returns YES if no cell editing was in progress to start with, or if the editing session terminated successfully.  Returns NO if the new cell value was rejected.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 firstVisibleColumn\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (int)
\b firstVisibleColumn
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 int 
\b firstVisibleColumn
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -firstVisibleSlot:MISC_COL_BORDER
\f3\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 firstVisibleRow\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (int)
\b firstVisibleRow
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 int 
\b firstVisibleRow
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -firstVisibleSlot:MISC_ROW_BORDER
\f3\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 firstVisibleSlot:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (int)
\b firstVisibleSlot:
\b0 (MiscBorderType)
\i border
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 int 
\b firstVisibleSlot
\b0 (int 
\i border
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the physical coordinate of the first fully visible slot, if any.  If there are two partially visible slots, it returns the physical coordinate of the 
\i last
\i0  slot.  If there is one partially visible slot, it returns the physical coordinate of that slot.  If there are no slots (the MiscTableScroll is empty), it returns -1.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 floatValueAtRow:column:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (float)
\b floatValueAtRow:
\b0 (int)
\i row
\b\i0  column:
\b0 (int)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 float 
\b floatValueAtLocation
\b0 (int 
\i row
\i0 , int 
\i col
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the value of sending a 
\f4\fs24 -floatValue
\f3\fs28  message to the cell at 
\i row
\i0 , 
\i col
\i0 .  If the table is lazy, the 
\i delegate
\i0 , and then the 
\i dataDelegate
\i0  are given the opportunity to reply to the 
\f4\fs24 -tableScroll:floatValueAtRow:column:
\f3\fs28  message.  This gives lazy tables an opportunity to return this information directly, without the overhead of preparing and formatting a cell.  If the table is not lazy, or the 
\i delegate
\i0  and 
\i dataDelegate
\i0  do not respond to the 
\f4\fs24 -tableScroll:doubleValueAtRow:column:
\f3\fs28  message, then the cell is retrieved via 
\f4\fs24 -cellAtRow:column:
\f3\fs28 .  If the cell responds to the 
\f4\fs24 -floatValue
\f3\fs28  message, that value is returned; otherwise, zero is returned.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -cellAtRow:column:, -isLazy, -setLazy:, -tableScroll:floatValueAtRow:column: 
\b0 (delegate method)
\b \

\pard\tx7140\f0\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 font\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (NSFont*)
\b font
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 NSFont 
\b font
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the current font for the MiscTableScroll object.  The current font is used to initialize new cells in the table.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 getIncrementalSearchColumn:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b getIncrementalSearchColumn:
\b0 (int*)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 This method is responsible for determining whether incremental searching should be enabled, and identifying the column on which the table is sorted.  If the 
\i delegate
\i0  responds to 
\f4\fs24 -tableScroll:getIncrementalSearchColumn:
\f3\fs28 , then it is called, otherwise, the 
\i dataDelegate
\i0  is tried.  If neither object responds, the built-in 
\f4\fs24 -doGetIncrementalSearchColumn:
\f3\fs28  method is called.  Returns YES if incremental searching should be enabled, otherwise NO.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -doGetIncrementalSearchColumn:, -incrementalSearch:, -tableScroll:getIncrementalSearchColumn: 
\b0 (delegate method)
\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 getNext:editRow:column:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3  (BOOL)
\b getNext:
\b0 (BOOL)
\i forward
\b\i0  editRow:
\b0 (int*)
\i row
\b\i0  column:
\b0 (int*)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 TableScroll.Location 
\b nextEditLocation
\b0 (boolean 
\i forward
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 When 
\i forward
\i0  is YES, this method returns the coordinates of the next cell that is editable as determined by 
\f4\fs24 -canEdit:atRow:column:
\f3\fs28 .  When 
\i forward
\i0  is NO, this method returns the coordinates of the nearest previous cell that is editable.  The search order is based on the visual order of slots in the MiscTableScroll.  Normally this method is used by assigning the physical coordinates of the cell that is currently being edited to 
\i row
\i0  and 
\i col
\i0 .  The method then searches for the next/previous cell that is editable and updates the values of 
\i row
\i0  and 
\i col
\i0  to the coordinates of the next/previous editable cell.  This method is used in the 
\f4\fs24 -textDidEndEditing:
\f3\fs28  method to find the next / previous cell when the user presses TAB / SHIFT-TAB to terminate cell editing. \

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 For Objective-C, returns YES if a new editable cell was found.  Returns NO if there are no other editable cells.  For Java, returns a TableScroll.Location if a new editable cell was found.  Returns null if there are no other editable cells.  TableScroll.Location is a simple class which contains public 
\i row
\i0  and 
\i column
\i0  members.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 getNextEditRow:column:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3  (BOOL)
\b getNextEditRow:
\b0 (int*)
\i row
\b\i0  column:
\b0 (int*)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 TableScroll.Location 
\b nextEditLocation
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -getNext:YES editRow:row column:col
\f3\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 getPreviousEditRow:column:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3  (BOOL)
\b getPreviousEditRow:
\b0 (int*)
\i row
\b\i0  column:
\b0 (int*)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 TableScroll.Location 
\b previousEditLocation
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -getNext:NO editRow:row column:col
\f3\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 getRow:column:forPoint:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3  (BOOL)
\b getRow:
\b0 (int*)
\i row
\b\i0  column:
\b0 (int*)
\i col 
\b\i0 forPoint:
\b0 (NSPoint)
\i point
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 TableScroll.Location 
\b locationForPoint
\b0 (NSPoint 
\i point
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Calculates the physical slot row and column coordinates for a 
\i point
\i0 , which must be in the coordinate system of the receiving MiscTableScroll object.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 For Objective-C, if 
\i point
\i0  is outside and left of the MiscTableScroll, or there are no columns, then 
\i col
\i0  is set to -1.  If 
\i point
\i0  is outside and right of the MiscTableScroll, 
\i col
\i0  is set to the last valid column index.  Out of range values are handled similarly for 
\i row
\i0 .  Returns YES unless 
\i point
\i0  was out of bounds, in which case NO is returned.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 For Java, returns a TableScroll.Location containing the 
\i row
\i0  and 
\i column
\i0  of the cell underneath 
\i point
\i0  unless it is out of bounds, in which case null is returned.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 getRow:column:ofCell:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b getRow:
\b0 (int*)
\i row
\i0  
\b column:
\b0 (int*)
\i col 
\b\i0 ofCell:
\b0 (NSCell*)
\i cell
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 TableScroll.Location 
\b locationOfCell
\b0 (NSCell 
\i cell
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Finds the location of 
\i cell
\i0  in the MiscTableScroll object.  For Objective-C, if 
\i cell
\i0  is found, 
\i row
\i0  and 
\i col
\i0  are set to the coordinates of the cell in the table and the method returns YES.  If 
\i cell
\i0  is not found, 
\i row
\i0  and 
\i col
\i0  are set to -1, and the method returns NO.  For Java, returns a TableScroll.Location if 
\i cell
\i0  is found.  If 
\i cell
\i0  is not found, the method returns null.  TableScroll.Location is a simple class which contains public 
\i row
\i0  and 
\i column
\i0  members.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 getRow:column:ofCellWithRepresentedObject:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b getRow:
\b0 (int*)
\i row
\i0  
\b column:
\b0 (int*)
\i col 
\b\i0 ofCellWithRepresentedObject:
\b0 (id)
\i object
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 TableScroll.Location 
\b locationOfCellWithRepresentedObject
\b0 (Object 
\i object
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 For Objective-C, assigns the coordinates to 
\i row
\i0  and 
\i col
\i0  of the first cell in the table with a represented object which equals 
\i object
\i0  and returns YES.  If no cell in the table has represented object equal to 
\i object
\i0 , 
\i row
\i0  and 
\i col
\i0  are set to -1, and NO is returned.  For Java, returns a TableScroll.Location containing the 
\i row
\i0  and 
\i column
\i0  of the first cell in the table with a represented object which equals 
\i object
\i0 .  If no cell in the table has an equal represented object, returns nil.  Equality between 
\i object
\i0  and each cell's represented object is tested with 
\f4\fs24 -isEqual:
\f3\fs28 .  See 
\b Represented Objects
\b0  in the introduction for more details.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 ± getRow:column:ofCellWithTag:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 getRow:column:ofCellWithTag:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b getRow:
\b0 (int*)
\i row
\i0  
\b column:
\b0 (int*)
\i col 
\b\i0 ofCellWithTag:
\b0 (int)
\i tag
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 TableScroll.Location 
\b locationOfCellWithTag
\b0 (int 
\i tag
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 For Objective-C, assigns the coordinates to 
\i row
\i0  and 
\i col
\i0  of the first cell in the table with tag 
\i tag
\i0  and returns YES.  If no cell in the table has tag 
\i tag
\i0 , 
\i row
\i0  and 
\i col
\i0  are set to -1, and NO is returned.  For Java, returns a TableScroll.Location containing the 
\i row
\i0  and 
\i column
\i0  of the first cell in the table with tag 
\i tag
\i0 .  If no cell in the table has tag 
\i tag
\i0 , returns null.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 ± getRow:column:ofCellWithRepresentedObject:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 hasColumnSelection\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b hasColumnSelection
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b hasColumnSelection
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns YES if any columns are selected, otherwise NO.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 hasMultipleColumnSelection\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b hasMultipleColumnSelection
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b hasMultipleColumnSelection
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns YES if more than one column is selected, otherwise NO.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 hasMultipleRowSelection\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b hasMultipleRowSelection
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b hasMultipleRowSelection
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns YES if more than one row is selected, otherwise NO.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 hasMultipleSlotSelection:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b hasMultipleSlotSelection:
\b0 (MiscBorderType)
\i border
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b hasMultipleSlotSelection
\b0 (int 
\i border
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns YES if more than one slot is selected, otherwise NO.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 hasRowSelection\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b hasRowSelection
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b hasRowSelection
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns YES if any rows are selected, otherwise NO.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 hasSlotSelection:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b hasSlotSelection:
\b0 (MiscBorderType)
\i border
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b hasSlotSelection
\b0 (int 
\i border
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns YES if at least one slot is selected, otherwise NO.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 hasValidCursorColumn\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b hasValidCursorColumn
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b hasValidCursorColumn
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns YES if the column keyboard cursor has a valid position in the body of the table, otherwise NO.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 hasValidCursorRow\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b hasValidCursorRow
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b hasValidCursorRow
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns YES if the row keyboard cursor has a valid position in the body of the table, otherwise NO.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 hasValidCursorSlot:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b hasValidCursorSlot:
\b0 (MiscBorderType)
\i border
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b hasValidCursorSlot:
\b0 (int 
\i border
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns YES if the keyboard cursor is positioned on a valid slot, otherwise NO.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 incrementalSearch:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b incrementalSearch:
\b0 (NSEvent*)
\i event
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b incrementalSearch
\b0 (NSEvent 
\i event
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Invokes incremental searching if 
\i event
\i0  is an appropriate keyboard event to start incremental search, and if 
\f4\fs24 -getIncrementalSearchColumn:
\f3\fs28  determines that incremental searching should be enabled.  Returns YES if incremental searching was invoked (and 
\i event
\i0  was processed), otherwise returns NO.  This method should be called from within a 
\f4\fs24 -keyDown:
\f3\fs28  method.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -doIncrementalSearch:col, -getIncrementalSearchColumn:\

\pard\tx7140\f0\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 initWithFrame:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (id)
\b initWithFrame:
\b0 (NSRect)
\i frameRect
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\b\fi-620\li2520\fc0\cf0 TableScroll
\b0 (NSRect 
\i frameRect
\i0 )
\fs24   [Java constructor]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Initializes a newly allocated MiscTableScroll object.  This is the designated initializer for this class.  The newly allocated object will have the following properties set by default: <FIXME: write this.>\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 insertColumn:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b insertColumn:
\b0 (int)
\i pos
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b insertColumn
\b0 (int 
\i pos
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Inserts a new column at position 
\i pos
\i0 .  Equivalent to: 
\f4\fs24 -border:MISC_COL_BORDER insertSlot:
\i pos
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\

\pard\tx8260\li1500\fc0\cf0 \

\fs28 insertRow:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b insertRow:
\b0 (int)
\i pos
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b insertRow
\b0 (int 
\i pos
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Inserts a new row at position 
\i pos
\i0 .  Equivalent to: 
\f4\fs24 -border:MISC_ROW_BORDER insertSlot:
\i pos
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 intValueAtRow:column:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (int)
\b intValueAtRow:
\b0 (int)
\i row
\b\i0  column:
\b0 (int)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 int 
\b intValueAtLocation
\b0 (int 
\i row
\i0 , int 
\i col
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the value of sending a 
\f4\fs24 -intValue
\f3\fs28  message to the cell at 
\i row
\i0 , 
\i col
\i0 .  If the table is lazy, the 
\i delegate
\i0 , and then the 
\i dataDelegate
\i0  are given the opportunity to reply to the 
\f4\fs24 -tableScroll:intValueAtRow:column:
\f3\fs28  message.  This gives lazy tables an opportunity to return this information directly, without the overhead of preparing and formatting a cell.  If the table is not lazy, or the 
\i delegate
\i0  and 
\i dataDelegate
\i0  do not respond to the 
\f4\fs24 -tableScroll:doubleValueAtRow:column:
\f3\fs28  message, then the cell is retrieved via 
\f4\fs24 -cellAtRow:column:
\f3\fs28 .  If the cell responds to the 
\f4\fs24 -intValue
\f3\fs28  message, that value is returned; otherwise, zero is returned.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -cellAtRow:column:, -isLazy, -setLazy:, -tableScroll:intValueAtRow:column: 
\b0 (delegate method)
\b \

\pard\tx7140\f0\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 isCursorEnabled\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b isCursorEnabled
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b isCursorEnabled
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Indicates whether cursor display is enabled or disabled.  See the discussion of 
\b Keyboard Operations
\b0  at the beginning of this document for further information.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 ± disableCursor, ± enableCursor
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 isEditing\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b isEditing
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b isEditing
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns YES if a cell editing session is in progress.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 isEnabled\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b isEnabled
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b isEnabled
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Indicates whether or not the MiscTableScroll object is enabled for user interaction.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 isLazy\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b isLazy
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b isLazy
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Indicates whether or not the MiscTableScroll object is using 
\i lazy-mode
\i0  memory management.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 isTrackingMouse\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b isTrackingMouse
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b isTrackingMouse
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns YES if the mouse is currently being tracked by a cell, else NO.  Technically, this method returns YES after the cell which will track the mouse has been highlighted, and NO after it has been unhighlighted.  The cell which is tracking the mouse can be accessed via 
\f4\fs24 -clickedCell
\f3\fs28 , 
\f4\fs24 -clickedColumn
\f3\fs28 , or 
\f4\fs24 -clickedRow
\f3\fs28 .  Although setting a Cell's 
\i highlight
\i0  flag is sufficient during mouse tracking in eager-mode, it is not sufficient in lazy-mode.  Therefore MiscTableScroll uses this method in lazy-mode to determine when a cell should be drawn highlighted.  You should rarely need to call this method, though it might be useful in subclasses.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 ± clickedCell, ± clickedColumn, ± clickedRow, ± clickedSlot:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 lastVisibleColumn\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (int)
\b lastVisibleColumn
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 int 
\b lastVisibleColumn
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -lastVisibleSlot:MISC_COL_BORDER
\f3\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 lastVisibleRow\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (int)
\b lastVisibleRow
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 int 
\b lastVisibleRow
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -lastVisibleSlot:MISC_ROW_BORDER
\f3\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 lastVisibleSlot:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (int)
\b lastVisibleSlot:
\b0 (MiscBorderType)
\i border
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 int 
\b lastVisibleSlot
\b0 (int 
\i border
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the physical coordinate of the last fully visible slot, if any.  If there are two partially visible slots, it returns the physical coordinate of the 
\i first
\i0  slot.  If there is one partially visible slot, it returns the physical coordinate of that slot.  If there are no visible slots (the MiscTableScroll is empty), it returns -1.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 makeCellsPerformSelector:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (int)
\b makeCellsPerformSelector:
\b0 (SEL)
\i aSel
\i0\fs24   [Objective-C]
\fs28 \
int 
\b makeCellsPerformSelector
\b0 (NSSelector 
\i aSel
\i0 )
\fs24   [Java]
\fs28 \

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Calls 
\f4\fs24 [self makeCellsPerformSelector:
\i aSel
\i0  selectedOnly:NO]
\f3\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 makeCellsPerformSelector:selectedOnly:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (int)
\b makeCellsPerformSelector:
\b0 (SEL)
\i aSel
\i0  
\b selectedOnly:
\b0 (BOOL) 
\i selectedOnly
\i0\fs24   [Objective-C]
\fs28 \
int 
\b makeCellsPerformSelector
\b0 (NSSelector 
\i aSel
\i0 , boolean 
\i selectedOnly
\i0 )
\fs24   [Java]
\fs28 \

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Calls 
\f4\fs24 [self makeCellsPerformSelector:
\i aSel
\i0  with:0 with:0 selectedOnly:
\i flag
\i0 ]
\f3\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 makeCellsPerformSelector:with:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (int)
\b makeCellsPerformSelector:
\b0 (SEL)
\i aSel
\i0  
\b with:
\b0 (id)
\i arg1
\i0\fs24   [Objective-C]
\fs28 \
int 
\b makeCellsPerformSelector
\b0 (NSSelector 
\i aSel
\i0 , Object 
\i arg1
\i0 )
\fs24   [Java]
\fs28 \

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Calls 
\f4\fs24 [self makeCellsPerformSelector:
\i aSel
\i0  with:
\i arg1
\i0  selectedOnly:NO]
\f3\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 makeCellsPerformSelector:with:selectedOnly:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (int)
\b makeCellsPerformSelector:
\b0 (SEL)
\i aSel
\i0  
\b with:
\b0 (id)
\i arg1
\i0  
\b selectedOnly:
\b0 (BOOL) 
\i selectedOnly
\i0\fs24   [Objective-C]
\fs28 \
int 
\b makeCellsPerformSelector
\b0 (NSSelector 
\i aSel
\i0 , Object 
\i arg1
\i0 , boolean 
\i selectedOnly
\i0 )
\fs24   [Java]
\fs28 \

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Calls 
\f4\fs24 [self makeCellsPerformSelector:
\i aSel
\i0  with:
\i arg1
\i0  with:0 selectedOnly:
\i flag
\i0 ]
\f3\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 makeCellsPerformSelector:with:with:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (int)
\b makeCellsPerformSelector:
\b0 (SEL)
\i aSel
\i0  
\b with:
\b0 (id)
\i arg1
\i0  
\b with:
\b0 (id)
\i arg2
\i0\fs24   [Objective-C]
\fs28 \
int 
\b makeCellsPerformSelector
\b0 (NSSelector 
\i aSel
\i0 , Object 
\i arg1
\i0 , Object 
\i arg2
\i0 )
\fs24   [Java]
\fs28 \

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Calls 
\f4\fs24 [self makeCellsPerformSelector:
\i aSel
\i0  with:
\i arg1
\i0  with:
\i arg2
\i0  selectedOnly:NO]
\f3\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 makeCellsPerformSelector:with:with:selectedOnly:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (int)
\b makeCellsPerformSelector:
\b0 (SEL)
\i aSel
\i0  
\b with:
\b0 (id)
\i arg1
\i0  
\b with:
\b0 (id)
\i arg2
\i0  
\b selectedOnly:
\b0 (BOOL)
\i selectedOnly
\i0\fs24   [Objective-C]
\fs28 \
int 
\b makeCellsPerformSelector
\b0 (NSSelector 
\i aSel
\i0 , Object 
\i arg1
\i0 , Object 
\i arg2
\i0 , boolean 
\i selectedOnly
\i0 )
\fs24   [Java]
\fs28 \

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Sends the message 
\i aSel
\i0  to the cells in the table.  When 
\i selectedOnly
\i0  is YES, the message is sent only to selected cells.  When 
\i selectedOnly
\i0  is NO, the message is sent to all cells.  First the cell is tested with 
\f4\fs24 -respondsToSelector:
\i aSel
\f3\i0\fs28 .  If the cell responds to the message, then the message is sent.  Then the return value from the call is inspected.  If the cell returns any non-zero value, the process continues.  The first cell that returns 0 stops the process.  The process also terminates when all cells have been processed.  This method returns the number of cells that returned non-zero values. \

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 maxUniformSizeColumns\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (float)
\b maxUniformSizeColumns
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 float 
\b maxUniformSizeColumns
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -maxUniformSizeSlots:MISC_COL_BORDER
\f3\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 maxUniformSizeRows\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (float)
\b maxUniformSizeRows
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 float 
\b maxUniformSizeRows
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -maxUniformSizeSlots:MISC_ROW_BORDER
\f3\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 maxUniformSizeSlots:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (float)
\b maxUniformSizeSlots:
\b0 (MiscBorderType)
\i border
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 float 
\b maxUniformSizeSlots
\b0 (int 
\i border
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the current upper bound for user-sizing of uniform-sized border, 
\i border
\i0 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 minUniformSizeColumns\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (float)
\b minUniformSizeColumns
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 float 
\b minUniformSizeColumns
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -minUniformSizeSlots:MISC_COL_BORDER
\f3\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 minUniformSizeRows\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (float)
\b minUniformSizeRows
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 float 
\b minUniformSizeRows
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -minUniformSizeSlots:MISC_ROW_BORDER
\f3\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 minUniformSizeSlots:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (float)
\b minUniformSizeSlots:
\b0 (MiscBorderType)
\i border
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 float 
\b minUniformSizeSlots:
\b0 (int 
\i border
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the current lower bound for user-sizing of uniform-sized border, 
\i border
\i0 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 modifierDragColumns\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b modifierDragColumns
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b modifierDragColumns
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Indicates whether or not the command-key must be held down to drag columns.  It is NO by default.  Equivalent to: 
\f4\fs24 -modifierDragSlots:MISC_COL_BORDER
\f3\fs28 .\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -border:setModifierDragSlots:,-modifierDragSlots:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 modifierDragRows\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b modifierDragRows
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b modifierDragRows
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Indicates whether or not the command-key must be held down to drag rows.  It is YES by default.  Equivalent to: 
\f4\fs24 -modifierDragSlots:MISC_ROW_BORDER
\f3\fs28 .\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -border:setModifierDragSlots:,-modifierDragSlots:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 modifierDragSlots:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b modifierDragSlots:
\b0 (MiscBorderType)
\i border
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b modifierDragSlots
\b0 (int 
\i border
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Indicates whether or not the command-key must be held down to drag the slots on this border.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 moveColumn:toColumn:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b moveColumn:
\b0 (int)
\i from_pos
\i0  
\b toColumn:
\b0 (int)
\i to_pos
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b moveColumnToColumn
\b0 (int 
\i from_pos
\i0 , int 
\i to_pos
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Moves the column at visual position 
\i from_pos
\i0  to visual position 
\i to_pos
\i0 .  Equivalent to 
\f4\fs24 -border:MISC_COL_BORDER moveSlot:
\i from_pos
\i0  toSlot:
\i to_pos
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 moveRow:toRow:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b moveRow:
\b0 (int)
\i from_pos
\i0  
\b toRow:
\b0 (int)
\i to_pos
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b moveRowToRow
\b0 (int 
\i from_pos
\i0 , int 
\i to_pos
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Moves the row at visual position 
\i from_pos
\i0  to visual position 
\i to_pos
\i0 .  Equivalent to 
\f4\fs24 -border:MISC_ROW_BORDER moveSlot:
\i from_pos
\i0  toSlot:
\i to_pos
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 numberOfColumns\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (int)
\b numberOfColumns
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 int 
\b numberOfColumns
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the number of columns in the MiscTableScroll object.  Equivalent to: 
\f4\fs24 -numberOfSlots:MISC_COL_BORDER
\f3\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 numberOfRows\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (int)
\b numberOfRows
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 int 
\b numberOfRows
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the number of rows in the MiscTableScroll object.  This is the number of 
\i active
\i0  rows currently being displayed.  The MiscTableScroll object performs caching on a row-oriented basis.  There may be additional rows allocated, and stored in the cache.  Equivalent to: 
\f4\fs24 -numberOfSlots:MISC_ROW_BORDER
\f3\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 numberOfSelectedColumns\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (int)
\b numberOfSelectedColumns
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 int 
\b numberOfSelectedColumns
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the number of selected columns.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 numberOfSelectedRows\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (int)
\b numberOfSelectedRows
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 int 
\b numberOfSelectedRows
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the number of selected rows.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 numberOfSelectedSlots:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (int)
\b numberOfSelectedSlots:
\b0 (MiscBorderType)
\i border
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 int 
\b numberOfSelectedSlots
\b0 (int 
\i border
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the number of slots that are selected.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 numberOfSlots:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (int)
\b numberOfSlots:
\b0 (MiscBorderType)
\i border
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 int 
\b numberOfSlots
\b0 (int 
\i border
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the number of slots for the border 
\i border
\i0 .\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -addSlot:, -border:removeSlot:, -border:insertSlot:, -numberOfColumns, -numberOfRows
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 numberOfVisibleColumns\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (int)
\b numberOfVisibleColumns
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 int 
\b numberOfVisibleColumns
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the number of columns visible in the scrolling display.  A column is visible if any part of the column (even a single pixel) appears in the scrolling display.  Equivalent to: 
\f4\fs24 -numberOfVisibleSlots:MISC_COL_BORDER
\f3\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 numberOfVisibleRows\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (int)
\b numberOfVisibleRows
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 int 
\b numberOfVisibleRows
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the number of rows visible in the scrolling display.  A row is visible if any part of the row (even a single pixel) appears in the scrolling display.  Equivalent to: 
\f4\fs24 -numberOfVisibleSlots:MISC_ROW_BORDER
\f3\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 numberOfVisibleSlots:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (int)
\b numberOfVisibleSlots:
\b0 (MiscBorderType)
\i border
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 int 
\b numberOfVisibleSlots
\b0 (int 
\i border
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the number of slots visible in the scrolling display.  A slot is visible if any part of the slot (even a single pixel) appears in the scrolling display.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 print:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b print:
\b0 (id)
\i sender
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b print
\b0 (Object 
\i sender
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Prints the MiscTableScroll object, including row and column titles if they are turned on.  This method posts 
\f4\fs24 MiscTableScrollWillPrintNotification
\f3\fs28  and 
\f4\fs24 MiscTableScrollDidPrintNotification
\f3\fs28  to the default notification center to bracket the actual printing.  You can implement the corresponding delegate methods to perform special operations before and after printing.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 readSelectionFromPasteboard:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b readSelectionFromPasteboard:
\b0 (NSPasteboard*)
\i pboard
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b readSelectionFromPasteboard
\b0 (NSPasteboard 
\i pboard
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 This method is invoked when a service returns some data.  If the 
\i delegate
\i0  responds to the 
\f4\fs24 -tableScroll:readSelectionFromPasteboard:
\f3\fs28  message, it is sent to the 
\i delegate
\i0 .  If not, then the 
\i dataDelegate
\i0  is given the opportunity.  If neither responds to the message, 
\f4\fs24 -builtinReadSelectionFromPasteboard:
\f3\fs28  is called.  Returns the results of the subroutine that was called.  Override this method in your subclass if you need different behavior.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also: 
\f3\fs28  -builtinReadSelectionFromPasteboard:, -tableScroll:readSelectionFromPasteboard: 
\b0 (delegate method)
\b , -readSelectionFromPasteboard: 
\b0 (NSServicesRequests)
\b , -writeSelectionToPasteboard:types: 
\b0 (NSServicesRequests)
\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 registerServicesTypes\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b registerServicesTypes
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b registerServicesTypes
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 If the 
\i delegate
\i0  responds to the 
\f4\fs24 -tableScrollRegisterServicesTypes:
\f3\fs28  message, the message is sent to the 
\i delegate
\i0 .  If not, the 
\i dataDelegate
\i0  is tried.  If neither responds to the message, 
\f4\fs24 -builtinRegisterServicesTypes
\f3\fs28  is called.  This method is invoked when an instance of MiscTableScroll object is initialized.  Override this method in your subclass if you need different behavior.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also: 
\f3\fs28 -builtinRegisterServicesTypes, -tableScrollRegisterServicesTypes: 
\b0 (delegate method)
\f0\b  
\f3\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 removeColumn:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b removeColumn:
\b0 (int)
\i n
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b removeColumn
\b0 (int 
\i n
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Deletes column 
\i n
\i0 .  Equivalent to: 
\f4\fs24 -border:MISC_COL_BORDER removeSlot:
\i n
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 removeRow:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b removeRow:
\b0 (int)
\i n
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b removeRow
\b0 (int 
\i n
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Deletes row 
\i n
\i0 .  Equivalent to: 
\f4\fs24 -border:MISC_ROW_BORDER removeSlot:
\i n
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 renewRows:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b renewRows:
\b0 (int)
\i count
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b renewRows
\b0 (int 
\i count
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Sets the number of active rows in the MiscTableScroll object to 
\i count
\i0 ; does not affect the number of columns.  This is the fastest way to change the size of a MiscTableScroll object when you know the number of rows in advance.  See 
\b Usage Tips
\b0  in the introduction for more details.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -addRow, -addSlot:, -border:removeSlot:, -border:insertSlot:, -removeRow:, -empty, -emptyAndReleaseCells, -insertRow:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 representedObject\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (id)
\b representedObject
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 Object 
\b representedObject
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the represented object of the MiscTableScroll.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -border:slotRepresentedObject:, -columnRepresentedObject:, -rowRepresentedObject:, -setRepresentedObject:, -tag
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 resumeEditing:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b resumeEditing
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b resumeEditing
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Resumes a cell editing session that was suspended by 
\f4\fs24 -suspendEditing
\f3\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 retireCell:atRow:column:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (id)
\b retireCell:
\b0 (id)
\i cell
\i0  
\b atRow:
\b0 (int)
\i row 
\b\i0 column:
\b0 (int)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 NSCell 
\b retireCellAtLocation
\b0 (NSCell 
\i cell
\i0 , int 
\i row
\i0 , int 
\i col
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Internal method called whenever a cell is being removed from active use.  The method must return 
\i cell
\i0 , or a suitable replacement object to place in the cache.  This method provides an opportunity to substitute a different object for 
\i cell
\i0  before it is placed in the cache.  This method also provides an opportunity to reclaim storage when a cell is no longer active.  If the 
\i delegate
\i0  responds to the 
\f4\fs24 -tableScroll:retireCell:atRow:column:
\f3\fs28  message, it is sent to the 
\i delegate
\i0 .  If not, the 
\i dataDelegate
\i0  is tried.  If the 
\i dataDelegate
\i0  also does not respond to the message, the cell itself is checked.  If none of these objects responds to the message, a built-in default method, 
\f4\fs24 -doRetireCell:atRow:column:
\f3\fs28  is called.  Override this method in your subclass if you need different behavior.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -doRetireCell:atRow:column:, -tableScroll:retireCell:atRow:column: 
\b0 (delegate method)
\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 reviveCell:atRow:column:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (id)
\b reviveCell:
\b0 (id)
\i cell
\i0  
\b atRow:
\b0 (int)
\i row 
\b\i0 column:
\b0 (int)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 NSCell 
\b reviveCellAtLocation
\b0 (NSCell 
\i cell
\i0 , int 
\i row
\i0 , int 
\i col
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Internal method called whenever a cell is is being moved into active use.  This method is applied to both newly created cells returned by the 
\f4\fs24 -copyWithZone:
\f3\fs28  method of the column's cell prototype and cells retrieved from the cache.  If the 
\i delegate
\i0  responds to the 
\f4\fs24 -tableScroll:reviveCell:atRow:column:
\f3\fs28  message, it is sent to the 
\i delegate
\i0 .  If not, the 
\i dataDelegate
\i0  is checked.  If neither the 
\i delegate
\i0  nor the 
\i dataDelegate
\i0  respond to the message, the cell itself is checked.  If none of these objects respond to the message, a built-in default method 
\f4\fs24 -doReviveCell:atRow:column:
\f3\fs28  is called.  Override this method in your subclass if you need different behavior.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -doReviveCell:atRow:column:, -tableScroll:reviveCell:atRow:column: 
\b0 (delegate method)
\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 rowAdjustedSize:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (float)
\b rowAdjustedSize:
\b0 (int)
\i row
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 float 
\b rowAdjustedSize
\b0 (int 
\i row
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the current display height of 
\i row
\i0 .  Equivalent to: 
\f4\fs24 -border:MISC_ROW_BORDER slotAdjustedSize:
\i row
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 rowAtPosition:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (int)
\b rowAtPosition:
\b0 (int)
\i pos
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 int 
\b rowAtPosition
\b0 (int 
\i pos
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the original 
\i physical
\i0  position of the row at the current 
\i visual
\i0  position 
\i pos
\i0 .  This is the visual-to-physical conversion routine.  Equivalent to: 
\f4\fs24 -border:MISC_ROW_BORDER slotAtPosition:
\i pos
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 rowCellPrototype:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (id)
\b rowCellPrototype:
\b0 (int)
\i row
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 NSCell 
\b rowCellPrototype
\b0 (int 
\i row
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the cell prototype for row 
\i row
\i0 .  Equivalent to: 
\f4\fs24 -border:MISC_ROW_BORDER slotCellPrototype:
\i row
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 rowCellType:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (MiscTableCellStyle)
\b rowCellType:
\b0 (int)
\i row
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 int 
\b rowCellType
\b0 (int 
\i row
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the cell type for row 
\i row
\i0 .  Equivalent to: 
\f4\fs24 -border:MISC_ROW_BORDER slotCellType:
\i row
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 rowIsAutosize:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b rowIsAutosize:
\b0 (int)
\i row
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b rowIsAutosize
\b0 (int 
\i row
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the state of the 
\i autosize
\i0  flag for row 
\i row
\i0 .  Equivalent to: 
\f4\fs24 -border:MISC_ROW_BORDER slotIsAutosize:
\i row
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 rowIsSelected:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b rowIsSelected:
\b0 (MiscCoord_P)
\i row
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b rowIsSelected
\b0 (int 
\i row
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns YES if 
\i row
\i0  is selected, otherwise NO.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 rowIsSizeable:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b rowIsSizeable:
\b0 (int)
\i row
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b rowIsSizeable
\b0 (int 
\i row
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the state of the 
\i user-sizeable
\i0  flag for row 
\i row
\i0 .  Equivalent to: 
\f4\fs24 -border:MISC_ROW_BORDER slotIsSizeable:
\i row
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 rowIsSorted:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b rowIsSorted:
\b0 (int)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b rowIsSorted
\b0 (int 
\i col
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns YES if 
\i row
\i0  is sorted relative to its neighboring rows.  Returns NO otherwise.  Equivalent to: 
\f4\fs24 -border:MISC_ROW_BORDER slotIsSorted:
\i row
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 rowIsVisible:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b rowIsVisible:
\b0 (int)
\i row
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b rowIsVisible
\b0 (int 
\i row
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns YES if any part of 
\i row
\i0  is visible in the scrolling display.  Returns NO otherwise.  Equivalent to: 
\f4\fs24 -border:MISC_ROW_BORDER slotIsVisible:
\i row
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 rowMaxSize:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (float)
\b rowMaxSize:
\b0 (int)
\i row
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 float 
\b rowMaxSize
\b0 (int 
\i row
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the maximum size for row 
\i row
\i0 .  Equivalent to: 
\f4\fs24 -border:MISC_ROW_BORDER slotMaxSize:
\i row
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 rowMinSize:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (float)
\b rowMinSize:
\b0 (int)
\i row
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 float 
\b rowMinSize
\b0 (int 
\i row
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the minimum size for row 
\i row
\i0 .  Equivalent to: 
\f4\fs24 -border:MISC_ROW_BORDER slotMinSize:
\i row
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 rowOrder\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (NSArray*)
\b rowOrder
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 NSArray 
\b rowOrder
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: -
\f4\fs24 slotOrder:MISC_ROW_BORDER.
\f3\fs28 \

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 rowOrderAsString\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (NSString*)
\b rowOrderAsString
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 String 
\b rowOrderAsString
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -slotOrderAsString:MISC_ROW_BORDER.
\f3\fs28 \

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 rowPosition:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (int)
\b rowPosition:
\b0 (int)
\i row
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 int 
\b rowPosition
\b0 (int 
\i row
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the current 
\i visual
\i0  position of the row whose original 
\i physical
\i0  position is 
\i row
\i0 .  This is the physical-to-visual conversion routine.  Equivalent to: 
\f4\fs24 -border:MISC_ROW_BORDER slotPosition:
\f3\i\fs28 row
\i0 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 rowRepresentedObject:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (id)
\b rowRepresentedObject:
\b0 (int)
\i row
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 Object 
\b rowRepresentedObject
\b0 (int 
\i row
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the represented object for row 
\i row
\i0 .  See 
\b Represented Objects
\b0  in the introduction for more details.  Equivalent to: 
\f4\fs24 -border:MISC_ROW_BORDER slotRepresentedObject:
\i row
\f3\i0\fs28 .\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -rowTag:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 rowsAreSorted\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b rowsAreSorted
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b rowsAreSorted
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns YES if all rows are sorted.  Equivalent to 
\f4\fs24 -slotsAreSorted:MISC_ROW_BORDER
\f3\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 rowSize:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (float)
\b rowSize:
\b0 (int)
\i row
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 float 
\b rowSize
\b0 (int 
\i row
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the target size for row 
\i row
\i0 .  For the actual current display size, use 
\b -rowAdjustedSize:
\b0 .  Equivalent to: 
\f4\fs24 -border:MISC_ROW_BORDER slotSize:
\i row
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 rowSizes\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (NSArray*)
\b rowSizes
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 NSArray 
\b rowSizes
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -slotSizes:MISC_ROW_BORDER.
\f3\fs28 \

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 rowSizesAsString\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (NSString*)
\b rowSizesAsString
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 String 
\b rowSizesAsString
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -slotSizesAsString:MISC_ROW_BORDER.
\f3\fs28 \

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 rowSortDirection:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (MiscSortDirection)
\b rowSortDirection:
\b0 (int)
\i row
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 int 
\b rowSortDirection
\b0 (int 
\i row
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -border:MISC_ROW_BORDER slotSortDirection:
\f3\i\fs28 row
\i0 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 rowSortFunction:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (MiscCompareEntryFunc)
\b rowSortFunction
\b0 :(int)
\i row
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -border:MISC_ROW_BORDER slotSortFunction:
\f3\i\fs28 row
\i0 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 rowSortType:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (MiscSortType)
\b rowSortType:
\b0 (int)
\i row
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 int 
\b rowSortType
\b0 (int 
\i row
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -border:MISC_ROW_BORDER slotSortType:
\f3\i\fs28 row
\i0 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 rowSortVector\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (NSArray*)
\b rowSortVector
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 NSArray 
\b rowSortVector
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -slotSortVector:MISC_ROW_BORDER.
\f3\fs28 \

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 rowTag:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (int)
\b rowTag:
\b0 (int)
\i row
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 int 
\b rowTag
\b0 (int 
\i row
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the tag for row 
\i row
\i0 .  Equivalent to: 
\f4\fs24 -border:MISC_ROW_BORDER slotTag:
\i row
\f3\i0\fs28 .\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -rowRepresentedObject:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 rowTitle:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (NSString*)
\b rowTitle:
\b0 (int)
\i row
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 String 
\b rowTitle
\b0 (int 
\i row
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the title for row 
\i row
\i0 .  Equivalent to: 
\f4\fs24 -border:MISC_ROW_BORDER slotTitle:
\i row
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 rowTitleMode\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (MiscTableTitleMode)
\b rowTitleMode
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 int 
\b rowTitleMode
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the title-mode for row 
\i row
\i0 .  Equivalent to: 
\f4\fs24 -border:MISC_ROW_BORDER slotTitleMode:
\i row
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 rowTitlesOn\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b rowTitlesOn
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b rowTitlesOn
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Indicates whether or not row titles are displayed.  Equivalent to: 
\f4\fs24 -slotTitlesOn:MISC_ROW_BORDER
\f3\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 rowTitlesWidth\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (float)
\b rowTitlesWidth
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 float 
\b rowTitlesWidth
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -slotTitlesSize:MISC_ROW_BORDER.
\f3\fs28 \

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 rowWithRepresentedObject:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (int)
\b rowWithRepresentedObject:
\b0 (id)
\i object
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 int 
\b rowWithRepresentedObject
\b0 (Object 
\i object
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the index of the first row with a represented object equal to 
\i object
\i0 , or -1 if no match is found.  Equality between 
\i object
\i0  and each row's represented object is tested with 
\f4\fs24 -isEqual:
\f3\fs28 .  See 
\b Represented Objects
\b0  in the introduction for more details.  Equivalent to: 
\f4\fs24 -border:MISC_ROW_BORDER slotWithRepresentedObject:
\i object
\f3\i0\fs28 .\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -rowWithTag:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 rowWithTag:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (int)
\b rowWithTag:
\b0 (int)
\i tag
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 int 
\b rowWithTag
\b0 (int 
\i tag
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the index of the first row with tag 
\i tag
\i0 , or -1 if no row has tag 
\i tag
\i0 .  Equivalent to: 
\f4\fs24 -border:MISC_ROW_BORDER slotWithTag:
\i tag
\f3\i0\fs28 .\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -rowWithRepresentedObject:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 scrollCellToVisibleAtRow:column:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b scrollCellToVisibleAtRow:
\b0 (int)
\i row
\i0  
\b column:
\b0 (int)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b scrollCellToVisibleAtLocation
\b0 (int 
\i row
\i0 , int 
\i col
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Scrolls the display as necessary until the cell at position 
\i row
\i0 , 
\i col
\i0  is visible.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 scrollColumnToVisible:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b scrollColumnToVisible:
\b0 (int)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b scrollColumnToVisible
\b0 (int 
\i col
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Scrolls the display as necessary until 
\i col
\i0  is visible.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 scrollRowToVisible:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b scrollRowToVisible:
\b0 (int)
\i row
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b scrollRowToVisible
\b0 (int 
\i row
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Scrolls the display as necessary until 
\i row
\i0  is visible.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 scrollSelectionToVisible\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b scrollSelectionToVisible
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b scrollSelectionToVisible
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Scrolls the display as necessary until the selection is visible.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 selectAll:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b selectAll:
\b0 (id)
\i sender
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b selectAll
\b0 (Object 
\i sender
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Calls 
\f4\fs24 [self selectAllRows]
\f3\fs28  followed by 
\f4\fs24 [self sendActionIfEnabled]
\f3\fs28 . \

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 selectAllColumns\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b selectAllColumns
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b selectAllColumns
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -selectAllSlots:MISC_COL_BORDER
\f3\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 selectAllRows\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b selectAllRows
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b selectAllRows
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -selectAllSlots:MISC_ROW_BORDER
\f3\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 selectAllSlots:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b selectAllSlots:
\b0 (MiscBorderType)
\i border
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b selectAllSlots
\b0 (int 
\i border
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Selects all the slots in 
\i border
\i0 .  Does not send the action to the target.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -selectAll:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 selectColumn:byExtendingSelection:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b selectColumn:
\b0 (MiscCoord_P)
\i col
\i0  
\b byExtendingSelection:
\b0 (BOOL)
\i extendSelection
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b selectColumn
\b0 (int 
\i col
\i0 , boolean 
\i extendSelection
\i0 )
\fs24  [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -border:MISC_COL_BORDER selectSlot:
\i col
\i0  byExtendingSelection
\i :
\f3\fs28 extendSelection
\i0 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 selectColumn:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b selectColumn:
\b0 (MiscCoord_P)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b selectColumn
\b0 (int 
\i col
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -selectColumn:
\i col
\i0  byExtendingSelection:NO
\f3\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 selectColumns:byExtendingSelection:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b selectColumns:
\b0 (NSArray*)
\i cols
\i0  
\b byExtendingSelection:
\b0 (BOOL)
\i extendSelection
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b selectColumns
\b0 (NSArray 
\i cols
\i0 , 
\i extendSelection
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -border:MISC_COL_BORDER selectSlots:
\f3\i\fs28 cols
\f4\i0\fs24  byExtendingSelection:
\f3\i\fs28 extendSelection
\i0 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 selectColumns:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b selectColumns:
\b0 (NSArray*)
\i cols
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b selectColumns
\b0 (NSArray 
\i cols
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -selectColumns:
\f3\i\fs28 cols
\f4\i0\fs24  byExtendingSelection:NO
\f3\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 selectColumnsWithTags:byExtendingSelection:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b selectColumnsWithTags:
\b0 (NSArray*)
\i tags
\i0  
\b byExtendingSelection:
\b0 (BOOL)
\i extendSelection
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b selectColumnsWithTags
\b0 (NSArray 
\i tags
\i0 , boolean 
\i extendSelection
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -border:MISC_COL_BORDER selectSlotsWithTags:
\i tags
\i0  byExtendingSelection:
\f3\i\fs28 extendSelection
\i0 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 selectColumnsWithTags:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b selectColumnsWithTags:
\b0 (NSArray*)
\i tags
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b selectColumnsWithTags
\b0 (NSArray 
\i tags
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -selectColumnsWithTags:
\i tags
\i0  byExtendingSelection:NO
\f3\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 selectedBackgroundColor\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (NSColor*)
\b selectedBackgroundColor
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 NSColor 
\b selectedBackgroundColor
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the current selectedBackgroundColor.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 selectedCell\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (id)
\b selectedCell
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 NSCell 
\b selectedCell
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the cell at the intersection of 
\f4\fs24 -selectedColumn
\f3\fs28  and 
\f4\fs24 -selectedRow
\f3\fs28  or nil if there is no selected cell.  This method really only has meaning in eager-mode, though it can be used in lazy-mode as well.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 selectedColumn\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (MiscCoord_P)
\b selectedColumn
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 int 
\b selectedColumn
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -selectedSlot:MISC_COL_BORDER
\f3\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 selectedColumns\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (NSArray*)
\b selectedColumns
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 NSArray 
\b selectedColumns
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -selectedSlots:MISC_COL_BORDER.
\f3\fs28 \

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 selectedColumnTags\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (NSArray*)
\b selectedColumnTags
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 NSArray 
\b selectedColumnTags
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -selectedSlotTags:MISC_COL_BORDER.
\f3\fs28 \

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 selectedRow\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (MiscCoord_P)
\b selectedRow
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 int 
\b selectedRow
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -selectedSlot:MISC_ROW_BORDER
\f3\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 selectedRows\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (NSArray*)
\b selectedRows
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 NSArray 
\b selectedRows
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -selectedSlots:MISC_ROW_BORDER.
\f3\fs28 \

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 selectedRowTags\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (NSArray*)
\b selectedRowTags
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 NSArray 
\b selectedRowTags
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -selectedSlotTags:MISC_ROW_BORDER.
\f3\fs28 \

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 selectedSlot:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (MiscCoord_P)
\b selectedSlot:
\b0 (MiscBorderType)
\i border
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 int 
\b selectedSlot
\b0 (int 
\i border
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the index of the currently selected slot, or -1 if no slots are selected.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 selectedSlots:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (NSArray*)
\b selectedSlots:
\b0 (MiscBorderType)
\i border
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 NSArray 
\b selectedSlots
\b0 (int 
\i border
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns an array of indexes of all currently selected slots.  Each element in the returned array is an NSNumber in Objective-C, and a java.lang.Integer in Java.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 selectedSlotTags:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (NSArray*)
\b selectedSlotTags:
\b0 (MiscBorderType)
\i border
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 NSArray 
\b selectedSlotTags
\b0 (int 
\i border
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns an array of tags of all currently selected slots.  Each element in the returned array is an NSNumber in Objective-C, and a java.lang.Integer in Java.  This method is useful in conjunction with 
\f4\fs24 -border:selectSlotsWithTags:
\f3\fs28  to save and restore the user's selection when you have tags that uniquely identify the slots.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 selectedTextColor\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (NSColor*)
\b selectedTextColor
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 NSColor 
\b selectedTextColor
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the current selectedTextColor.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 selectionChanged\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b selectionChanged
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b selectionChanged
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Invalidates those portions of the display which need to be redrawn in order to reflect the current selection.  When the selection is modified programmatically or via user-interaction this method is called automatically to reflect the new selection.  You need never call this method directly, but subclasses may want to override it.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 selectionMode\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (MiscSelectionMode)
\b selectionMode
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 int 
\b selectionMode
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the current setting of the selection mode.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 selectRow:byExtendingSelection:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b selectRow:
\b0 (MiscCoord_P)
\i row
\i0  
\b byExtendingSelection:
\b0 (BOOL)
\i extendSelection
\i0\fs24   [Objective-C]
\fs28 \
void 
\b selectRow
\b0 (int 
\i row
\i0 , boolean 
\i extendSelection
\i0 )
\fs24   [Java]
\fs28 \

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -border:MISC_ROW_BORDER selectSlot:
\i row
\i0  byExtendingSelection:
\f3\i\fs28 extendSelection
\i0 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 selectRow:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b selectRow:
\b0 (MiscCoord_P)
\i row
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b selectRow
\b0 (int 
\i row
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -selectRow:
\i row
\i0  byExtendingSelection:NO
\f3\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 selectRows:byExtendingSelection:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b selectRows:
\b0 (NSArray*)
\i rows
\i0  
\b byExtendingSelection:
\b0 (BOOL)
\i extendSelection
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b selectRows
\b0 (NSArray 
\i rows
\i0 , boolean 
\i extendSelection
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -border:MISC_ROW_BORDER selectSlots:
\f3\i\fs28 rows
\f4\i0\fs24  byExtendingSelection:
\f3\i\fs28 extendSelection
\i0 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 selectRows:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b selectRows:
\b0 (NSArray*)
\i rows
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b selectRows
\b0 (NSArray 
\i rows
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -selectRows:
\f3\i\fs28 rows
\f4\i0\fs24  byExtendingSelection:NO
\f3\fs28 .
\fs24  
\fs28 \

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also: 
\f3\fs28  ±border:selectSlots:, ±selectColumns:, ±selectRows:byExtendingSelection:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 selectRowsWithTags:byExtendingSelection:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b selectRowsWithTags:
\b0 (NSArray*)
\i tags
\i0  
\b byExtendingSelection:
\b0 (BOOL)
\i extendSelection
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b selectRowsWithTags
\b0 (NSArray 
\i tags
\i0 , boolean 
\i extendSelection
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -border:MISC_ROW_BORDER selectSlotsWithTags:
\i tags
\i0  byExtendingSelection:
\f3\i\fs28 extendSelection
\i0 .\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 ±border:selectSlotsWithTags:, ±selectColumnsWithTags:, ±selectRowsWithTags:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 selectRowsWithTags:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b selectRowsWithTags:
\b0 (NSArray*)
\i tags
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b selectRowsWithTags
\b0 (NSArray 
\i tags
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -selectRowsWithTags:
\i tags
\i0  byExtendingSelection:NO
\f3\fs28 .\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 ±border:selectSlotsWithTags:, ±selectColumnsWithTags:, ±selectRowsWithTags:byExtendingSelection:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 selectsByRows\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b selectsByRows
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b selectsByRows
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns YES if the mouse is tracked for selection on a row-wise basis.  Returns NO if the selection is on a column-wise basis.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 ± setSelectsByRows:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 sendAction\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b sendAction
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b sendAction
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Sends the 
\i action
\i0  message to the 
\i target
\i0  object.  Implemented via 
\f4\fs24 -sendAction:to:
\f3\fs28 .  Returns
\b  
\b0 YES if the action is successfully sent, otherwise returns NO.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 sendAction:to:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b sendAction:
\b0 (SEL)
\i aSelector
\i0  
\b to:
\b0 (id)
\i anObject
\i0\fs24   [Objective-C]
\fs28 \
boolean 
\b sendActionToTarget
\b0 (NSSelector 
\i aSelector, 
\i0 Object 
\i anObject
\i0 )
\fs24   [Java]
\fs28 \

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Uses the NSApplication class's 
\f4\fs24 -sendAction:to:from:
\f3\fs28  method to send the message 
\i aSelector
\i0  to the object 
\i anObject
\i0  from the MiscTableScroll object itself.  Returns
\b  
\b0 YES if the action is successfully sent, otherwise returns NO.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 sendAction:to:forAllCells:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b sendAction:
\b0 (SEL)
\i aSelector
\i0  
\b to:
\b0 (id)
\i anObject
\i0  
\b forAllCells:
\b0 (BOOL)
\i flag
\i0\fs24   [Objective-C]
\fs28 \
void 
\b sendActionToTargetForAllCells
\b0 (NSSelector 
\i aSelector
\i0 , Object 
\i anObject, 
\i0 boolean 
\i flag
\i0 )
\fs24   [Java]
\fs28 \

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Iterates through all the cells in the table if flag is YES, or just the selected cells if flag is NO, sending 
\i aSelector
\i0  to 
\i anObject
\i0  for each.  Iteration begins with the cell in the upper-left corner of the table, proceeding through the appropriate entries in the first row, then on to the next.  
\i aSelector
\i0  must represent a method that takes a single argument, which is the 
\f4\fs24 id
\f3\fs28  of the current cell in the iteration.  
\i aSelector
\i0 's return value must be 
\f4\fs24 BOOL
\f3\fs28 .  If 
\i aSelector
\i0  returns NO for any cell, the iteration terminates immediately, without sending the message to the remaining cells.  If it returns YES, iteration continues with the next cell.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 sendActionIfEnabled\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b sendActionIfEnabled
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b sendActionIfEnabled
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 If 
\f4\fs24 [self isEnabled]
\f3\fs28  returns YES then 
\f4\fs24 [self sendAction]
\f3\fs28  is called.  Returns
\b  
\b0 YES if the action is successfully sent, otherwise returns NO.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 sendDoubleAction\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b sendDoubleAction
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b sendDoubleAction
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Sends the 
\i doubleAction
\i0  message to the 
\i doubleTarget
\i0  object.  Returns
\b  
\b0 YES if the action is successfully sent, otherwise returns NO.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 sendDoubleActionIfEnabled\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b sendDoubleActionIfEnabled
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b sendDoubleActionIfEnabled
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 If 
\f4\fs24 [self isEnabled]
\f3\fs28  returns YES then 
\f4\fs24 [self sendDoubleAction]
\f3\fs28  is called.  Returns
\b  
\b0 YES if the action is successfully sent, otherwise returns NO.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setAction:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setAction:
\b0 (SEL)
\i new_sel
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setAction
\b0 (NSSelector 
\i new_sel
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Sets the action method to 
\i new_sel
\i0 .  The action message is sent to the 
\i target
\i0  upon a single mouse click.  The argument of an action method is the table scroll.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setAutoSortColumns:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setAutoSortColumns:
\b0 (BOOL)
\i flag
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setAutoSortColumns
\b0 (boolean 
\i flag
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -border:MISC_COL_BORDER setAutoSortSlots:
\i flag
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setAutoSortRows:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setAutoSortRows:
\b0 (BOOL)
\i flag
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setAutoSortRows
\b0 (boolean 
\i flag
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -border:MISC_ROW_BORDER setAutoSortSlots:
\i flag
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setBackgroundColor:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setBackgroundColor:
\b0 (NSColor*)
\i value
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setBackgroundColor
\b0 (NSColor 
\i value
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Sets the 
\i backgroundColor
\i0 .  The 
\i backgroundColor
\i0  is used to initialize new cells, and also to paint the background of areas that are not covered by cells of the table.  By default, this is the value returned by 
\f4\fs24 +defaultBackgroundColor
\f3\fs28 .\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 +defaultBackgroundColor
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setColor:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setColor:
\b0 (NSColor*)
\i value
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setColor
\b0 (NSColor 
\i value
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -setBackgroundColor:
\i value
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setColumn:autosize:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setColumn:
\b0 (int)
\i col
\i0  
\b autosize:
\b0 (BOOL)
\i flag
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setColumnAutosize
\b0 (int 
\i col
\i0 , boolean 
\i flag
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Sets the autosize flag for column 
\i col
\i0 .  Equivalent to: 
\f4\fs24 -border:MISC_COL_BORDER setSlot:
\i col
\i0  autosize:
\i flag
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setColumn:cellPrototype:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setColumn:
\b0 (int)
\i col
\i0  
\b cellPrototype:
\b0 (id)
\i cell
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setColumnCellPrototype
\b0 (int 
\i col
\i0 , NSCell 
\i cell
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Sets the cell prototype for column 
\i col
\i0  to 
\i cell
\i0 .  Equivalent to:
\f4\fs24  -border:MISC_COL_BORDER setSlot:
\i col
\i0  cellPrototype:
\i cell
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setColumn:cellType:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setColumn:
\b0 (int)
\i col
\i0  
\b cellType:
\b0 (MiscTableCellStyle)
\i type
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setColumnCellType
\b0 (int 
\i col
\i0 , int 
\i type
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Sets the cell type for column 
\i col
\i0  to 
\i type
\i0 .  Equivalent to: 
\f4\fs24 -border:MISC_COL_BORDER setSlot:
\i col
\i0  cellType:
\i type
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setColumn:maxSize:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setColumn:
\b0 (int)
\i col
\i0  
\b maxSize:
\b0 (float)
\i size
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setColumnMaxSize
\b0 (int 
\i col
\i0 , float 
\i size
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Sets the maximum size of column 
\i col
\i0  to 
\i size
\i0 .  Equivalent to: 
\f4\fs24 -border:MISC_COL_BORDER setSlot:
\i col
\i0  maxSize:
\i size
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setColumn:minSize:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setColumn:
\b0 (int)
\i col
\i0  
\b minSize:
\b0 (float)
\i size
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setColumnMinSize
\b0 (int 
\i col
\i0 , float 
\i size
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Sets the minimum size of column 
\i col
\i0  to 
\i size
\i0 .  Equivalent to: 
\f4\fs24 -border:MISC_COL_BORDER setSlot:
\i col
\i0  minSize:
\i size
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setColumn:representedObject:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setColumn:
\b0 (int)
\i col
\i0  
\b representedObject:
\b0 (id)
\i object
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setColumnRepresentedObject
\b0 (int 
\i col
\i0 , Object 
\i object
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Sets the represented object for column 
\i col
\i0  to 
\i object
\i0 .    Releases the old represented object if any and then retains 
\i object
\i0 .  See 
\b Represented Objects
\b0  in the introduction for more details.  Equivalent to: 
\f4\fs24 -border:MISC_COL_BORDER setSlot:
\i col
\i0  representedObject:
\i object
\f3\i0\fs28 .\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -setColumn:tag:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setColumn:size:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setColumn:
\b0 (int)
\i col
\i0  
\b size:
\b0 (float)
\i size
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setColumnSize
\b0 (int 
\i col
\i0 , float 
\i size
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Sets the target size of column 
\i col
\i0  to 
\i size
\i0 .  Equivalent to: 
\f4\fs24 -border:MISC_COL_BORDER setSlot:
\i col
\i0  size:
\i size
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setColumn:sizeable:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setColumn:
\b0 (int)
\i col
\i0  
\b sizeable:
\b0 (BOOL)
\i flag
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setColumnSizeable
\b0 (int 
\i col
\i0 , boolean 
\i flag
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Sets the 
\i user-sizeable
\i0  flag for column 
\i col
\i0  to 
\i flag
\i0 .  Equivalent to: 
\f4\fs24 -border:MISC_COL_BORDER setSlot:
\i col
\i0  sizeable:
\i flag
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setColumn:sortDirection:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setColumn:
\b0 (int)
\i col
\i0  
\b sortDirection:
\b0 (MiscSortDirection)
\i dir
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setColumnSortDirection
\b0 (int 
\i col
\i0 , int 
\i dir
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -border:MISC_COL_BORDER setSlot:
\i col
\i0  sortDirection:
\i dir
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setColumn:sortFunction:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setColumn:
\b0 (int)
\i col
\i0  
\b sortFunction
\b0 :(MiscCompareEntryFunc)
\i x
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -border:MISC_COL_BORDER setSlot:
\i col
\i0  sortFunction:
\i x
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setColumn:sortType:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setColumn:
\b0 (int)
\i col
\i0  
\b sortType:
\b0 (MiscSortType)
\i type
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setColumnSortType
\b0 (int 
\i col
\i0 , int 
\i type
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -border:MISC_COL_BORDER setSlot:
\i col
\i0  sortType:
\i type
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setColumn:tag:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setColumn:
\b0 (int)
\i col
\i0  
\b tag:
\b0 (int)
\i tag
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setColumnTag
\b0 (int 
\i col
\i0 , int 
\i tag
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Sets the tag for column 
\i col
\i0  to 
\i tag
\i0 .  Equivalent to: 
\f4\fs24 -border:MISC_COL_BORDER setSlot:
\i col
\i0  tag:
\i tag
\f3\i0\fs28 .\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -setColumn:representedObject:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setColumn:title:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setColumn:
\b0 (int)
\i col
\i0  
\b title:
\b0 (NSString*)
\i title
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setColumnTitle
\b0 (int 
\i col
\i0 , String 
\i title
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Sets the title for column 
\i col
\i0  to 
\i title
\i0 .  Equivalent to: 
\f4\fs24 -border:MISC_COL_BORDER setSlot:
\i col
\i0  title:
\i title
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setColumnOrder:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b setColumnOrder:
\b0 (NSArray*)
\i list
\i0\fs24   [Objective-C]
\fs28 \
boolean 
\b setColumnOrder
\b0 (NSArray 
\i list
\i0 )
\fs24   [Java]
\fs28 \

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -border:MISC_COL_BORDER setSlotOrder:
\i list
\f3\i0\fs28 \

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setColumnOrderFromString:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b setColumnOrderFromString:
\b0 (NSString*)
\i s
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b setColumnOrder
\b0 (String 
\i s
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -border:MISC_COL_BORDER setSlotOrderFromString:
\i s
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setColumnSizes:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b setColumnSizes:
\b0 (NSArray*)
\i list
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b setColumnSizes
\b0 (NSArray 
\i list
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -border:MISC_COL_BORDER setSlotSizes:
\i list
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setColumnSizesFromString:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b setColumnSizesFromString:
\b0 (NSString*)
\i s
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b setColumnSizes
\b0 (String 
\i s
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -border:MISC_COL_BORDER setSlotSizesFromString:s
\f3\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setColumnSortVector:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setColumnSortVector:
\b0 (NSArray*)
\i v
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setColumnSortVector
\b0 (NSArray 
\i v
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -border:MISC_COL_BORDER setSlotSortVector:
\i v
\f3\i0\fs28 \

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setColumnTitleMode:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setColumnTitleMode:
\b0 (MiscTableTitleMode)
\i mode
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setColumnTitleMode
\b0 (int 
\i mode
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Sets the 
\i title-mode
\i0  for column
\i s
\i0  to 
\i mode
\i0 .  Equivalent to: 
\f4\fs24 -border:MISC_COL_BORDER setSlotTitleMode:
\i mode
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setColumnTitlesHeight:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setColumnTitlesHeight:
\b0 (float)
\i height
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setColumnTitlesHeight
\b0 (float 
\i height
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -border:MISC_COL_BORDER setSlotTitlesSize:
\f3\i\fs28 height
\f4\i0\fs24 .
\f3\fs28 \

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setColumnTitlesOn:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b setColumnTitlesOn:
\b0 (BOOL)
\i flag
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b setColumnTitlesOn
\b0 (boolean 
\i flag
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Turns the column titles on or off.  When 
\i flag
\i0  is YES, column titles will be displayed.  When 
\i flag
\i0  is NO, column titles will not be displayed.  Column titles are displayed by default.  Equivalent to: 
\f4\fs24 -border:MISC_COL_BORDER setSlotTitlesOn:
\f3\i\fs28 flag
\i0 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setCompareSlotFunction:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setCompareSlotFunction
\b0 :(MiscCompareSlotFunc)
\i f
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Makes 
\i f
\i0  the slot comparison function to be used for sorting.  It must conform to the following prototype from 
\f4\fs24 MiscTableTypes.h
\f3\fs28 :\

\pard\tx2480\tx2860\tx3240\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\f4\fs24\li1500\fc0\cf0 typedef int (*MiscCompareSlotFunc)( int slot1, int slot2, MiscSlotSortInfo* );\

\pard\tx2480\tx2860\tx3240\f3\fs28\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\li1500\fc0\cf0 The function must return an integer value which is: (a) less than zero if 
\i slot1
\i0  should come before 
\i slot2
\i0 , or (b) equal to zero if 
\i slot1
\i0  should sort equally with 
\i slot2
\i0 , or (c) greater than zero if 
\i slot1
\i0  should come after 
\i slot2
\i0 .  This function is responsible for comparing the cells of the two slots in the order defined by the 
\i slotSortVector
\i0 , or visual order if no explicit 
\i slotSortVector
\i0  has been set.  This function is also responsible for applying the sort direction to the individual cell-wise comparisons.  This function is also responsible for calling user-installed custom slot sorting functions, or interpreting and applying the sort-type for slots that do not have a custom function.  The default, built-in implementation of this function is 
\f4\fs24 MiscDefaultCompareSlotFunc
\f3\fs28 .\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -border:setSlot:sortDirection:, -border:setSlot:sortFunction:, -border:setSlot:sortType:, -border:setSlotSortVector:, -compareSlotFunction, -sortInfoDone:, -sortInfoInit:border:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setCornerTitle:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setCornerTitle:
\b0 (NSString*)
\i s
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setCornerTitle
\b0 (String 
\i s
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Sets the title for the corner cell.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setCursorColumn:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setCursorColumn:
\b0 (MiscCoord_P)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setCursorColumn
\b0 (int 
\i col
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -border:MISC_COL_BORDER setCursorSlot:
\i col
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setCursorRow:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setCursorRow:
\b0 (MiscCoord_P)
\i row
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setCursorRow
\b0 (int 
\i row
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -border:MISC_ROW_BORDER setCursorSlot:
\i row
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setDataDelegate:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setDataDelegate:
\b0 (id)
\i obj
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setDataDelegate
\b0 (Object 
\i obj
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Makes 
\i obj
\i0  the data delegate for the MiscTableScroll object.  Does not retain 
\i obj
\i0 .\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also: 
\f3\fs28 -setDelegate:, -setLazy:\

\pard\tx7140\f0\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setDelegate:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setDelegate:
\b0 (id)
\i obj
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setDelegate
\b0 (Object 
\i obj
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Makes 
\i obj
\i0  the delegate for the MiscTableScroll object.  Does not retain 
\i obj
\i0 .\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also: 
\f3\fs28 -setDataDelegate:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setDoubleAction:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setDoubleAction:
\b0 (SEL)
\i new_sel
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setDoubleAction
\b0 (NSSelector 
\i new_sel
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Sets the double-action method to 
\i new_sel
\i0 .  The double-action message is sent to the 
\i doubleTarget
\i0  upon a double mouse click.  The argument of an action method is the table scroll.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setDoubleTarget:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setDoubleTarget:
\b0 (id)
\i obj
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setDoubleTarget
\b0 (Object 
\i obj
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Makes 
\i obj
\i0  the 
\i doubleTarget
\i0  of the MiscTableScroll object.  Does not retain 
\i obj
\i0 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setDraggableColumns:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setDraggableColumns:
\b0 (BOOL)
\i flag
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setDraggableColumns
\b0 (boolean 
\i flag
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Enables or disables 
\i user-dragging
\i0  of columns.  When 
\i flag
\i0  is YES, columns will be user-draggable.  When 
\i flag
\i0  is NO, columns will not be user-draggable.  The column titles must be displayed to enable the user to drag columns.  Equivalent to: 
\f4\fs24 -border:MISC_COL_BORDER setDraggableSlots:
\i flag
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setDraggableRows:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setDraggableRows:
\b0 (BOOL)
\i flag
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setDraggableRows
\b0 (boolean 
\i flag
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Enables or disables 
\i user-dragging
\i0  of rows.  When 
\i flag
\i0  is YES, rows will be user-draggable.  When 
\i flag
\i0  is NO, rows will not be user-draggable.  The row titles must be displayed to enable the user to drag rows.  Equivalent to: 
\f4\fs24 -border:MISC_ROW_BORDER setDraggableSlots:
\i flag
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\

\pard\tx8260\li1500\fc0\cf0 \

\fs28 setDrawsClippedText:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setDrawsClippedText:
\b0 (BOOL)
\i flag
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setDrawsClippedText
\b0 (boolean 
\i flag
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 When  
\i flag
\i0   is YES, the MiscTableScroll object will use clipping rectangles to draw partially visible text in cells that respond YES to the 
\f4\fs24 -ownerDraw
\f3\fs28  message.  When  
\i flag
\i0   is NO, the MiscTableScroll object will simply not draw partially visible text that would require clipping rectangles for cells that respond YES to the 
\f4\fs24 -ownerDraw
\f3\fs28  message.  This is a drawing performance optimization.  The clipping rectangles are quite slow (especially noticable on older, slower CPUs).  Drawing clipped text is disabled by default.  You must send this message with  
\i flag
\i0   equal to YES to enable partially visible text to be drawn.  If the new setting is different than the existing setting, 
\f4\fs24 [self setNeedsDisplay:YES]
\f3\fs28  is called.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setEnabled:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setEnabled:
\b0 (BOOL)
\i flag
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setEnabled
\b0 (boolean 
\i flag
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Enables or disables user-interaction with the MiscTableScroll object.  The only feature affected by this flag is the dispatch of the 
\i action
\i0  and 
\i doubleAction
\i0 .  When 
\i flag
\i0  is YES, 
\i action
\i0  and 
\i doubleAction
\i0  are sent as appropriate.  When 
\i flag
\i0  is NO, neither messsage is sent.  All other operations are unaffected and remain available.  These include, pasteboard and service operations, selection, column reordering & sizing, etc.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setFirstVisibleColumn:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setFirstVisibleColumn:
\b0 (int)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setFirstVisibleColumn
\b0 (int 
\i col
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -border:MISC_COL_BORDER setFirstVisibleSlot:
\i col
\f3\i0\fs28 .
\f0\b\fs16 \

\pard\tx7140\fi-380\li2480\fc0\cf0 \
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setFirstVisibleRow:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setFirstVisibleRow:
\b0 (int)
\i row
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setFirstVisibleRow
\b0 (int 
\i row
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -border:MISC_ROW_BORDER setFirstVisibleSlot:
\i row
\f3\i0\fs28 .
\f0\b\fs16 \

\pard\tx7140\fi-380\li2480\fc0\cf0 \
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setFont:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setFont:
\b0 (NSFont*)
\i newFont
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setFont
\b0 (NSFont 
\i newFont
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Sets the font for the MiscTableScroll object.   The font is used to initialize new cells in the table.  If rows are uniformly sized, the uniform row size is adjusted proportionately based on the sizes of the old font and the new font.  Then all the cells are updated.  If the cells respond to the 
\f4\fs24 -setOwnerFont:
\f3\fs28  message, that message is sent.  Otherwise the 
\f4\fs24 -setFont:
\f3\fs28  message is tried.  Then 
\f4\fs24 MiscTableScrollFontChangedNotification
\f3\fs28  is posted to the default notification center.  Finally, the display is invalidated.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -tableScrollFontChanged: 
\b0 (delegate method)
\b , -setOwnerFont: 
\b0 (MiscTableCell)
\b , -setFont: 
\b0 (NSCell, MiscTableCell)
\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setLastVisibleColumn:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setLastVisibleColumn:
\b0 (int)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setLastVisibleColumn
\b0 (int 
\i col
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -border:MISC_COL_BORDER setLastVisibleSlot:
\i col
\f3\i0\fs28 .
\f0\b\fs16 \

\pard\tx7140\fi-380\li2480\fc0\cf0 \
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setLastVisibleRow:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setLastVisibleRow:
\b0 (int)
\i row
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setLastVisibleRow
\b0 (int 
\i row
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -border:MISC_ROW_BORDER setLastVisibleSlot:
\i row
\f3\i0\fs28 .
\f0\b\fs16 \

\pard\tx7140\fi-380\li2480\fc0\cf0 \
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setLazy:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setLazy:
\b0 (BOOL)
\i flag
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setLazy
\b0 (boolean 
\i flag
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Enables or disables lazy-mode memory management.  When 
\i flag
\i0  is YES, the MiscTableScroll object will use lazy-mode memory management, asking the 
\i delegate
\i0 , and then if necessary the 
\i dataDelegate
\i0  to provide the cells in the body of the table.  When 
\i flag
\i0  is NO, the MiscTableScroll object will use eager-mode memory management, maintaining a dense, 2-D array of cell pointers, one pointer for each cell in the table, and caching cells on a row-wise basis.  MiscTableScroll uses eager-mode memory management by default.  See 
\b Usage Tips
\b0 , and 
\b Lazy vs. Eager
\b0 , in the introduction for more details.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -dataDelegate, -isLazy, -setDataDelegate:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setMaxUniformSizeColumns:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setMaxUniformSizeColumns:
\b0 (float)
\i size
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setMaxUniformSizeColumns
\b0 (float 
\i size
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -border:MISC_COL_BORDER setMaxUniformSizeSlots:
\i size
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setMaxUniformSizeRows:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setMaxUniformSizeRows:
\b0 (float)
\i size
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setMaxUniformSizeRows
\b0 (float 
\i size
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -border:MISC_ROW_BORDER setMaxUniformSizeSlots:
\i size
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setMinUniformSizeColumns:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setMinUniformSizeColumns:
\b0 (float)
\i size
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setMinUniformSizeColumns
\b0 (float 
\i size
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -border:MISC_COL_BORDER setMinUniformSizeSlots:
\i size
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setMinUniformSizeRows:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setMinUniformSizeRows:
\b0 (float)
\i size
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setMinUniformSizeRows
\b0 (float 
\i size
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -border:MISC_ROW_BORDER setMinUniformSizeSlots:
\i size
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setModifierDragColumns:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setModifierDragColumns:
\b0 (BOOL)
\i flag
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setModifierDragColumns
\b0 (boolean 
\i flag
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Sets whether or not the command-key must be held down to drag columns.  By default, columns require the command-key to perform selection.  Equivalent to 
\f4\fs24 -border:MISC_COL_BORDER setModifierDragSlots:
\i flag
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setModifierDragRows:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setModifierDragRows:
\b0 (BOOL)
\i flag
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setModifierDragRows
\b0 (boolean 
\i flag
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Sets whether or not the command-key must be held down to drag rows.  By default, rows do not require the command-key to perform selection.  Equivalent to 
\f4\fs24 -border:MISC_ROW_BORDER setModifierDragSlots:
\i flag
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setRepresentedObject:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setRepresentedObject:
\b0 (id)
\i object
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setRepresentedObject
\b0 (Object 
\i object
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Sets the represented object of the MiscTableScroll 
\i object
\i0 .  Releases the old represented object if any and then retains 
\i object
\i0 .  See 
\b Represented Objects
\b0  in the introduction for more details.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -border:setSlot:representedObject:, -representedObject, -setColumn:representedObject:, -setRow:representedObject:, -setTag:\

\pard\tx7140\f0\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setRow:autosize:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setRow:
\b0 (int)
\i row
\i0  
\b autosize:
\b0 (BOOL)
\i flag
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setRowAutosize
\b0 (int 
\i row
\i0 , boolean 
\i flag
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Sets the 
\i autosize
\i0  flag for row 
\i row
\i0 .  Equivalent to: 
\f4\fs24 -border:MISC_ROW_BORDER setSlot:
\i row
\i0  autosize:
\i flag
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setRow:cellPrototype:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setRow:
\b0 (int)
\i row
\i0  
\b cellPrototype:
\b0 (id)
\i cell
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setRowCellPrototype
\b0 (int 
\i row
\i0 , NSCell 
\i cell
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Sets the cell prototype for row 
\i row
\i0  to 
\i cell
\i0 .  Currently, only column cell prototypes are used.  Equivalent to:
\f4\fs24  -border:MISC_ROW_BORDER setSlot:
\i row
\i0  cellPrototype:
\i cell
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setRow:cellType:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setRow:
\b0 (int)
\i row
\i0  
\b cellType:
\b0 (MiscTableCellStyle)
\i type
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setRowCellType
\b0 (int 
\i row
\i0 , int 
\i type
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Sets the cell type for row 
\i row
\i0  to 
\i type
\i0 .  Equivalent to: 
\f4\fs24 -border:MISC_ROW_BORDER setSlot:
\i row
\i0  cellType:
\i type
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setRow:maxSize:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setRow:
\b0 (int)
\i row
\i0  
\b maxSize:
\b0 (float)
\i size
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setRowMaxSize
\b0 (int 
\i row
\i0 , float 
\i size
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Sets the maximum size of row 
\i row
\i0  to 
\i size
\i0 .  Equivalent to: 
\f4\fs24 -border:MISC_ROW_BORDER setSlot:
\i row
\i0  maxSize:
\i size
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setRow:minSize:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setRow:
\b0 (int)
\i row
\i0  
\b minSize:
\b0 (float)
\i size
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setRowMinSize
\b0 (int 
\i row
\i0 , float 
\i size
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Sets the minimum size of row 
\i row
\i0  to 
\i size
\i0 .  Equivalent to: 
\f4\fs24 -border:MISC_ROW_BORDER setSlot:
\i row
\i0  minSize:
\i size
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setRow:representedObject:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setRow:
\b0 (int)
\i row
\i0  
\b representedObject:
\b0 (id)
\i object
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setRowRepresentedObject
\b0 (int 
\i row
\i0 , Object 
\i object
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Sets the represented object for row 
\i row
\i0  to 
\i object
\i0 .    Releases the old represented object if any and then retains 
\i object
\i0 .  See 
\b Represented Objects
\b0  in the introduction for more details.  Equivalent to: 
\f4\fs24 -border:MISC_ROW_BORDER setSlot:
\i row
\i0  representedObject:
\i object
\f3\i0\fs28 .\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -setRow:tag:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setRow:size:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setRow:
\b0 (int)
\i row
\i0  
\b size:
\b0 (float)
\i size
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setRowSize
\b0 (int 
\i row
\i0 , float 
\i size
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Sets the target size of row 
\i row
\i0  to 
\i size
\i0 .  Equivalent to: 
\f4\fs24 -border:MISC_ROW_BORDER setSlot:
\i row
\i0  size:
\i size
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setRow:sizeable:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setRow:
\b0 (int)
\i row
\i0  
\b sizeable:
\b0 (BOOL)
\i flag
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setRowSizeable
\b0 (int 
\i row
\i0 , boolean 
\i flag
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Sets the user-sizeable flag for row 
\i row
\i0  to 
\i flag
\i0 .  Equivalent to: 
\f4\fs24 -border:MISC_ROW_BORDER setSlot:
\i row
\i0  sizeable:
\i flag
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setRow:sortDirection:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setRow:
\b0 (int)
\i row
\i0  
\b sortDirection:
\b0 (MiscSortDirection)
\i dir
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setRowSortDirection
\b0 (int 
\i row
\i0 , int 
\i dir
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -border:MISC_ROW_BORDER setSlot:
\i row
\i0  sortDirection:
\i dir
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setRow:sortFunction:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setRow:
\b0 (int)
\i row
\i0  
\b sortFunction
\b0 :(MiscCompareEntryFunc)
\i x
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -border:MISC_ROW_BORDER setSlot:
\i row
\i0  sortFunction:
\i x
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setRow:sortType:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setRow:
\b0 (int)
\i row
\i0  
\b sortType:
\b0 (MiscSortType)
\i type
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setRowSortType
\b0 (int 
\i row
\i0 , int 
\i type
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -border:MISC_ROW_BORDER setSlot:
\i row
\i0  sortType:
\i type
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setRow:tag:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setRow:
\b0 (int)
\i row
\i0  
\b tag:
\b0 (int)
\i tag
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setRowTag
\b0 (int 
\i row
\i0 , int 
\i tag
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Sets the tag for row 
\i row
\i0  to 
\i tag
\i0 .  Equivalent to: 
\f4\fs24 -border:MISC_ROW_BORDER setSlot:
\i row
\i0  tag:
\i tag
\f3\i0\fs28 .\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -setRow:representedObject:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setRow:title:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setRow:
\b0 (int)
\i row
\i0  
\b title:
\b0 (NSString*)
\i title
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setRowTitle
\b0 (int 
\i row
\i0 , String 
\i title
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Sets the title for row 
\i row
\i0  to 
\i title
\i0 .  Equivalent to: 
\f4\fs24 -border:MISC_ROW_BORDER setSlot:
\i row
\i0  title:
\i title
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setRowOrder:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b setRowOrder:
\b0 (NSArray*)
\i list
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b setRowOrder
\b0 (NSArray 
\i list
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -border:MISC_ROW_BORDER setSlotOrder:
\i list
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setRowOrderFromString:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b setRowOrderFromString:
\b0 (NSString*)
\i s
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b setRowOrder
\b0 (String 
\i s
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -border:MISC_ROW_BORDER setSlotOrderFromString:
\i s
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setRowSizes:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b setRowSizes:
\b0 (NSArray*)
\i list
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b setRowSizes
\b0 (NSArray 
\i list
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -border:MISC_ROW_BORDER setSlotSizes:
\i list
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setRowSizesFromString:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b setRowSizesFromString:
\b0 (NSString*)
\i s
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b setRowSizes
\b0 (String 
\i s
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -border:MISC_ROW_BORDER setSlotSizesFromString:
\i s
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setRowSortVector:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setRowSortVector:
\b0 (NSArray)
\i v
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setRowSortVector
\b0 (NSArray 
\i v
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -border:MISC_ROW_BORDER setSlotSortVector:
\i v
\f3\i0\fs28 \

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setRowTitleMode:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setRowTitleMode:
\b0 (MiscTableTitleMode)
\i mode
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setRowTitleMode
\b0 (int 
\i mode
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Sets the title-mode for rows to 
\i mode
\i0 .  Equivalent to: 
\f4\fs24 -border:MISC_ROW_BORDER setSlotTitleMode:
\i mode
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setRowTitlesOn:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b setRowTitlesOn:
\b0 (BOOL)
\i flag
\i0\fs24   [Objective-C]
\fs28 \
boolean 
\b setRowTitlesOn
\b0 (boolean 
\i flag)
\i0\fs24   [Java]
\fs28 \

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Turns the row titles on or off.  When 
\i flag
\i0  is YES, row titles will be displayed.  When 
\i flag
\i0  is NO, row titles will not be displayed.  Row titles are not displayed by default.  Equivalent to: 
\f4\fs24 -border:MISC_ROW_BORDER setSlotTitlesOn:
\f3\i\fs28 flag
\i0 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setRowTitlesWidth:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setRowTitlesWidth:
\b0 (float)
\i width
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx3600\tx3980\tx4340\fi-620\li2520\fc0\cf0 void 
\b setRowTitlesWidth
\b0 (float 
\i width
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li1500 \

\fs28 Equivalent to: 
\f4\fs24 -border:MISC_ROW_BORDER setSlotTitlesSize:
\f3\i\fs28 width
\i0 .
\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setSelectedBackgroundColor:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setSelectedBackgroundColor:
\b0 (NSColor*)
\i value
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setSelectedBackgroundColor
\b0 (NSColor 
\i value
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Sets the 
\i selectedBackgroundColor
\i0  for the MiscTableScroll object.  The 
\i selectedBackgroundColor
\i0  is used to initialize new cells added to the table.  This information is propagated to the cells of the table as follows.  If the cells respond to the 
\f4\fs24 -setOwnerSelectedBackgroundColor:
\f3\fs28  message, that message is sent, else if the cells respond to the 
\f4\fs24 -setSelectedBackgroundColor:
\f3\fs28  message, that message is sent instead.  If the cells do not respond to either of these messages, no message is sent to the cell.  Finally, the display is invalidated.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -setSelectedBackgroundColor: 
\b0 (MiscTableCell)
\b , -setOwnerSelectedBackgroundColor: 
\b0 (MiscTableCell)
\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setSelectedTextColor:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setSelectedTextColor:
\b0 (NSColor*)
\i value
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setSelectedTextColor
\b0 (NSColor 
\i value
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Sets the 
\i selectedTextColor
\i0  for the MiscTableScroll object.  The 
\i selectedTextColor
\i0  is used to initialize new cells added to the table.  This message is also propagated to the existing cells of the table as follows.  If the cells respond to the 
\f4\fs24 -setOwnerSelectedTextColor:
\f3\fs28  message, that message is sent, else if the cells respond to the 
\f4\fs24 -setSelectedTextColor:
\f3\fs28  message, that message is sent.  If the cells do not respond to either of these messages, no message is sent to the cell.  Finally, the display is invalidated.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -setSelectedTextColor: 
\b0 (MiscTableCell)
\b , -setOwnerSelectedTextColor: 
\b0 (MiscTableCell)
\b \

\pard\tx7140\f0\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setSelectionMode:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setSelectionMode:
\b0 (MiscSelectionMode)
\i mode
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setSelectionMode
\b0 (int 
\i mode
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Sets the selection mode for the MiscTableScroll object.  The selection 
\i mode
\i0  can be any of the following:\

\pard\f4\fs24\li3600\fc0\cf0 \

\pard\tx2340\tx5040\tx9180\f3\ul\fi-3140\li5040\fc0\cf0 Objective-C
\ulnone 	
\ul Java\

\f4\ulnone MISC_LIST_MODE	SELECTION_MODE_LIST\
MISC_RADIO_MODE	SELECTION_MODE_RADIO\
MISC_HIGHLIGHT_MODE	SELECTION_MODE_HIGHLIGHT\

\pard\li3600\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\f3\fs28\li1500\fc0\cf0 The modes each correspond to the similarly named selection modes declared in the NSMatrix class.  MiscTableScroll extends the highlight mode selection by implementing the Alternate-key modifier in the same fashion that it works in list mode.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setSelectsByRows:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setSelectsByRows:
\b0 (BOOL)
\i flag
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setSelectsByRows
\b0 (boolean 
\i flag
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Sets the orientation by which the mouse is tracked for selection.  If 
\i flag
\i0  is YES then selection is performed on a row-wise basis.  If 
\i flag
\i0  is NO then selection is performed on a column-wise basis.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 ± selectsByRows
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setSizeableColumns:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setSizeableColumns:
\b0 (BOOL)
\i flag
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setSizeableColumns
\b0 (boolean 
\i flag
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Enables or disables user-sizing of columns.  Equivalent to: 
\f4\fs24 -border:MISC_COL_BORDER setSizeableSlots:
\i flag
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setSizeableRows:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setSizeableRows:
\b0 (BOOL)
\i flag
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setSizeableRows
\b0 (boolean 
\i flag
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Enables or disables user-sizing of rows.  Equivalent to: 
\f4\fs24 -border:MISC_ROW_BORDER setSizeableSlots:
\i flag
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setTag:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setTag:
\b0 (int)
\i tag
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setTag
\b0 (int 
\i tag
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Sets the 
\b tag
\b0  of the MiscTableScroll object to 
\i tag
\i0 .\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -border:setSlot:tag:, -setColumn:tag:, -setRepresentedObject:, -setRow:tag:, -tag\

\pard\tx7140\f0\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setTarget:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setTarget:
\b0 (id)
\i obj
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setTarget
\b0 (Object 
\i obj
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Makes 
\i obj
\i0  the object which will receive the 
\i action
\i0  message whenever there is a single mouse-click on the body of the table.  Does not retain 
\i obj
\i0 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setTextColor:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setTextColor:
\b0 (NSColor*)
\i value
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setTextColor
\b0 (NSColor 
\i value
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Sets the 
\i textColor
\i0  for the MiscTableScroll object.  The 
\i textColor
\i0  is used to initialize new cells added to the table.  The message is propagated to existing cells as follows.  If the cell responds to the 
\f4\fs24 -setOwnerTextColor:
\f3\fs28  message, that message is sent, else if the cell responds to the 
\f4\fs24 -setTextColor:
\f3\fs28  message, that message is sent.  If the cell does not respond to either of these messages, no message is sent to the cell.  Finally, the display is invalidated.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -setOwnerTextColor: 
\b0 (MiscTableCell)
\b , -setTextColor: 
\b0 (NSCell, MiscTableCell)
\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setUniformSizeColumns:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setUniformSizeColumns:
\b0 (float)
\i uniform_size
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setUniformSizeColumns
\b0 (float 
\i uniform_size
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Sets or clears the 
\i uniform-size
\i0  property for columns.  When 
\i uniform_size
\i0  is a non-zero value, all columns will have the same, fixed (uniform) size.  When 
\i uniform_size
\i0  is zero, each column can be assigned sizes individually.  By default, columns are not uniformly sized.  Equivalent to: 
\f4\fs24 -border:MISC_COL_BORDER setUniformSizeSlots:
\i uniform_size
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 setUniformSizeRows:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b setUniformSizeRows:
\b0 (float)
\i uniform_size
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b setUniformSizeRows
\b0 (float 
\i uniform_size
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Sets or clears the 
\i uniform-size
\i0  property for rows.  When 
\i uniform_size
\i0  is a non-zero value, all rows will have the same, fixed (uniform) size.  When 
\i uniform_size
\i0  is zero, each row can be assigned sizes individually.  By default, row are uniformly sized.  Equivalent to: 
\f4\fs24 -border:MISC_ROW_BORDER setUniformSizeSlots:
\i uniform_size
\f3\i0\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 sizeableColumns\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b sizeableColumns
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b sizeableColumns
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Indicates whether or not columns can be resized by the user.  Equivalent to: 
\f4\fs24 -sizeableSlots:MISC_COL_BORDER
\f3\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 sizeableRows\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b sizeableRows
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b sizeableRows
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Indicates whether or not rows can be resized by the user.  Equivalent to: 
\f4\fs24 -sizeableSlots:MISC_ROW_BORDER
\f3\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 sizeableSlots:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b sizeableSlots:
\b0 (MiscBorderType)
\i border
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b sizeableSlots
\b0 (int 
\i border
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Indicates whether or not the user can resize the slots on border 
\i border
\i0 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 sizeToCells\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b sizeToCells
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b sizeToCells
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Instructs the MiscTableScroll object to adjust the frames of its subviews.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -addRow
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 sizeToFit\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b sizeToFit
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b sizeToFit
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Calculates the size of every cell in the MiscTableScroll object using 
\f4\fs24 -cellSize
\f3\fs28 .  Then uses the maximum size for each slot to set the size of the slot.  For uniform-size borders, the size is set to the maximum size of all slots.  Finally, this method calls 
\f4\fs24 -sizeToCells
\f3\fs28  to finish the process of updating the frames of all the subviews.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 slotsAreSorted:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b slotsAreSorted:
\b0 (MiscBorderType)
\i border
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b slotsAreSorted
\b0 (int 
\i border
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns YES if the slots are sorted, NO otherwise.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -border:slotIsSorted:, -border:sortSlot:, -sortSlots:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 slotOrder:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (NSArray*)
\b slotOrder:
\b0 (MiscBorderType)
\i border
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 NSArray 
\b slotOrder
\b0 (int 
\i border
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns an array of numbers containing the current slot order.  The list is organized in 
\i physical
\i0  (original) slot order.  Each value in the list is the current 
\i visual
\i0  position of the corresponding slot.  In other words, returns the physical to visual mapping.  This method is useful for saving the user's slot order preference.  Each element in the returned array is an NSNumber in Objective-C, and a java.lang.Integer in Java.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 The returned list of numbers also encodes the sort direction.  Negative values indicate slots that are sorted in descending order.  The negative value is computed by using the 'C' bitwise complement operator (~).\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -border:setSlotOrder:, -border:setSlotSizes:, -slotOrderAsString:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 slotOrderAsString:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (NSString*)
\b slotOrderAsString:
\b0 (MiscBorderType)
\i border
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 String 
\b slotOrderAsString
\b0 (int 
\i border
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns a string representation of the array returned by 
\f4\fs24 -slotOrder:
\f3\fs28 .  This is useful for saving and restoring user slot order preferences.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -border:setSlotOrder:, -slotOrder:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 slotSizes:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (NSArray*)
\b slotSizes:
\b0 (MiscBorderType)
\i border
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 NSArray 
\b slotSizes
\b0 (int 
\i border
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns an array containing the sizes of all slots.  The list is organized in 
\i physical
\i0  (original) slot order.  The values are the sizes of the corresponding slot.  Each element in
\i  
\i0 the returned array is an NSNumber in Objective-C, and a java.lang.Integer in Java.  This method is useful for saving the user's slot size preferences.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -border:setSlotSizes:, -slotOrder:, -slotSizesAsString:\

\pard\tx7140\f0\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 slotSizesAsString:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (NSString*)
\b slotSizesAsString:
\b0 (MiscBorderType)
\i border
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 String 
\b slotSizesAsString
\b0 (int 
\i border
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns a string representation of the array returned by 
\f4\fs24 -slotSizes:
\f3\fs28 .  This is useful for saving and restoring user slot size preferences.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -slotSizes:\

\pard\tx7140\f0\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 slotSortVector\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (NSArray*)
\b slotSortVector:
\b0 (MiscBorderType)
\i border
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 NSArray 
\b slotSortVector
\b0 (int 
\i border
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the current 
\i slotSortVector
\i0  for 
\i border.
\i0   Each element in the returned array is an NSNumber in Objective-C, and a java.lang.Integer in Java.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -border:setSlotSortVector:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 slotTitleMode:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (MiscTableTitleMode)
\b slotTitleMode:
\b0 (MiscBorderType)
\i border
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 int 
\b slotTitleMode
\b0 (int 
\i border
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the title-mode for 
\i border
\i0 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 slotTitlesOn:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b slotTitlesOn:
\b0 (MiscBorderType)
\i border
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b slotTitlesOn
\b0 (int 
\i border
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Indicates whether or not the titles for 
\i border
\i0  are displayed.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 slotTitlesSize:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (float)
\b slotTitlesSize:
\b0 (MiscBorderType)
\i border
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 float 
\b slotTitlesSize
\b0 (int 
\i border
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns either the height of column titles or the width of row titles, based upon 
\i border
\i0 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 sortColumn:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b sortColumn:
\b0 (int)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b sortColumn
\b0 (int 
\i col
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Re-sorts a single column.  Equivalent to: 
\f4\fs24 -border:MISC_COL_BORDER sortSlot:
\i col
\f3\i0\fs28 .\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -border:sortSlot:, -sortSlots:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 sortColumns\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b sortColumns
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b sortColumns
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -sortSlots:MISC_COL_BORDER
\f3\fs28 .\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -sortSlots:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 sortInfoDone:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3  (void)
\b sortInfoDone:
\b0 (MiscSlotSortInfo*)
\i sortInfo
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 This method reclaims temporary storage held in the 
\i sortInfo
\i0  structure.  You must call this method whenever you are finished using a 
\i sortInfo
\i0  object.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -sortInfoInit:border:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 sortInfoInit:border:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3  (void)
\b sortInfoInit:
\b0 (MiscSlotSortInfo*)
\i sortInfo
\i0  
\b border:
\b0 (MiscBorderType)
\i b
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 This method precomputes the sorting information needed by the sorting methods.  If you call any of the sorting methods that accept an 
\f4\fs24 info:
\f3\fs28  argument, you must initialize the 
\i sortInfo
\i0  structure by calling this method first.  After you have finished using the 
\i sortInfo
\i0  structure, you must reclaim the storage by passing the 
\i sortInfo
\i0  structure to 
\f4\fs24 -sortInfoDone:
\f3\fs28 .  NOTE: The 
\i sortInfo
\i0  structure stores the current sorting information for the table.  Any changes made to the sorting environment after the 
\i sortInfo
\i0  structure has been initialized will not affect the contents of the 
\i sortInfo
\i0  structure, and therefore will not affect comparisons made using the 
\i sortInfo
\i0  structure.  Actions that affect the sorting environment include: rearranging columns/rows, installing a slotSortVector, installing a custom slot comparison function, changing the sort-type or sort-direction of a slot.  Actions which alter the structure of the "other" border (like removing columns/rows) can potentially cause catastrophic failures.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -border:compareSlots::info:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 sortRow:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b sortRow:
\b0 (int)
\i row
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b sortRow
\b0 (int 
\i row
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Re-sorts a single row.  Equivalent to: 
\f4\fs24 -border:MISC_ROW_BORDER sortSlot:
\i row
\f3\i0\fs28 .\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -border:sortSlot:, -sortSlots:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 sortRows\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b sortRows
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b sortRows
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -sortSlots:MISC_ROW_BORDER
\f3\fs28 .\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -sortSlots:\

\pard\tx7140\f0\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 sortSlots:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b sortSlots:
\b0 (MiscBorderType)
\i border
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b sortSlots
\b0 (int 
\i border
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Sorts the slots in 
\i border
\i0 .\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -border:setSlot:sortDirection:, -border:setSlot:sortFunction:, -border:setSlot:sortType:, -border:setSlotSortVector:, -setCompareSlotFunction:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 stateAtRow:column:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (int)
\b stateAtRow:
\b0 (int)
\i row
\b\i0  column:
\b0 (int)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 int 
\b stateAtLocation
\b0 (int 
\i row
\i0 , int 
\i col
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the value of sending a 
\f4\fs24 -state
\f3\fs28  message to the cell at 
\i row
\i0 , 
\i col
\i0 .  If the table is lazy, the 
\i delegate
\i0 , and then the 
\i dataDelegate
\i0  are given the opportunity to reply to the 
\f4\fs24 -tableScroll:stateAtRow:column:
\f3\fs28  message.  This gives lazy tables an opportunity to return this information directly, without the overhead of preparing and formatting a cell.  If the table is not lazy, or the 
\i delegate
\i0  and 
\i dataDelegate
\i0  do not respond to the 
\f4\fs24 -tableScroll:doubleValueAtRow:column:
\f3\fs28  message, then the cell is retrieved via 
\f4\fs24 -cellAtRow:column:
\f3\fs28 .  If the cell responds to the 
\f4\fs24 -state
\f3\fs28  message, that value is returned; otherwise, zero is returned.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -cellAtRow:column:, -isLazy, -setLazy:, -state 
\b0 (NSButtonCell)
\b , -tableScroll:stateAtRow:column:
\b0  (delegate method)
\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 stringForNSStringPboardType\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (NSString*)
\b stringForNSStringPboardType
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 String 
\b stringForNSStringPboardType
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns a string of the selected cells as ASCII text.  Columns are separated by tab characters (ASCII decimal 9).  Rows are terminated with newline characters (ASCII decimal 10).  The text is retrieved from the cells by first trying the 
\f4\fs24 -title
\f3\fs28  message.  If the cell does not respond to the 
\f4\fs24 -title
\f3\fs28  message, then the 
\f4\fs24 -stringValue
\f3\fs28  message is tried.  Each tab character in the text retrieved from the cell is replaced with a single space character (ASCII decimal 32) before the text is written to string.  The selection is written in the current (
\i visual
\i0 ) ordering.  Called from 
\f4\fs24 -builtinStringForPboardType:
\f3\fs28 , and 
\f4\fs24 -stringForNSTabularTextPBoardType
\f3\b\fs28 .
\b0   Override this method in your subclass if you want different behavior.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -builtinStringForPboardType:, -stringForNSTabularTextPboardType
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 stringForNSTabularTextPboardType\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (NSString*)
\b stringForNSTabularTextPboardType
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 String 
\b stringForNSTabularTextPboardType
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Calls 
\f4\fs24 [self stringForNSStringPboardType]
\f3\fs28 .  Called from 
\f4\fs24 -builtinStringForPboardType:
\f3\fs28 .  Override this method in your subclass if you want different behavior.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -builtinStringForPboardType:, -stringForNSStringPboardType
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 stringValueAtRow:column:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (NSString*)
\b stringValueAtRow:
\b0 (int)
\i row
\b\i0  column:
\b0 (int)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 String 
\b stringValueAtLocation
\b0 (int 
\i row
\i0 , int 
\i col
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the value of sending a 
\f4\fs24 -stringValue
\f3\fs28  message to the cell at 
\i row
\i0 , 
\i col
\i0 .  If the table is lazy, the 
\i delegate
\i0 , and then the 
\i dataDelegate
\i0  are given the opportunity to reply to the 
\f4\fs24 -tableScroll:stringValueAtRow:column:
\f3\fs28  message.  This gives lazy tables an opportunity to return this information directly, without the overhead of preparing and formatting a cell.  If the table is not lazy, or the 
\i delegate
\i0  and 
\i dataDelegate
\i0  do not respond to the 
\f4\fs24 -tableScroll:doubleValueAtRow:column:
\f3\fs28  message, then the cell is retrieved via 
\f4\fs24 -cellAtRow:column:
\f3\fs28 .  If the cell responds to the 
\f4\fs24 -stringValue
\f3\fs28  message, that value is returned; otherwise, zero (a NULL pointer) is returned.  NOTE: If you are using NSButtonCells, you probably want 
\f4\fs24 -titleAtRow:column:
\f3\fs28 , not this method.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -cellAtRow:column:, -isLazy, -setLazy:, -tableScroll:stringValueAtRow:column:
\b0  (delegate method)
\b , -titleAtRow:column:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 suspendEditing\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b suspendEditing
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b suspendEditing
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Internal method that temporarily suspends the current cell editing session (if any), while slots are being resized or rearranged.  The editing session is resumed by 
\f4\fs24 -resumeEditing
\f3\fs28 .  These calls nest.  These methods do nothing if cell editing is not in progress.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 tag\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (int)
\b tag
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 int 
\b tag
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the 
\i tag
\i0  of the MiscTableScroll object.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -border:slotTag:, -columnTag:, -representedObject, -rowTag:, -setTag:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 tagAtRow:column:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (int)
\b tagAtRow:
\b0 (int)
\i row
\b\i0  column:
\b0 (int)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 int 
\b tagAtLocation
\b0 (int 
\i row
\i0 , int 
\i col
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the value of sending a 
\f4\fs24 -tag
\f3\fs28  message to the cell at 
\i row
\i0 , 
\i col
\i0 .  If the table is lazy, the 
\i delegate
\i0 , and then the 
\i dataDelegate
\i0  are given the opportunity to reply to the 
\f4\fs24 -tableScroll:tagAtRow:column:
\f3\fs28  message.  This gives lazy tables an opportunity to return this information directly, without the overhead of preparing and formatting a cell.  If the table is not lazy, or the 
\i delegate
\i0  and 
\i dataDelegate
\i0  do not respond to the 
\f4\fs24 -tableScroll:doubleValueAtRow:column:
\f3\fs28  message, then the cell is retrieved via 
\f4\fs24 -cellAtRow:column:
\f3\fs28 .  If the cell responds to the 
\f4\fs24 -tag
\f3\fs28  message, that value is returned; otherwise, zero is returned.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -cellAtRow:column:, -isLazy, -setLazy:, -tableScroll:tagAtRow:column:
\b0  (delegate method)
\b \

\pard\tx7140\f0\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 target\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (id)
\b target
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 Object 
\b target
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns a pointer to the object which receives the 
\i action
\i0  message on a single mouse-click event.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 textColor\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (NSColor*)
\b textColor
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 NSColor 
\b textColor
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the current textColor.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 textDidBeginEditing:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b textDidBeginEditing:
\b0 (NSNotification*)
\i notification
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b textDidBeginEditing
\b0 (NSNotification 
\i notification
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Posts 
\f4\fs24 NSControlTextDidBeginEditingNotification
\f3\fs28  to the default notification center, which the delegates are automatically registered to receive.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also: 
\f3\fs28 NSControlTextDidBeginEditingNotification 
\b0 (NSControl notification)
\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 textDidChange:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b textDidChange:
\b0 (NSNotification*)
\i notification
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b textDidChange
\b0 (NSNotification 
\i notification
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Posts 
\f4\fs24 NSControlTextDidChangeNotification
\f3\fs28  to the default notification center, which the delegates are automatically registered to receive.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also: 
\f3\fs28 NSControlTextDidChangeNotification 
\b0 (NSControl notification)
\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 textDidEndEditing:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b textDidEndEditing:
\b0 (NSNotification*)
\i notification
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b textDidEndEditing
\b0 (NSNotification 
\i notification
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Invoked by the NSText object, when text editing ends.  If the text changed then attempts to set the cell's new value by sending 
\f4\fs24 -tableScroll:setStringValue:atRow:column:
\f3\fs28  to the 
\i delegate
\i0  or 
\i dataDelegate
\i0 .  If neither responds, then sends 
\f4\fs24 -setStringValue:
\f3\fs28  to the cell instead.  It then posts 
\f4\fs24 MiscTableScrollDidEditNotification
\f3\fs28  to the default notification center, sorts the data if auto-sorting is enabled, and finally posts 
\f4\fs24 NSControlTextDidEndEditingNotification,
\f3\fs28  which the delegates are automatically registered to receive.   Lastly, it checks to see if one of 
\i return
\i0 , 
\i tab
\i0 , or 
\i shift-tab 
\i0 caused the editing to end.  If the cause was return, then the action is sent to the target, else if it was tab or shift-tab, then 
\f4\fs24 -getNext:editRow:column:
\f3\fs28  is invoked to determine which cell should be edited next and editing is initiated for that cell using 
\f4\fs24 -editCellAtRow:column:
\f3\fs28 .  If no cell is eligible for editing, then 
\f4\fs24 -selectNextKeyView:
\f3\fs28  or 
\f4\fs24 -selectPreviousKeyView:
\f3\fs28  is sent to the window as appropriate.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 You should never need to call this method manually, though subclasses may want to override it.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also: 
\f3\fs28 NSControlTextDidEndEditingNotification 
\b0 (NSControl notification)
\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 textShouldBeginEditing:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b textShouldBeingEditing:
\b0 (NSText*)
\i sender
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b textShouldBeingEditing
\b0 (NSText 
\i sender
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Invoked automatically during editing to determine if it is okay to edit the cell.  Sends 
\f4\fs24 -control:textShouldBeginEditing:
\f3\fs28  to the 
\i delegate
\i0  or 
\i dataDelegate
\i0 .  If neither responds then returns YES.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also: 
\f3\fs28  ± control:textShouldBeginEditing: 
\b0 (NSControl delegate), 
\b ± textShouldBeginEditing: 
\b0 (NSText delegate)
\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 textShouldEndEditing:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b textShouldEndEditing:
\b0 (NSText*)
\i sender
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b textShouldEndEditing
\b0 (NSText 
\i sender
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Invoked automatically during editing to determine if it is okay to end editing.  Sends 
\f4\fs24 -control:textShouldEndEditing:
\f3\fs28  to the 
\i delegate
\i0  or 
\i dataDelegate
\i0 .  If neither responds then returns YES.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 ± control:textShouldEndEditing:
\b0  (NSControl delegate), 
\f0\b\fs24  
\f3\fs28 ± textShouldEndEditing:
\b0  (NSText delegate)\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 titleAtRow:column:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (NSString*)
\b titleAtRow:
\b0 (int)
\i row
\b\i0  column:
\b0 (int)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 String 
\b titleAtLocation
\b0 (int 
\i row
\i0 , int 
\i col
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the value of sending a 
\f4\fs24 -title
\f3\fs28  message to the cell at 
\i row
\i0 , 
\i col
\i0 .  If the table is lazy, the 
\i delegate
\i0 , and then the 
\i dataDelegate
\i0  are given the opportunity to reply to the 
\f4\fs24 -tableScroll:titleAtRow:column:
\f3\fs28  message.  This gives lazy tables an opportunity to return this information directly, without the overhead of preparing and formatting a cell.  If the table is not lazy, or the 
\i delegate
\i0  and 
\i dataDelegate
\i0  do not respond to the 
\f4\fs24 -tableScroll:titleAtRow:column:
\f3\fs28  message, then the cell is retrieved via 
\f4\fs24 -cellAtRow:column:
\f3\fs28 .  If the cell responds to the 
\f4\fs24 -title
\f3\fs28  message, that value is returned; otherwise, zero (a NULL pointer) is returned.  NOTE: NSButtonCell implements the 
\f4\fs24 -stringValue
\f3\fs28  message by formatting the integer value of its state as a string.  To retrieve the text label displayed on the button, you must use the 
\f4\fs24 -title
\f3\fs28  method.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -cellAtRow:column:, -isLazy, -setLazy:, -tableScroll:titleAtRow:column:
\b0  (delegate method)
\b , -title 
\b0 (NSButtonCell)
\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 totalHeight\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (float)
\b totalHeight
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 float 
\b totalHeight
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -totalSize:MISC_ROW_BORDER
\f3\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 totalSize:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (float)
\b totalSize:
\b0 (MiscBorderType)
\i border
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 float 
\b totalSize
\b0 (int 
\i border
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the total display size.   The sum of 
\f4\fs24 -border:
\i border
\i0  slotAdjustedSize:
\f3\fs28  for all slots on the border.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -border:slotAdjustedSize:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 totalWidth\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (float)
\b totalWidth
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 float 
\b totalWidth
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Equivalent to: 
\f4\fs24 -totalSize:MISC_COL_BORDER
\f3\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 uniformSizeColumns\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (float)
\b uniformSizeColumns
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 float 
\b uniformSizeColumns
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the uniform size for columns.  If columns are not being sized uniformly, this method will return zero.  Any non-zero value indicates the size that all columns have the same size as the value returned by this method.  By default, columns are not uniformly sized.  Equivalent to: 
\f4\fs24 -uniformSizeSlots:MISC_COL_BORDER
\f3\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 uniformSizeRows\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (float)
\b uniformSizeRows
\b0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 float 
\b uniformSizeRows
\b0 ()
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the uniform size for rows.  If rows are not being sized uniformly, this method will return zero.  Any non-zero value indicates the size that all rows have the same size as the value returned by this method.  Rows are uniformly sized by default.  Equivalent to: 
\f4\fs24 -uniformSizeSlots:MISC_ROW_BORDER
\f3\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 uniformSizeSlots:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (float)
\b uniformSizeSlots:
\b0 (MiscBorderType)
\i border
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 float 
\b uniformSizeSlots:
\b0 (int 
\i border
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Returns the uniform size for slots in 
\i border
\i0 .  If slots are not being sized uniformly, this method will return zero.  Any non-zero value indicates the size that all slots have the same size as the value returned by this method.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 validRequestorForSendType:returnType:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (id)
\b validRequestorForSendType:
\b0 (NSString*)
\i sendType
\i0  
\b returnType:
\b0 (NSString*)
\i returnType
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 Object 
\b validRequestorForTypes
\b0 (String 
\i sendType
\i0 , String 
\i returnType
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 This method is called by the services system to update the services menu.  If the 
\i delegate
\i0  responds to the 
\f4\fs24 -tableScroll:validRequestorForSendType:returnType:
\f3\fs28  message, it is sent to the 
\i delegate
\i0 .  If not, the 
\i dataDelegate
\i0  is checked.  If neither object responds,  
\f4\fs24 -builtinValidRequestorForSendType:returnType:
\f3\fs28  is called.  Override this method in your subclass if you need different behavior.  Returns the result of the called method.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -builtinValidRequestorForSendType:returnType:, -tableScroll:validRequestorForSendType:returnType: 
\b0 (delegate method)
\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 writeSelectionToPasteboard:types:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b writeSelectionToPasteboard:
\b0 (NSPasteboard*)
\i pboard
\i0  
\b types:
\b0 (NSArray*)
\i types
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b writeSelectionToPasteboardOfTypes
\b0 (NSPasteboard 
\i pboard
\i0 , NSArray 
\i types
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 This method is responsible for writing data to the pasteboard.  If the 
\i delegate
\i0  responds to 
\f4\fs24 -tableScroll:writeSelectionToPasteboard:types:
\f3\fs28 , the message is sent to the 
\i delegate
\i0 .  If not, the 
\i dataDelegate
\i0  is tried.  If neither object responds to the message, the default method, 
\f4\fs24 -builtinStringForPboardType:
\f3\fs28 , is called.  Called from 
\f4\fs24 -builtinWriteSelectionToPasteboard:types:
\f3\fs28 .  Override this method in your subclass if you want different behavior.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -builtinStringForPboardType:, -builtinWriteSelectionToPasteboard:types:, -tableScroll:writeSelectionToPasteboard:types: 
\b0 (delegate method)
\b , -readSelectionFromPasteboard: 
\b0 (NSServicesRequests)
\b , -writeSelectionToPasteboard:types: 
\b0 (NSServicesRequests)
\fs16 \

\pard\tx11280\fs70\fi-240\li6320\fc0\cf0 \

\pard\f0\b\fs28\fi-1020\li1200\fc0\cf0 Methods Implemented by Cell Subclasses\

\pard\tx7140\fs16\li1360\fc0\cf0 \

\pard\tx8260\fs28\li1500\fc0\cf0 tableScroll:retireAtRow:column:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (id)
\b tableScroll:
\b0 (MiscTableScroll*)
\i scroll
\i0  
\b retireAtRow:
\b0 (int)
\i row
\i0  
\b column:
\b0 (int)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 NSCell 
\b tableScrollRetireAtLocation
\b0 (TableScroll 
\i scroll
\i0 , int 
\i row
\i0 , int 
\i col
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 If neither the 
\i delegate
\i0  nor the 
\i dataDelegate
\i0  respond to 
\f4\fs24 -tableScroll:retireCell:atRow:column:
\f3\fs28  then the MiscTableScroll tries sending this message to the cell itself to give it the opportunity to perform special handling when it is being retired from active use and returned to the cache.  Must return 
\b self
\b0 , or a suitable replacement object for storage in the cache.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -retireCell:atRow:column:, -tableScroll:retireCell:atRow:column:
\b0  (delegate method)
\b \

\pard\tx7140\f0\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 tableScroll:reviveAtRow:column:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (id)
\b tableScroll:
\b0 (MiscTableScroll*)
\i scroll
\i0  
\b reviveAtRow:
\b0 (int)
\i row
\i0  
\b column:
\b0 (int)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 NSCell 
\b tableScrollReviveAtLocation
\b0 (TableScroll 
\i scroll
\i0 , int 
\i row
\i0 , int 
\i col
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 If neither the 
\i delegate
\i0  nor the 
\i dataDelegate
\i0  respond to 
\f4\fs24 -tableScroll:reviveCell:atRow:column:
\f3\fs28  then the MiscTableScroll tries sending this message to the cell itself to give it the opportunity to perform special handling when it is being brought into use for the first time, or is being retrieved from the cache for reuse.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -reviveCell:AtRow:column:, -tableScroll:reviveCell:atRow:column:
\b0  (delegate method)
\fs16 \

\pard\tx11280\fs70\fi-240\li6320\fc0\cf0 \

\pard\f0\b\fs28\fi-1020\li1200\fc0\cf0 Methods Implemented by the Delegate\

\pard\tx7140\fs16\li1360\fc0\cf0 \

\pard\tx8260\fs28\li1500\fc0\cf0 tableScroll:abortEditAtRow:column:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b tableScroll:
\b0 (MiscTableScroll*)
\i scroll
\i0  
\b abortEditAtRow:
\b0 (int)
\i row 
\b\i0 column:
\b0 (int)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b tableScrollAbortEditAtLocation
\b0 (TableScroll 
\i scroll
\i0 , int 
\i row
\i0 , int 
\i col
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Notifies the delegate that a cell editing session has been aborted.  This means that the normal 
\f4\fs24 -control:textShouldEndEditing:
\f3\fs28  validation did not take place.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 Cell Editing 
\b0 (Introduction)
\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 tableScrollBackgroundColorChanged:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b tableScrollBackgroundColorChanged:
\b0 (NSNotification*)
\i notification
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b tableScrollBackgroundColorChanged
\b0 (NSNotification 
\i notification
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Informs the delegate that MiscTableScroll responded to a 
\f4\fs24 -setBackgroundColor:
\f3\fs28  message that actually changed the background color.  The 
\i notification
\i0  is 
\f4\fs24 MiscTableScrollBackgroundColorChangedNotification
\f3\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 tableScroll:border:slotPrototype:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b tableScroll:
\b0 (MiscTableScroll*)
\i scroll
\i0  
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b slotPrototype:
\b0 (int)
\i slot
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b tableScrollSlotPrototype
\b0 (TableScroll 
\i scroll
\i0 , int 
\i border
\i0 , int 
\i slot
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Sent to the 
\i delegate
\i0  whenever the MiscTableScroll object needs the prototype cell for a column which has the 
\f4\fs24 MISC_TABLE_CELL_CALLBACK
\f3\fs28  cell type.  If the 
\i delegate
\i0  does not respond to the message, the 
\i dataDelegate
\i0  is tried.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -border:setSlot:cellType:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 tableScroll:border:slotTitle:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (NSString*)
\b tableScroll:
\b0 (MiscTableScroll*)
\i scroll
\i0  
\b border:
\b0 (MiscBorderType)
\i border
\i0  
\b slotTitle:
\b0 (int)
\i slot
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 String 
\b tableScrollSlotTitle
\b0 (TableScroll 
\i scroll
\i0 , int 
\i border
\i0 , int 
\i slot
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Sent to the 
\i delegate
\i0  whenever the MiscTableScroll object needs a title for a border which has the 
\f4\fs24 MISC_DELEGATE_TITLE
\f3\fs28  title mode.  If the 
\i delegate
\i0  does not respond to the message, the 
\i dataDelegate
\i0  is tried.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -border:setSlotTitleMode:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 tableScrollBufferCount:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (int)
\b tableScrollBufferCount:
\b0 (MiscTableScroll*)
\i scroll
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx520\tx1060\tx1600\tx2120\tx2660\tx3200\tx3720\tx4260\tx4800\tx5320\fi-620\li2520\fc0\cf0 int 
\b tableScrollBufferCount
\b0 (MiscTableScroll 
\i scroll
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li0 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Gives the 
\i delegate
\i0  and 
\i dataDelegate
\i0  of a lazy-mode MiscTableScroll the opportunity to report the number of buffers used for each slot.  This information can be used to optimize-away string copying during sorting.  This is a micro- optimization for sorting lazy-mode tables based on string values.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Sorting retrieves the values of two cells from the same slot to compare them.  In eager mode, it is sufficient to perform the comparison in a manner similar to this:\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\f2\fs20\li1800 [[cell1 stringValue] isEqualToString:[cell2 stringValue]]
\f3\fs28 \

\fs16\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 However, it is common for lazy-mode delegates to simply recycle a single cell to handle the 
\f4\fs24 -tableScroll:cellAtRow:column:
\f3\fs28  message.  In that case, the first value is no longer valid when the second value is retrieved, so the MiscTableScroll object needs to copy the first value before retrieving the second value.  By default, the MiscTableScroll object makes the pessimistic (but safe) assumption that it needs to copy the first string value before retrieving the second string value.  Sophisticated delegates can eliminate this copy operation if they provide at least two buffers for each slot, or if they implement the string retrieval methods (
\f4\fs24 -tableScroll:stringValueAtRow:column:
\f3\fs28  and/or 
\f4\fs24 -tableScroll:titleAtRow:column:
\f3\fs28 ) in a way that makes it possible to retrieve a second string value from the same slot without invalidating the previous string value retrieved from that slot.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 If the value returned is greater than or equal to two (2), the string values will not be copied.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -bufferCount
\f0\b0\fs24 \

\pard\tx7140\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 tableScroll:canEdit:atRow:column:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b tableScroll:
\b0 (MiscTableScroll*)
\i scroll
\i0  
\b canEdit:
\b0 (NSEvent*)
\i event 
\b\i0 atRow:
\b0 (int)
\i row 
\b\i0 column:
\b0 (int)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b tableScrollCanEditAtLocation
\b0 (TableScroll 
\i scroll
\i0 , NSEvent 
\i event
\i0 , int 
\i row
\i0 , int 
\i col
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Gives the 
\i delegate
\i0  the opportunity to decide whether or not an editing session should be started for the cell at 
\i row
\i0 , 
\i col
\i0 .  This method is invoked from both a 
\f2\fs20 -mouseDown:
\f3\fs28  event, in which case 
\i event
\i0  is the mouse-down event itself, and also from keyboard events in which case 
\i event
\i0  is 0.  This message is sent both on single-click events and multi-click events.  It is the responsibility of the 
\i delegate
\i0  to decide whether or not editing should begin.  If the 
\i delegate
\i0  returns YES, an editing session will begin for the cell.  If the 
\i delegate
\i0  returns NO, no editing session will begin.  This message is tested with the 
\i delegate
\i0 , 
\i dataDelegate
\i0  and the cell itself.  The first object that responds to the message decides the outcome.  If none of those objects respond to the message, the default behavior will allow editing only on a double-click or keyboard event, and only if the cell is both editable and enabled.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 Cell Editing 
\b0 (Introduction)
\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 tableScroll:canWritePboardType:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b tableScroll:
\b0 (MiscTableScroll*)
\i scroll
\i0  
\b canWritePboardType:
\b0 (NSString*)
\i type
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b tableScrollCanWritePboardType
\b0 (TableScroll 
\i scroll
\i0 , String 
\i type
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 If the 
\i delegate
\i0  responds to this message, the 
\i delegate
\i0  has the opportunity to select which datatypes will be written to the pasteboard.  If the 
\i delegate
\i0  does not respond, the 
\i dataDelegate
\i0  is given the opportunity.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -canWritePboardType:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 tableScroll:cellAtRow:column:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (id)
\b tableScroll:
\b0 (MiscTableScroll*)
\i scroll
\i0  
\b cellAtRow:
\b0 (int)
\i row
\i0  
\b column:
\b0 (int)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 NSCell 
\b tableScrollCellAtLocation
\b0 (TableScroll 
\i scroll
\i0 , int 
\i row
\i0 , int 
\i col
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 If the table scroll is in 
\i lazy
\i0  mode this message is sent first to the 
\i delegate
\i0  and then to the 
\i dataDelegate
\b\i0  
\b0 (if 
\i delegate
\i0  does not respond) whenever the cell at 
\i row
\i0 ,
\i  col
\i0  is needed.  You must implement this method in either the 
\i delegate
\i0  or the 
\i dataDelegate
\i0  whenever you use a MiscTableScroll in lazy mode.  The table scroll does not manage the cells for itself in lazy mode; the 
\i delegate
\i0  or the 
\i dataDelegate
\i0  must.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:   
\f3\fs28 ± setLazy:, ± isLazy\

\pard\tx7140\f0\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 tableScrollChangeFont:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b tableScrollChangeFont:
\b0 (NSNotification*)
\i notification
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b tableScrollChangeFont
\b0 (NSNotification 
\i notification
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Informs the delegate that 
\f2\fs20 -changeFont:
\f3\fs28  received a new font that is different than the current font.  The NSFontManager sends the 
\f2\fs20 -changeFont:
\f3\fs28  message whenever the user changes the font using either the Font Panel or the Font menu.  This is distinguished from programmatic changes via the 
\f2\fs20 -setFont:
\f3\fs28  method so that you can record user preferences.  This notification message is sent after the font change has been applied, but before the new font is displayed.  The 
\i notification
\i0  is 
\f4\fs24 MiscTableScrollChangeFontNotification
\f3\fs28 .\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -changeFont:, -setFont:, -tableScrollFontChanged:
\b0  (delegate method)
\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 tableScrollDidBecomeFirstResponder:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b tableScrollDidBecomeFirstResponder:
\b0 (NSNotification*)
\i notification
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b tableScrollDidBecomeFirstResponder
\b0 (NSNotification 
\i notification
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Informs the delegate that MiscTableScroll's 
\i documentView
\i0  became first responder.  The 
\i notification
\i0  is 
\f4\fs24 MiscTableScrollDidBecomeFirstResponderNotification
\f3\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 tableScrollDidEdit:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3  (void)
\b tableScrollDidEdit:
\b0 (NSNotification*)
\i notification
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b tableScrollDidEditAtLocation
\b0 (NSNotification 
\i notification
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Informs the delegate that a cell-editing session terminated, and whether or not the value in the cell changed.  This is a notification only.  The 
\i delegate
\i0  is not given any veto power at this point.  Veto power is available in the 
\f2\fs20 -control:textShouldEndEditing:
\f3\fs28  (NSControl) delegate message.  This notification is sent after both 
\f2\fs20 -tableScroll:abortEdit:atRow:column:
\f3\fs28  and 
\f2\fs20 -tableScroll:setStringValue:atRow:column:
\f3\fs28 , so it is sent in all cases when cell editing terminates, regardless of the reason.  The 
\i notification
\i0  is 
\f4\fs24 MiscTableScrollDidEditNotification
\f3\fs28 .\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -tableScrollWillEdit:
\b0  (delegate method)
\b , Cell Editing 
\b0 (Introduction)
\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 tableScrollDidPrint:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3  (void)
\b tableScrollDidPrint:
\b0 (NSNotification*) 
\i notification
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b tableScrollDidPrint
\b0 (NSNotification 
\i notification
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Informs the delegate that a printing session terminated.  This notification is sent from 
\f4\fs24 -print:
\f3\fs28  after printing has completed.  This gives the delegate the opportunity to peform post-print cleanup, such as restoring global NSPrintInfo values.  The 
\i notification
\i0  is 
\f4\fs24 MiscTableScrollDidPrintNotification
\f3\fs28 .\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -tableScrollWillPrint:
\b0  (delegate method)
\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 tableScrollDidResignFirstResponder:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b tableScrollDidResignFirstResponder:
\b0 (NSNotification*)
\i notification
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b tableScrollDidResignFirstResponder
\b0 (NSNotification 
\i notification
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Informs the delegate that MiscTableScroll's 
\i documentView
\i0  resigned first responder.  The 
\i notification
\i0  is 
\f4\fs24 MiscTableScrollDidResignFirstResponderNotification
\f3\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 tableScroll:doubleValueAtRow:column:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3  (double)
\b tableScroll:
\b0 (MiscTableScroll*)
\i scroll
\i0  
\b doubleValueAtRow:
\b0 (int)
\i row 
\b\i0 column:
\b0 (int)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 double 
\b tableScrollDoubleValueAtLocation
\b0 (TableScroll 
\i scroll
\i0 , int 
\i row
\i0 , int 
\i col
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Lazy tables send this message to the 
\i delegate
\i0  and then the 
\i dataDelegate
\i0  to retrieve the value for 
\f2\fs20 -doubleValueAtRow:column:
\f3\fs28 .  If the 
\i delegate
\i0  or 
\i dataDelegate
\i0  respond to this message, that value is returned.  If neither responds to the message, or if the table is not lazy, the cell is retrieved via 
\f2\fs20 -cellAtRow:column:
\f3\fs28 .  If the cell responds to the 
\f2\fs20 -doubleValue
\f3\fs28  message, that value is returned; otherwise zero is returned.  This method gives lazy tables the opportunity to provide the information content of cells without the overhead of preparing and formatting a cell.  You should implement this method in your 
\i delegate
\i0  or 
\i dataDelegate
\i0  if you have any slots that contain 
\f4\fs24 double
\f3\fs28  values.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -cellAtRow:column:, -doubleValueAtRow:column:, -isLazy, -setLazy:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 tableScroll:floatValueAtRow:column:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3  (float)
\b tableScroll:
\b0 (MiscTableScroll*)
\i scroll
\i0  
\b floatValueAtRow:
\b0 (int)
\i row 
\b\i0 column:
\b0 (int)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 float 
\b tableScrollFloatValueAtLocation
\b0 (TableScroll 
\i scroll
\i0 , int 
\i row
\i0 , int 
\i col
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Lazy tables send this message to the 
\i delegate
\i0  and then the 
\i dataDelegate
\i0  to retrieve the value for 
\f2\fs20 -floatValueAtRow:column:
\f3\fs28 .  If the 
\i delegate
\i0  or 
\i dataDelegate
\i0  respond to this message, that value is returned.  If neither responds to the message, or if the table is not lazy, the cell is retrieved via 
\f2\fs20 -cellAtRow:column:
\f3\fs28 .  If the cell responds to the 
\f2\fs20 -floatValue
\f3\fs28  message, that value is returned; otherwise zero is returned.  This method gives lazy tables the opportunity to provide the information content of cells without the overhead of preparing and formatting a cell.  You should implement this method in your 
\i delegate
\i0  or 
\i dataDelegate
\i0  if you have any slots that contain 
\f4\fs24 float
\f3\fs28  values.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -cellAtRow:column:, -floatValueAtRow:column:, -isLazy, -setLazy:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 tableScrollFontChanged:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b tableScrollFontChanged:
\b0 (NSNotification*)
\i notification
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b tableScrollFontChanged
\b0 (NSNotification 
\i notification
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Informs the delegate that 
\f2\fs20 -setFont:
\f3\fs28  received a new font that is different than the current font.  This notification message is sent after all font changes, both user-initiated and programmatic.  The notification is sent after the font change has been applied, but before the new font is displayed.  The 
\i notification
\i0  is 
\f4\fs24 MiscTableScrollFontChangedNotification
\f3\fs28 .\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -changeFont:, -setFont:, -tableScrollChangeFont:
\b0  (delegate method)
\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 tableScroll:getIncrementalSearchColumn:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b tableScroll:
\b0 (MiscTableScroll*)
\i scroll
\i0  
\b getIncrementalSearchColumn:
\b0 (int*)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 First the 
\i delegate
\i0  and then the 
\i dataDelegate
\i0  is tested for response to this message whenever a keystroke is received that could start incremental searching.  If the 
\i delegate
\i0  responds, the message is sent to the 
\i delegate
\i0 .  Otherwise, if the 
\i dataDelegate
\i0  responds, the message is sent to the 
\i dataDelegate
\i0 .  Return YES if incremental searching should be enabled, and set *
\i col
\i0  to the physical index of the column that the table is sorted on, otherwise return NO.  The delegates have the opportunity to decide whether or not incremental searching should be enabled, and indicate which column the table is sorted on.  If you want to enable incremental searching and you do not use the auto-sort facilities, then you must implement this method to tell the MiscTableScroll object which column the table is sorted on.  The table must be sorted in 
\i col
\i0  order (ascending or descending).  
\f2\fs20 -doIncrementalSearch:column:
\f3\fs28  calls 
\f4\fs24 [self border:MISC_COL_BORDER slotSortType:
\i col
\i0 ]
\f3\fs28  to determine the sort-type.  The sort-type for 
\i col
\i0  must be one of the string-based sort-types: 
\f4\fs24 MISC_SORT_STRING_CASE_INSENSITIVE
\f3\fs28 , 
\f4\fs24 MISC_SORT_STRING_CASE_SENSITIVE
\f3\fs28 , 
\f4\fs24 MISC_SORT_TITLE_CASE_INSENSITIVE
\f3\fs28  or 
\f4\fs24 MISC_SORT_TITLE_CASE_SENSITIVE
\f3\fs28 .  
\i Col
\i0  must not have a custom sort function.  You are responsible for ensuring that the table is sorted in 
\i col
\i0  order.  
\f2\fs20 -doIncrementalSearch:column:
\f3\fs28  calls 
\f4\fs24 [self border:MISC_COL_BORDER slotSortDirection:
\i col
\i0 ]
\f3\fs28  to determine the sort-direction.  If the table is sorted in the other direction, use the complement of the column's physical index (
\i ~col
\i0 ).\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also: 
\f3\fs28 -doGetIncrementalSearchColumn:, -doIncrementalSearch:column:, -getIncrementalSearchColumn:, -incrementalSearch:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 tableScroll:intValueAtRow:column:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3  (int)
\b tableScroll:
\b0 (MiscTableScroll*)
\i scroll
\i0  
\b intValueAtRow:
\b0 (int)
\i row 
\b\i0 column:
\b0 (int)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 int 
\b tableScrollIntValueAtLocation
\b0 (TableScroll 
\i scroll
\i0 , int 
\i row
\i0 , int 
\i col
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Lazy tables send this message to the 
\i delegate
\i0  and then the 
\i dataDelegate
\i0  to retrieve the value for 
\f2\fs20 -intValueAtRow:column:
\f3\fs28 .  If the 
\i delegate
\i0  or 
\i dataDelegate
\i0  respond to this message, that value is returned.  If neither responds to the message, or if the table is not lazy, the cell is retrieved via 
\f2\fs20 -cellAtRow:column:
\f3\fs28 .  If the cell responds to the 
\f2\fs20 -intValue
\f3\fs28  message, that value is returned; otherwise zero is returned.  This method gives lazy tables the opportunity to provide the information content of cells without the overhead of preparing and formatting a cell.  You should implement this method in your 
\i delegate
\i0  or 
\i dataDelegate
\i0  if you have any slots that contain 
\f4\fs24 int
\f3\fs28  values.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -cellAtRow:column:, -intValueAtRow:column:, -isLazy, -setLazy:\

\pard\tx7140\f0\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 tableScroll:readSelectionFromPasteboard:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b tableScroll:
\b0 (MiscTableScroll*)
\i scroll
\i0  
\b readSelectionFromPasteboard:
\b0 (id)
\i pboard
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b tableScrollReadSelectionFromPasteboard
\b0 (TableScroll 
\i scroll
\i0 , NSPasteboard 
\i pboard
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 If the 
\i delegate
\i0  responds to this message, the 
\i delegate
\i0  has the opportunity to take over the process of reading data from the pasteboard.  If the 
\i delegate
\i0  does not respond to this message, the dataDelegate is tried.  The delegate should return YES if the data was successfully read from the pasteboard, else it should return NO.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -readSelectionFromPasteboard:\

\pard\tx7140\f0\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 tableScrollRegisterServicesTypes:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b tableScrollRegisterServicesTypes:
\b0 (MiscTableScroll*)
\i scroll
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b tableScrollRegisterServicesTypes
\b0 (TableScroll 
\i scroll
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 If the 
\i delegate
\i0  responds to this message, the delegate has the opportunity to register different datatypes with the services system.  If the 
\i delegate
\i0  does not respond, the 
\i dataDelegate
\i0  is tried.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -registerServicesTypes:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 tableScroll:retireCell:atRow:column:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (id)
\b tableScroll:
\b0 (MiscTableScroll*)
\i scroll
\i0  
\b retireCell:
\b0 (id)
\i cell
\b\i0  atRow:
\b0 (int)
\i row 
\b\i0 column:
\b0 (int)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 NSCell 
\b tableScrollRetireCellAtLocation
\b0 (TableScroll 
\i scroll
\i0 , NSCell 
\i cell
\i0 , int 
\i row
\i0 , int 
\i col
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 If the 
\i delegate
\i0  responds to this message, the 
\i delegate
\i0  has the opportunity to perform special handling of cells that are being retired to the cache.  If the 
\i delegate
\i0  does not respond, the 
\i dataDelegate
\i0  is tried.  If the 
\i dataDelegate
\i0  does not respond either, the cell itself is tried (with 
\f2\fs20 -tableScroll:retireAtRow:column:
\f3\fs28 ).  Must return 
\i cell
\i0 , or a suitable replacement object for storage in the cache.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -retireCell:atRow:column:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 tableScroll:reviveCell:atRow:column:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (id)
\b tableScroll:
\b0 (MiscTableScroll*)
\i scroll
\i0  
\b reviveCell:
\b0 (id)
\i cell
\i0  
\b atRow:
\b0 (int)
\i row 
\b\i0 column:
\b0 (int)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 NSCell 
\b tableScrollReviveCellAtLocation
\b0 (TableScroll 
\i scroll
\i0 , NSCell 
\i cell
\i0 , int 
\i row
\i0 , int 
\i col
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 If the 
\i delegate
\i0  responds to this message, the 
\i delegate
\i0  has the opportunity to perform special handling of cells that are being brought into use for the first time, or are being retrieved from the cache for reuse.  If the 
\i delegate
\i0  does not respond, the 
\i dataDelegate
\i0  is tried.  If the 
\i dataDelegate
\i0  does not respond either, the cell itself is tried (with 
\f2\fs20 -tableScroll:reviveAtRow:column:
\f3\fs28 ).\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -reviveCell:atRow:column:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 tableScrollSelectedBackgroundColorChanged:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b tableScrollSelectedBackgroundColorChanged:
\b0 (NSNotification*)
\i notification
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b tableScrollSelectedBackgroundColorChanged
\b0 (NSNotification 
\i notification
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Informs the delegate that MiscTableScroll received a 
\f2\fs20 -setSelectedBackgroundColor:
\f3\fs28  message that actually changed the selected background color.  The 
\i notification
\i0  is 
\f4\fs24 MiscTableScrollSelectedBackgroundColorChangedNotification
\f3\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 tableScrollSelectedTextColorChanged:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b tableScrollSelectedTextColorChanged:
\b0 (NSNotification*) 
\i notification
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b tableScrollSelectedTextColorChanged
\b0 (NSNotification 
\i notification
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Informs the delegate that MiscTableScroll received a 
\f2\fs20 -setSelectedTextColor:
\f3\fs28  message that actually changed the text color.  The 
\i notification
\i0  is 
\f4\fs24 MiscTableScrollSelectedTextColorChangedNotification
\f3\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 tableScroll:setStringValue:atRow:column:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3  (BOOL)
\b tableScroll:
\b0 (MiscTableScroll*)
\i scroll
\i0  
\b setStringValue:
\b0 (NSString*)
\i s
\b\i0  atRow:
\b0 (int)
\i row 
\b\i0 column:
\b0 (int)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b tableScrollSetStringValueAtLocation
\b0 (TableScroll 
\i scroll
\i0 , String 
\i s
\i0 , int 
\i row
\i0 , int 
\i col
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 This message is sent from within 
\f2\fs20 -textDidEndEditing:
\f3\fs28  when a cell editing session has successfully finished (not aborted) and the string value for the cell was actually changed.  This method provides the delegate with an after-the-fact veto option.    If the 
\i delegate
\i0  returns NO, then the MiscTableScroll object assumes that the change was rejected, and that the cell retains its previous contents.  If the 
\i delegate
\i0  returns YES, then the MiscTableScroll object assumes that the delegate stored the new string value into the appropriate cell, and that slot needs to have its sort position reevaluated.  This method is optional for delegates of eager MiscTableScroll objects.  This method is mandatory for delegates of lazy MiscTableScroll objects that allow cell editing.  If the 
\i delegate
\i0  implements this method, the 
\i delegate
\i0  is responsible for setting the string value in the appropriate cell in the MiscTableScroll object.  \

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 Cell Editing 
\b0 (Introduction)
\b \

\pard\tx7140\f0\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 tableScrollSlotDragged:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b tableScrollSlotDragged:
\b0 (NSNotification*)
\i notification
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b tableScrollSlotDragged
\b0 (NSNotification 
\i notification
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Informs the 
\i delegate
\i0  whenever the user drags a slot to a new position.  The 
\i notification
\i0  is 
\f4\fs24 MiscTableScrollSlotDraggedNotification
\f3\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 tableScrollSlotResized:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b tableScrollSlotResized:
\b0 (NSNotification*) 
\i notification
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b tableScrollSlotResized
\b0 (NSNotification 
\i notification
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Informs the 
\i delegate
\i0  whenever the user resizes a slot.  The 
\i notification
\i0  is 
\f4\fs24 MiscTableScrollSlotResizedNotification
\f3\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 tableScrollSlotSortReversed:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b tableScrollSlotSortReversed:
\b0 (NSNotification*)
\i notification
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b tableScrollSlotSortReversed
\b0 (NSNotification 
\i notification
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Informs the 
\i delegate
\i0  whenever the user reverses the sort direction of a slot.  The 
\i notification
\i0  is 
\f4\fs24 MiscTableScrollSlotSortReversedNotification
\f3\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 tableScroll:stateAtRow:column:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3  (int)
\b tableScroll:
\b0 (MiscTableScroll*)
\i scroll
\i0  
\b stateAtRow:
\b0 (int)
\i row 
\b\i0 column:
\b0 (int)
\i col
\i0\fs24   [Objective-C]\

\pard\tx2480\tx2860\tx3240\fs28\fi-620\li2520\fc0\cf0 int 
\b tableScrollStateAtLocation
\b0 (TableScroll 
\i scroll
\i0 , int 
\i row
\i0 , int 
\i col
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Lazy tables send this message to the 
\i delegate
\i0  and then the 
\i dataDelegate
\i0  to retrieve the value for 
\f2\fs20 -stateAtRow:column:
\f3\fs28 .  If the 
\i delegate
\i0  or 
\i dataDelegate
\i0  respond to this message, that value is returned.  If neither responds to the message, or if the table is not lazy, the cell is retrieved via 
\f2\fs20 -cellAtRow:column:
\f3\fs28 .  If the cell responds to the 
\f2\fs20 -state
\f3\fs28  message, that value is returned; otherwise zero is returned.  This method gives lazy tables the opportunity to provide the information content of cells without the overhead of preparing and formatting a cell.  You should implement this method in your 
\i delegate
\i0  or 
\i dataDelegate
\i0  if you have any slots that contain 
\f4\fs24 state
\f3\fs28  values.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -cellAtRow:column:, -stateAtRow:column:, -isLazy, -setLazy:, -state 
\b0 (NSButtonCell)
\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 tableScroll:stringValueAtRow:column:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3  (NSString*)
\b tableScroll:
\b0 (MiscTableScroll*)
\i scroll
\i0  
\b stringValueAtRow:
\b0 (int)
\i row 
\b\i0 column:
\b0 (int)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 String 
\b tableScrollStringValueAtLocation
\b0 (TableScroll 
\i scroll
\i0 , int 
\i row
\i0 , int 
\i col
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Lazy tables send this message to the 
\i delegate
\i0  and then the 
\i dataDelegate
\i0  to retrieve the value for 
\f2\fs20 -stringValueAtRow:column:
\f3\fs28 .  If the 
\i delegate
\i0  or 
\i dataDelegate
\i0  respond to this message, that value is returned.  If neither responds to the message, or if the table is not lazy, the cell is retrieved via 
\f2\fs20 -cellAtRow:column:
\f3\fs28 .  If the cell responds to the 
\f2\fs20 -stringValue
\f3\fs28  message, that value is returned; otherwise zero is returned.  This method gives lazy tables the opportunity to provide the information content of cells without the overhead of preparing and formatting a cell.  You should implement this method in your 
\i delegate
\i0  or 
\i dataDelegate
\i0  if you have any slots that contain 
\f4\fs24 string
\f3\fs28  values.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -cellAtRow:column:, -stringValueAtRow:column:, -isLazy, -setLazy:\

\pard\tx7140\f0\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 tableScroll:tagAtRow:column:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3  (int)
\b tableScroll:
\b0 (MiscTableScroll*)
\i scroll
\i0  
\b tagAtRow:
\b0 (int)
\i row 
\b\i0 column:
\b0 (int)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 int 
\b tableScrollTagAtLocation
\b0 (TableScroll 
\i scroll
\i0 , int 
\i row
\i0 , int 
\i col
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Lazy tables send this message to the 
\i delegate
\i0  and then the 
\i dataDelegate
\i0  to retrieve the value for 
\f2\fs20 -tagAtRow:column:
\f3\fs28 .  If the 
\i delegate
\i0  or 
\i dataDelegate
\i0  respond to this message, that value is returned.  If neither responds to the message, or if the table is not lazy, the cell is retrieved via 
\f2\fs20 -cellAtRow:column:
\f3\fs28 .  If the cell responds to the 
\f2\fs20 -tag
\f3\fs28  message, that value is returned; otherwise zero is returned.  This method gives lazy tables the opportunity to provide the information content of cells without the overhead of preparing and formatting a cell.  You should implement this method in your 
\i delegate
\i0  or 
\i dataDelegate
\i0  if you have any slots that contain 
\f4\fs24 tag
\f3\fs28  values.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -cellAtRow:column:, -tagAtRow:column:, -isLazy, -setLazy:\

\pard\tx7140\f0\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 tableScrollTextColorChanged:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b tableScrollTextColorChanged:
\b0 (NSNotification*)
\i notification
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b tableScrollTextColorChanged
\b0 (NSNotification 
\i notification
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Informs the delegate that MiscTableScroll received a 
\f2\fs20 -setTextColor:
\f3\fs28  message that actually changed the text color.  The 
\i notification
\i0  is 
\f4\fs24 MiscTableScrollTextColorChangedNotification
\f3\fs28 .\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 tableScroll:titleAtRow:column:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3  (NSString*)
\b tableScroll:
\b0 (MiscTableScroll*)
\i scroll
\i0  
\b titleAtRow:
\b0 (int)
\i row 
\b\i0 column:
\b0 (int)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 String 
\b tableScrollTitleAtLocation
\b0 (TableScroll 
\i scroll
\i0 , int 
\i row
\i0 , int 
\i col
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Lazy tables send this message to the 
\i delegate
\i0  and then the 
\i dataDelegate
\i0  to retrieve the value for 
\f2\fs20 -titleAtRow:column:
\f3\fs28 .  If the 
\i delegate
\i0  or 
\i dataDelegate
\i0  respond to this message, that value is returned.  If neither responds to the message, or if the table is not lazy, the cell is retrieved via 
\f2\fs20 -cellAtRow:column:
\f3\fs28 .  If the cell responds to the 
\f2\fs20 -title
\f3\fs28  message, that value is returned; otherwise zero is returned.  This method gives lazy tables the opportunity to provide the information content of cells without the overhead of preparing and formatting a cell.  You should implement this method in your 
\i delegate
\i0  or 
\i dataDelegate
\i0  if you have any slots that contain 
\f4\fs24 title
\f3\fs28  values.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -cellAtRow:column:, -stringValueAtRow:column:, -isLazy, -setLazy:, -title 
\b0 (NSButtonCell)
\b \

\pard\tx7140\f0\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 tableScroll:validRequestorForSendType:returnType:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (id)
\b tableScroll:
\b0 (MiscTableScroll*)
\i scroll
\i0  
\b validRequestorForSendType:
\b0 (NSString*)
\i sendType
\i0  
\b returnType:
\b0 (NSString*)
\i returnType
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 Object 
\b tableScrollValidRequestorForTypes
\b0 (TableScroll 
\i scroll
\i0 , String 
\i sendType
\i0 , String 
\i returnType
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 If the 
\i delegate
\i0  responds to this message, the 
\i delegate
\i0  has the opportunity to interact with the services system using different combinations of send and return types than the MiscTableScroll object alone normally does.  If the 
\i delegate
\i0  does not respond, the 
\i dataDelegate
\i0  is tried.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -validRequestorForSendType:returnType:
\b0\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 tableScrollWillEdit:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b tableScrollWillEdit:
\b0 (NSNotification*)
\i notification
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b tableScrollWillEdit
\b0 (NSNotification 
\i notification
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Informs the 
\i delegate
\i0  that a cell editing session is about to start.  This is a notification only.  There is no veto option associated with this message.  A veto option is provided with 
\f2\fs20 -tableScroll:canEdit:atRow:column:
\f3\fs28 .  This notification, and its counterpart, 
\f2\fs20 -tableScrollDidEdit:
\f3\fs28 , bracket cell editing sessions for delegates that want to perform extra operations before and after cell editing sessions without interfering with any of the begin/end decisions.  The 
\i notification
\i0  is 
\f4\fs24 MiscTableScrollWillEditNotification
\f3\fs28 .\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -tableScrollDidEdit:, Cell Editing 
\b0 (Introduction)
\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 tableScrollWillPrint:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b tableScrollWillPrint:
\b0 (NSNotification*) 
\i notification
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b tableScrollWillPrint
\b0 (NSNotification 
\i notification
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Informs the delegate that a printing session is about to start.  This is a notification only.  There is no veto option associated with this message.  This notification is sent from 
\f4\fs24 -print:
\f3\fs28  before the NSPrintPanel is presented to the user.  This notification, and its counterpart, 
\f2\fs20 -tableScrollDidPrint:
\f3\fs28 , bracket printing sessions for delegates that want to perform extra operations before and after printing sessions.  This method is useful for pre-print setup operations like overriding global NSPrintInfo settings.  The 
\i notification
\i0  is 
\f4\fs24 MiscTableScrollWillPrintNotification
\f3\fs28 .\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -tableScrollDidPrint: 
\b0 (delegate method)
\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 tableScrollWillPrintPageFooter:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b tableScrollWillPrintPageFooter:
\b0 (NSNotification*) 
\i notification
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b tableScrollWillPrintPageFooter 
\b0 (NSNotification 
\i notification
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 <FIXME: Write this.  Headers & footers are not yet fully implemented.>  The 
\i notification
\i0  is 
\f4\fs24 MiscTableScrollWillPrintPageFooterNotification
\f3\fs28 .\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -tableScrollWillPrintPageHeader: 
\b0 (delegate method)
\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 tableScrollWillPrintPageHeader:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b tableScrollWillPrintPageHeader:
\b0 (NSNotification*) 
\i notification
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b tableScrollWillPrintPageHeader 
\b0 (NSNotification 
\i notification
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 <FIXME: Write this.  Headers & footers are not yet fully implemented.>  The 
\i notification
\i0  is 
\f4\fs24 MiscTableScrollWillPrintPageHeaderNotification
\f3\fs28 .\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -tableScrollWillPrintPageFooter: 
\b0 (delegate method)
\fs16 \

\pard\tx7140\f0\b\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 tableScroll:writeSelectionToPasteboard:types:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b tableScroll:
\b0 (MiscTableScroll*)
\i scroll
\i0  
\b writeSelectionToPasteboard:
\b0 (NSPasteboard*)
\i pboard
\i0  
\b types:
\b0 (NSArray*)
\i types
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b tableScrollWriteSelectionToPasteboardOfTypes
\b0 (TableScroll 
\i scroll
\i0 , NSPasteboard 
\i pboard
\i0 , NSArray 
\i types
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 If the 
\i delegate
\i0  responds to this message, the 
\i delegate
\i0  has the opportunity to completely take over the writing of data to the pasteboard.  If the 
\i delegate
\i0  does not respond, the 
\i dataDelegate
\i0  is tried.\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2780\tx3280\tx3760\f0\b\fs24\fi-1300\li2800\fc0\cf0 See also:  
\f3\fs28 -writeSelectionToPasteboard:types:\

\pard\tx11280\b0\fs70\fi-240\li6320\fc0\cf0 \

\pard\f0\b\fs28\fi-1020\li1200\fc0\cf0 Delegate Methods for Dragging Source Operations\

\pard\tx7140\fs16\li1360\fc0\cf0 \

\pard\tx8260\fs28\li1500\fc0\cf0 tableScroll:allowDragOperationAtRow:column:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b tableScroll:
\b0 (MiscTableScroll*)
\i scroll
\i0  
\b allowDragOperationAtRow:
\b0 (int)
\i row 
\b\i0 column
\i :
\b0\i0 (int)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b tableScrollAllowDragOperationAtLocation
\b0 (TableScroll 
\i scroll
\i0 , int 
\i row
\i0 , int 
\i col
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 This message is sent to the 
\i delegate
\i0  or the 
\i dataDelegate
\b\i0  
\b0 if necessary by the MiscTableScroll to determine whether or not dragging an image from a cell should be allowed.  The appropriate delegate should return YES if dragging the image from the cell at 
\i row
\i0  and 
\i col
\i0  is allowed, or NO if it is not.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 tableScroll:draggingSourceOperationMaskForLocal:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (NSDraggingOperation)
\b tableScroll:
\b0 (MiscTableScroll*)
\i scroll
\i0  
\b draggingSourceOperationMaskForLocal:
\b0 (BOOL)
\i isLocal
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 int 
\b tableScrollDraggingSourceOperationMask
\b0 (TableScroll 
\i scroll
\i0 , boolean 
\i isLocal
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 This message is sent to the 
\i delegate
\i0  or the 
\i dataDelegate
\i0  if necessary in order to give the delegate a chance to respond to NSDraggingSource's 
\f2\fs20 -draggingSourceOperationMaskForLocal:
\f3\fs28  method.  If the delegate does not implement this method, then MiscTableScroll returns 
\f2\fs20 NSDragOperationGeneric
\f3\fs28  by default.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 tableScrollIgnoreModifierKeysWhileDragging:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b tableScrollIgnoreModifierKeysWhileDragging:
\b0 (MiscTableScroll*)
\i scroll
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b tableScrollIgnoreModifierKeysWhileDragging
\b0 (TableScroll 
\i scroll
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 This message is sent to the 
\i delegate
\i0  or the 
\i dataDelegate
\i0  if necessary in order to give the delegate a chance to respond to NSDraggingSource's 
\f2\fs20 -ignoreModifierKeysWhileDragging
\f3\fs28  method.  If the delegate does not implement this method, then MiscTableScroll returns YES by default.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 tableScroll:imageForDragOperationAtRow:column:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (NSImage*)
\b tableScroll:
\b0 (MiscTableScroll*)
\i scroll
\i0  
\b imageForDragOperationAtRow:
\b0 (int)
\i row 
\b\i0 column:
\b0 (int)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 NSImage 
\b tableScrollImageForDragOperationAtLocation
\b0 (TableScroll 
\i scroll
\i0 , int 
\i row
\i0 , int 
\i col
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 This message is sent to the 
\i delegate
\i0  or the 
\i dataDelegate
\i0  if necessary to give the delegate a chance to provide the image used  for the dragging operation.  This method is required for non-image cells.  It is optional for image cells, in which case, if the 
\i delegate
\i0  does not implement it or if it returns 0, then the image stored in the cell is used for dragging instead.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 tableScroll:preparePasteboard:forDragOperationAtRow:column:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (void)
\b tableScroll:
\b0 (MiscTableScroll*)
\i scroll
\i0  
\b preparePasteboard:
\b0 (NSPasteboard*)
\i pb
\i0  
\b forDragOperationAtRow:
\b0 (int)
\i row 
\b\i0 column:
\b0 (int)
\i col
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 void 
\b tableScrollPreparePasteboardForDragOperationAtLocation
\b0 (TableScroll 
\i scroll
\i0 , NSPasteboard 
\i pb
\i0 , int 
\i row
\i0 , int 
\i col)
\i0\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 This message is sent to the 
\i delegate
\i0  or the 
\i dataDelegate
\i0  if necessary in order to have the NSPasteboard 
\i pb
\i0  prepared for the dragging operation.  The appropriate delegate 
\i must
\i0  send a 
\f2\fs20 -declareTypes:num:owner:
\f3\fs28  message to the NSPasteboard followed by appropriate 
\f2\fs20 -set
\f3\fs28 ...
\f2\fs20 :forType:
\f3\fs28  or 
\f2\fs20 -write
\f3\fs28 ... messages if needed.  Extra precaution should be taken when declaring a non-null pasteboard 
\i owner
\i0  as discussed in the 
\b Image Dragging
\b0  section of this document.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 tableScroll:shouldDelayWindowOrderingForEvent:\

\pard\f1\b0\fi-620\li2520\fc0\cf0 -
\f3   (BOOL)
\b tableScroll:
\b0 (MiscTableScroll*)
\i scroll
\i0  
\b shouldDelayWindowOrderingForEvent:
\b0 (NSEvent*)
\i event
\i0\fs24   [Objective-C]
\fs28 \

\pard\tx2480\tx2860\tx3240\fi-620\li2520\fc0\cf0 boolean 
\b tableScrollShouldDelayWindowOrderingForEvent
\b0 (TableScroll 
\i scroll
\i0 , NSEvent 
\i event
\i0 )
\fs24   [Java]
\fs28 \

\fs16\fi0\li2100 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 This message is sent to the 
\i delegate
\i0  or the 
\i dataDelegate
\i0  if necessary in order to give the delegate a chance to respond to NSView's -
\f2\fs20 shouldDelayWindowOrderingForEvent:
\f3\fs28  method.  This method is only invoked if the delegate's 
\f2\fs20 -tableScroll:allowDragOperationAtRow:column:
\f3\fs28  method indicates that the cell under the mouse is a potential a dragging source.  If the delegate does not implement this method, then this method returns YES by default.\

\pard\tx11280\fs70\fi-240\li6320\fc0\cf0 \

\pard\f0\b\fs28\fi-1020\li1200\fc0\cf0 Notifications\

\pard\tx7140\fs16\li1360\fc0\cf0 \

\pard\tx8260\fs28\li1500\fc0\cf0 MiscTableScrollBackgroundColorChangedNotification
\f3\b0\fs24   [Objective-C]
\f0\b\fs28 \
TableScrollBackgroundColorChangedNotification
\f3\b0\fs24   [Java]
\f0\b\fs28 \

\pard\tx2480\tx2860\tx3240\f3\b0\fs16\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Posted whenever 
\f4\fs24 -setBackgroundColor:
\f3\fs28  is invoked with a color different than the current background color.  The notification object is the MiscTableScroll in which the color changed.  The 
\f2\fs20 userInfo
\f3\fs28  dictionary contains these keys and values:\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2340\tx3960\tx6840\ul\fs24\fi-4940\li6840\fc0\cf0 Key	
\ulnone 	
\ul Value
\ulnone 	
\ul Description\

\f4\ulnone @"Color"	
\f2\fs20 NSColor
\f3\fs24 	The new color.
\f4 \

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 MiscTableScrollChangeFontNotification
\f3\b0\fs24   [Objective-C]
\f0\b\fs28 \
TableScrollChangeFontNotification
\f3\b0\fs24   [Java]
\f0\b\fs28 \

\pard\tx2480\tx2860\tx3240\f3\b0\fs16\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Posted whenever 
\f2\fs20 -changeFont:
\f3\fs28  is invoked with a new font is that different than the current font.  The NSFontManager sends the 
\f2\fs20 -changeFont:
\f3\fs28  message whenever the user changes the font using either the Font Panel or the Font menu.  This is distinguished from programmatic changes via the 
\f2\fs20 -setFont:
\f3\fs28  method so that you can record user preferences.  This notification message is sent after the font change has been applied, but before the new font is displayed.  The notification object is the MiscTableScroll in which the font changed.  The 
\f2\fs20 userInfo
\f3\fs28  dictionary contains these keys and values:\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2340\tx3960\tx6840\ul\fs24\fi-4940\li6840\fc0\cf0 Key	
\ulnone 	
\ul Value
\ulnone 	
\ul Description\

\f4\ulnone @"OldFont"	NSFont	
\f3 The old font.
\f4 \
@"NewFont"	NSFont	
\f3 The new font.
\f4 \

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 MiscTableScrollDidBecomeFirstResponderNotification
\f3\b0\fs24   [Objective-C]
\f0\b\fs28 \
TableScrollDidBecomeFirstResponderNotification
\f3\b0\fs24   [Java]
\f0\b\fs28 \

\pard\tx2480\tx2860\tx3240\f3\b0\fs16\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Posted whenever MiscTableScroll's 
\i documentView
\i0  becomes first responder.  The notification object is the MiscTableScroll which contains the document view.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 MiscTableScrollDidEditNotification
\f3\b0\fs24   [Objective-C]
\f0\b\fs28 \
TableScrollDidEditNotification
\f3\b0\fs24   [Java]
\f0\b\fs28 \

\pard\tx2480\tx2860\tx3240\f3\b0\fs16\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Posted whenever a cell-editing session terminated.  This notification is sent after both 
\f2\fs20 -tableScroll:abortEdit:atRow:column:
\f3\fs28  and 
\f2\fs20 -tableScroll:setStringValue:atRow:column:
\f3\fs28 , so it is sent in all cases when cell editing terminates, regardless of the reason.  The notification object is the MiscTableScroll in which cell editing occurred.  The 
\f2\fs20 userInfo
\f3\fs28  dictionary contains these keys and values:\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2340\tx3960\tx6840\ul\fs24\fi-4940\li6840\fc0\cf0 Key	
\ulnone 	
\ul Value
\ulnone 	
\ul Description\

\f4\ulnone @"Changed"	NSNumber -boolValue	
\f3 YES if the text changed, NO if it did not.
\f4 \
@"Row"	NSNumber -intValue	
\f3 The cell's row.
\fs28 \

\f4\fs24 @"Column"	NSNumber -intValue	
\f3 The cell's column.
\fs28 \

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 MiscTableScrollDidPrintNotification
\f3\b0\fs24   [Objective-C]
\f0\b\fs28 \
TableScrollDidPrintNotification
\f3\b0\fs24   [Java]
\f0\b\fs28 \

\pard\tx2480\tx2860\tx3240\f3\b0\fs16\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Posted whenever a printing session terminates.  This notification is sent from 
\f4\fs24 -print:
\f3\fs28  after printing has completed and gives the listener an opportunity to peform post-print cleanup, such as restoring global NSPrintInfo values.  The notification object is the MiscTableScroll in which printing occurred.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 MiscTableScrollDidResignFirstResponderNotification
\f3\b0\fs24   [Objective-C]
\f0\b\fs28 \
TableScrollDidResignFirstResponderNotification
\f3\b0\fs24   [Java]
\f0\b\fs28 \

\pard\tx2480\tx2860\tx3240\f3\b0\fs16\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Posted whenever MiscTableScroll's 
\i documentView
\i0  resigns first responder.  The notification object is the MiscTableScroll which contains the document view.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 MiscTableScrollFontChangedNotification
\f3\b0\fs24   [Objective-C]
\f0\b\fs28 \
TableScrollFontChangedNotification
\f3\b0\fs24   [Java]
\f0\b\fs28 \

\pard\tx2480\tx2860\tx3240\f3\b0\fs16\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Posted whenever 
\f2\fs20 -setFont:
\f3\fs28  is invoked with a new font that is different than the current font.  This notification message is sent after all font changes, both user-initiated and programmatic.  The notification is sent after the font change has been applied, but before the new font is displayed.  The notification object is the MiscTableScroll in which the font changed.  The 
\f2\fs20 userInfo
\f3\fs28  dictionary contains these keys and values:\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2340\tx3960\tx6840\ul\fs24\fi-4940\li6840\fc0\cf0 Key	
\ulnone 	
\ul Value
\ulnone 	
\ul Description\

\f4\ulnone @"OldFont"	NSFont	
\f3 The old font.
\f4 \
@"NewFont"	NSFont	
\f3 The new font.
\f4 \

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 MiscTableScrollSelectedBackgroundColorChangedNotification
\f3\b0\fs24   [Objective-C]
\f0\b\fs28 \
TableScrollSelectedBackgroundColorChangedNotification
\f3\b0\fs24   [Java]
\f0\b\fs28 \

\pard\tx2480\tx2860\tx3240\f3\b0\fs16\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Posted whenever 
\f2\fs20 -setSelectedBackgroundColor:
\f3\fs28  is invoked with a color different than the current selected background color.  The notification object is the MiscTableScroll in which the color changed.  The 
\f2\fs20 userInfo
\f3\fs28  dictionary contains these keys and values:\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2340\tx3960\tx6840\ul\fs24\fi-4940\li6840\fc0\cf0 Key	
\ulnone 	
\ul Value
\ulnone 	
\ul Description\

\f4\ulnone @"Color"	
\f2\fs20 NSColor
\f3\fs24 	The new color.
\f4 \

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 MiscTableScrollSelectedTextColorChangedNotification
\f3\b0\fs24   [Objective-C]
\f0\b\fs28 \
TableScrollSelectedTextColorChangedNotification
\f3\b0\fs24   [Java]
\f0\b\fs28 \

\pard\tx2480\tx2860\tx3240\f3\b0\fs16\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Posted whenever 
\f2\fs20 -setSelectedTextColor:
\f3\fs28  is invoked with a color differnet than the current text color.  The notification object is the MiscTableScroll in which the color changed.  The 
\f2\fs20 userInfo
\f3\fs28  dictionary contains these keys and values:\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2340\tx3960\tx6840\ul\fs24\fi-4940\li6840\fc0\cf0 Key	
\ulnone 	
\ul Value
\ulnone 	
\ul Description\

\f4\ulnone @"Color"	
\f2\fs20 NSColor
\f3\fs24 	The new color.
\f4 \

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 MiscTableScrollSlotDraggedNotification
\f3\b0\fs24   [Objective-C]
\f0\b\fs28 \
TableScrollSlotDraggedNotification
\f3\b0\fs24   [Java]
\f0\b\fs28 \

\pard\tx2480\tx2860\tx3240\f3\b0\fs16\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Posted whenever the user drags a slot to a new position.  The notification object is the MiscTableScroll in which the slot was dragged.  The 
\f2\fs20 userInfo
\f3\fs28  dictionary contains these keys and values:\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2340\tx3960\tx6840\ul\fs24\fi-4940\li6840\fc0\cf0 Key	
\ulnone 	
\ul Value
\ulnone 	
\ul Description\

\f4\ulnone @"Border"	NSNumber -intValue	
\f3 The slot's border; either 
\f4 MISC_COL_BORDER
\f3  or 
\f4 MISC_ROW_BORDER
\f3 .
\f4 \
@"OldSlot"	NSNumber -intValue	
\f3 The old slot position.
\fs28 \

\f4\fs24 @"NewSlot"	NSNumber -intValue	
\f3 The new slot position.
\fs28 \

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 MiscTableScrollSlotResizedNotification
\f3\b0\fs24   [Objective-C]
\f0\b\fs28 \
TableScrollSlotResizedNotification
\f3\b0\fs24   [Java]
\f0\b\fs28 \

\pard\tx2480\tx2860\tx3240\f3\b0\fs16\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Posted whenever the user resizes a slot.  The notification object is the MiscTableScroll in which the slot was resized.  The 
\f2\fs20 userInfo
\f3\fs28  dictionary contains these keys and values:\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2340\tx3960\tx6840\ul\fs24\fi-4940\li6840\fc0\cf0 Key	
\ulnone 	
\ul Value
\ulnone 	
\ul Description\

\f4\ulnone @"Border"	NSNumber -intValue	
\f3 The slot's border; either 
\f4 MISC_COL_BORDER
\f3  or 
\f4 MISC_ROW_BORDER
\f3 .
\f4 \
@"Slot"	NSNumber -intValue	
\f3 The slot.
\fs28 \

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 MiscTableScrollSlotSortReversedNotification
\f3\b0\fs24   [Objective-C]
\f0\b\fs28 \
TableScrollSlotSortReversedNotification
\f3\b0\fs24   [Java]
\f0\b\fs28 \

\pard\tx2480\tx2860\tx3240\f3\b0\fs16\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Posted whenever the user reverses the sort direction of a slot.  The notification object is the MiscTableScroll in which the slot sort was reversed.  The 
\f2\fs20 userInfo
\f3\fs28  dictionary contains these keys and values:\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2340\tx3960\tx6840\ul\fs24\fi-4940\li6840\fc0\cf0 Key	
\ulnone 	
\ul Value
\ulnone 	
\ul Description\

\f4\ulnone @"Border"	NSNumber -intValue	
\f3 The slot's border; either 
\f4 MISC_COL_BORDER
\f3  or 
\f4 MISC_ROW_BORDER
\f3 .
\f4 \
@"Slot"	NSNumber -intValue	
\f3 The slot.
\fs28 \

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 MiscTableScrollTextColorChangedNotification
\f3\b0\fs24   [Objective-C]
\f0\b\fs28 \
TableScrollTextColorChangedNotification
\f3\b0\fs24   [Java]
\f0\b\fs28 \

\pard\tx2480\tx2860\tx3240\f3\b0\fs16\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Posted whenever 
\f2\fs20 -setTextColor:
\f3\fs28  is invoked with a color different than the current text color.  The notification object is the MiscTableScroll in which the color changed.  The 
\f2\fs20 userInfo
\f3\fs28  dictionary contains these keys and values:\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2340\tx3960\tx6840\ul\fs24\fi-4940\li6840\fc0\cf0 Key	
\ulnone 	
\ul Value
\ulnone 	
\ul Description\

\f4\ulnone @"Color"	
\f2\fs20 NSColor
\f3\fs24 	The new color.
\f4 \

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 MiscTableScrollWillEditNotification
\f3\b0\fs24   [Objective-C]
\f0\b\fs28 \
TableScrollWillEditNotification
\f3\b0\fs24   [Java]
\f0\b\fs28 \

\pard\tx2480\tx2860\tx3240\f3\b0\fs16\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Posted whenever a cell editing session is about to start.  This notification, and its counterpart, 
\f2\fs20 MiscTableScrollDidEditNotification
\f3\fs28 , bracket cell editing sessions.  The notification object is the MiscTableScroll in which cell editing will occur.  The 
\f2\fs20 userInfo
\f3\fs28  dictionary contains these keys and values:\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2340\tx3960\tx6840\ul\fs24\fi-4940\li6840\fc0\cf0 Key	
\ulnone 	
\ul Value
\ulnone 	
\ul Description\

\f4\ulnone @"Row"	NSNumber -intValue	
\f3 The cell's row.
\fs28 \

\f4\fs24 @"Column"	NSNumber -intValue	
\f3 The cell's column.
\fs28 \

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 MiscTableScrollWillPrintNotification
\f3\b0\fs24   [Objective-C]
\f0\b\fs28 \
TableScrollWillPrintNotification
\f3\b0\fs24   [Java]
\f0\b\fs28 \

\pard\tx2480\tx2860\tx3240\f3\b0\fs16\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 Posted whenever a printing session is about to start.  This notification is sent from 
\f4\fs24 -print:
\f3\fs28  before the NSPrintPanel is presented to the user.  This notification, and its counterpart,
\f2\fs20  MiscTableScrollDidPrintNotification
\f3\fs28 , bracket printing sessions.  This notification may be useful for pre-print setup operations like overriding global NSPrintInfo settings.  The notification object is the MiscTableScroll in which printing will occur.\

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 MiscTableScrollWillPrintPageFooterNotification
\f3\b0\fs24   [Objective-C]
\f0\b\fs28 \
TableScrollWillPrintPageFooterNotification
\f3\b0\fs24   [Java]
\f0\b\fs28 \

\pard\tx2480\tx2860\tx3240\f3\b0\fs16\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 <FIXME: Write this.  Headers & footers are not yet fully implemented.>  The notification object is the MiscTableScroll which will print the page footer.  The 
\f2\fs20 userInfo
\f3\fs28  dictionary contains these keys and values:\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2340\tx5400\tx8640\ul\fs24\fi-6740\li8640\fc0\cf0 Key	
\ulnone 	
\ul Value
\ulnone 	
\ul Description\

\f4\ulnone @"View"	NSView	
\f3 The footer.
\fs28 \

\f4\fs24 @"PageWidth"	NSNumber -floatValue	
\f3 The paper width from NSPrintInfo.
\fs28 \

\f4\fs24 @"PageHeight"	NSNumber -floatValue	
\f3 The paper height from NSPrintInfo.
\fs28 \

\f4\fs24 @"PrintRectX"	NSNumber -floatValue	
\f3 The document-view's X coordinate.
\fs28 \

\f4\fs24 @"PrintRectY"	NSNumber -floatValue	
\f3 The document-view's Y coordinate.
\fs28 \

\f4\fs24 @"PrintRectWidth"	NSNumber -floatValue	
\f3 The document-view's width.
\fs28 \

\f4\fs24 @"PrintRectHeight"	NSNumber -floatValue	
\f3 The document-view's height.
\fs28 \

\f4\fs24 @"FirstPrintRow"	NSNumber -intValue	
\f3 One's complement if started on previous page.
\fs28 \

\f4\fs24 @"LastPrintRow"	NSNumber -intValue	
\f3 One's complement if ends on later page.
\fs28 \

\f4\fs24 @"FirstPrintColumn"	NSNumber -intValue	
\f3 One's complement if started on previous page.
\fs28 \

\f4\fs24 @"LastPrintColumn"	NSNumber -intValue	
\f3 One's complement if ends on later page.
\fs28 \

\f4\fs24 @"PrintPage"	NSNumber -intValue	
\f3 Current page; 1 <= PrintPage <= NumberOfPrintPages.
\fs28 \

\f4\fs24 @"PrintRow"	NSNumber -intValue	
\f3 Current row; 1 <= PrintRow <= NumberOfPrintRows.
\fs28 \

\f4\fs24 @"PrintColumn"	NSNumber -intValue	
\f3 Current column; 1 <= PrintColumn <= NumberOfPrintColumns.
\fs28 \

\f4\fs24 @"NumberOfPrintPages"	NSNumber -intValue	
\f3 Number of pages that will be printed.
\fs28 \

\f4\fs24 @"NumberOfPrintRows"	NSNumber -intValue	
\f3 Number of rows that will be printed.
\fs28 \

\f4\fs24 @"NumberOfPrintColumns"	NSNumber -intValue	
\f3 Number of columns that will be printed.
\fs28 \

\f4\fs24 @"ScaleFactor"	NSNumber -doubleValue	
\f3 The scale factor from NSPrintInfo.
\fs28 \

\f4\fs24 @"IsScaled"	NSNumber -boolValue	
\f3 Flag indicating if scaling is enabled.
\fs28 \

\pard\tx7140\f0\b\fs16\fi-380\li2480\fc0\cf0 \
\
\
\

\pard\tx8260\fs28\li1500\fc0\cf0 MiscTableScrollWillPrintPageHeaderNotification
\f3\b0\fs24   [Objective-C]
\f0\b\fs28 \
TableScrollWillPrintPageHeaderNotification
\f3\b0\fs24   [Java]
\f0\b\fs28 \

\pard\tx2480\tx2860\tx3240\f3\b0\fs16\li2100\fc0\cf0 \

\pard\tx3600\tx3980\tx4340\fs28\li1500\fc0\cf0 <FIXME: Write this.  Headers & footers are not yet fully implemented.>  The notification object is the MiscTableScroll which will print the page header.  The 
\f2\fs20 userInfo
\f3\fs28  dictionary contains these keys and values:\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\pard\tx2340\tx5400\tx8640\ul\fs24\fi-6740\li8640\fc0\cf0 Key	
\ulnone 	
\ul Value
\ulnone 	
\ul Description\

\f4\ulnone @"View"	NSView	
\f3 The header.
\fs28 \

\f4\fs24 @"PageWidth"	NSNumber -floatValue	
\f3 The paper width from NSPrintInfo.
\fs28 \

\f4\fs24 @"PageHeight"	NSNumber -floatValue	
\f3 The paper height from NSPrintInfo.
\fs28 \

\f4\fs24 @"PrintRectX"	NSNumber -floatValue	
\f3 The document-view's X coordinate.
\fs28 \

\f4\fs24 @"PrintRectY"	NSNumber -floatValue	
\f3 The document-view's Y coordinate.
\fs28 \

\f4\fs24 @"PrintRectWidth"	NSNumber -floatValue	
\f3 The document-view's width.
\fs28 \

\f4\fs24 @"PrintRectHeight"	NSNumber -floatValue	
\f3 The document-view's height.
\fs28 \

\f4\fs24 @"FirstPrintRow"	NSNumber -intValue	
\f3 One's complement if started on previous page.
\fs28 \

\f4\fs24 @"LastPrintRow"	NSNumber -intValue	
\f3 One's complement if ends on later page.
\fs28 \

\f4\fs24 @"FirstPrintColumn"	NSNumber -intValue	
\f3 One's complement if started on previous page.
\fs28 \

\f4\fs24 @"LastPrintColumn"	NSNumber -intValue	
\f3 One's complement if ends on later page.
\fs28 \

\f4\fs24 @"PrintPage"	NSNumber -intValue	
\f3 Current page; 1 <= PrintPage <= NumberOfPrintPages.
\fs28 \

\f4\fs24 @"PrintRow"	NSNumber -intValue	
\f3 Current row; 1 <= PrintRow <= NumberOfPrintRows.
\fs28 \

\f4\fs24 @"PrintColumn"	NSNumber -intValue	
\f3 Current column; 1 <= PrintColumn <= NumberOfPrintColumns.
\fs28 \

\f4\fs24 @"NumberOfPrintPages"	NSNumber -intValue	
\f3 Number of pages that will be printed.
\fs28 \

\f4\fs24 @"NumberOfPrintRows"	NSNumber -intValue	
\f3 Number of rows that will be printed.
\fs28 \

\f4\fs24 @"NumberOfPrintColumns"	NSNumber -intValue	
\f3 Number of columns that will be printed.
\fs28 \

\f4\fs24 @"ScaleFactor"	NSNumber -doubleValue	
\f3 The scale factor from NSPrintInfo.
\fs28 \

\f4\fs24 @"IsScaled"	NSNumber -boolValue	
\f3 Flag indicating if scaling is enabled.
\fs28 \

\pard\tx11280\fs70\fi-240\li6320\fc0\cf0 \

\pard\f0\b\fs28\fi-1020\li1200\fc0\cf0 Constants and Defined Types
\f3\b0\fs24   [Objective-C]
\f0\b\fs28 \

\pard\tx7140\fs16\li1360\fc0\cf0 \

\pard\tx5400\f4\b0\fs24\li1500\fc0\cf0 extern NSString* const MiscTableScrollSlotDraggedNotification;\
extern NSString* const MiscTableScrollSlotSortReversedNotification;\
extern NSString* const MiscTableScrollSlotResizedNotification;\
extern NSString* const MiscTableScrollChangeFontNotification;\
extern NSString* const MiscTableScrollFontChangedNotification;\
extern NSString* const MiscTableScrollBackgroundColorChangedNotification;\
extern NSString* const MiscTableScrollSelectedBackgroundColorChangedNotification;\
extern NSString* const MiscTableScrollSelectedTextColorChangedNotification;\
extern NSString* const MiscTableScrollTextColorChangedNotification;\
extern NSString* const MiscTableScrollWillPrintNotification;\
extern NSString* const MiscTableScrollDidPrintNotification;\
extern NSString* const MiscTableScrollWillPrintPageHeaderNotification;\
extern NSString* const MiscTableScrollWillPrintPageFooterNotification;\
extern NSString* const MiscTableScrollWillEditNotification;\
extern NSString* const MiscTableScrollDidEditNotification;\

\pard\tx6480\li2100\fc0\cf0 \

\pard\tx5400\li1500\fc0\cf0 typedef int MiscPixels;\
typedef int MiscCoord_V;	// Visual coordinate.\
typedef int MiscCoord_P;	// Physical coordinate.\
\
#define MISC_MIN_PIXELS_SIZE ((MiscPixels) 10)\
#define MISC_MAX_PIXELS_SIZE ((MiscPixels) 0x7FFF0000)\

\pard\tx6480\li2100\fc0\cf0 \

\pard\tx5400\li1500\fc0\cf0 typedef enum\
    \{\
    MISC_COL_BORDER,\
    MISC_ROW_BORDER\
    \} MiscBorderType;\

\pard\tx6480\li2100\fc0\cf0 \

\pard\tx5400\li1500\fc0\cf0 #define MISC_MAX_BORDER	MISC_ROW_BORDER\
#defineMISC_OTHER_BORDER(B) \\\
    (B == MISC_ROW_BORDER ? MISC_COL_BORDER : MISC_ROW_BORDER)\

\pard\tx6480\li2100\fc0\cf0 \
\

\pard\tx5400\li1500\fc0\cf0 typedef struct\
    \{\
    NSSize      page_size;      // [NSPrintInfo paperSize]\
    NSRect      print_rect;     // MiscTableView rect.\
    MiscCoord_V first_print_row;// one's comp if started on prev page.\
    MiscCoord_V last_print_row; // one's comp if ends on later page.\
    MiscCoord_V first_print_col;// one's comp if started on prev page.\
    MiscCoord_V last_print_col; // one's comp if ends on later page.\
    int         print_page;     // 1 <= print_page <= num_print_pages\
    int         print_row;      // 1 <= print_row <= num_print_rows\
    int         print_col;      // 1 <= print_col <= num_print_cols\
    int         num_print_pages;\
    int         num_print_rows;\
    int         num_print_cols;\
    double      scale_factor;\
    BOOL        is_scaled;\
    \} MiscTablePrintInfo;\

\pard\tx6480\li2100\fc0\cf0 \
\

\pard\tx5400\li1500\fc0\cf0 typedef enum\
    \{\
    MISC_NO_TITLE,	// No titles on row/col cells.\
    MISC_NUMBER_TITLE,	// Titles are sequential numbers.\
    MISC_ALPHA_TITLE,	// Titles are sequential alphabetics...\
    MISC_CUSTOM_TITLE,	// Titles are user-supplied strings...\
    MISC_DELEGATE_TITLE	// Ask the delegate for titles.\
    \} MiscTableTitleMode;\
\
#define MISC_MAX_TITLE	MISC_DELEGATE_TITLE\

\pard\tx6480\li2100\fc0\cf0 \
\

\pard\tx5400\li1500\fc0\cf0 typedef enum\
    \{\
    MISC_LIST_MODE,\
    MISC_RADIO_MODE,\
    MISC_HIGHLIGHT_MODE\
    \} MiscSelectionMode;\
\
#define MISC_MAX_MODE	MISC_HIGHLIGHT_MODE\

\pard\tx6480\li2100\fc0\cf0 \
\

\pard\tx5400\li1500\fc0\cf0 typedef enum\
    \{\
    MISC_TABLE_CELL_TEXT,\
    MISC_TABLE_CELL_IMAGE,\
    MISC_TABLE_CELL_BUTTON,\
    MISC_TABLE_CELL_CALLBACK\
    \} MiscTableCellStyle;\
\
#define MISC_TABLE_CELL_MAX	MISC_TABLE_CELL_CALLBACK\

\pard\tx6480\li2100\fc0\cf0 \
\

\pard\tx6120\li1500\fc0\cf0 #define MISC_SIZING_SPRINGY_BIT	(1 << 0) // Adjusts for global limits.\
#define MISC_SIZING_USER_BIT	(1 << 1) // User can resize.\

\pard\tx6480\li2100\fc0\cf0 \
\

\pard\tx5400\li1500\fc0\cf0 typedef enum\
    \{\
    MISC_NUSER_NSPRINGY_SIZING,\
    MISC_NUSER_SPRINGY_SIZING,\
    MISC_USER_NSPRINGY_SIZING,\
    MISC_USER_SPRINGY_SIZING,\
    \} MiscTableSizing;\
\
#define MISC_MAX_SIZING	MISC_USER_SPRINGY_SIZING\

\pard\tx6480\li2100\fc0\cf0 \
\

\pard\tx5400\li1500\fc0\cf0 typedef enum\
    \{\
    MISC_SORT_ASCENDING,\
    MISC_SORT_DESCENDING\
    \} MiscSortDirection;\
\
#define MISC_SORT_DIR_MAX	MISC_SORT_DESCENDING\
#defineMISC_OTHER_DIRECTION(D) \\\
    ((D) == MISC_SORT_DESCENDING ? \\\
    MISC_SORT_ASCENDING : MISC_SORT_DESCENDING)\

\pard\tx6480\li2100\fc0\cf0 \
\

\pard\tx7200\li1500\fc0\cf0 typedef enum	// Selector used to get data:\
    \{\
    MISC_SORT_STRING_CASE_INSENSITIVE,	// -stringValue\
    MISC_SORT_STRING_CASE_SENSITIVE,	// -stringValue\
    MISC_SORT_INT,	// -intValue\
    MISC_SORT_UNSIGNED_INT,	// -intValue\
    MISC_SORT_TAG,	// -tag\
    MISC_SORT_UNSIGNED_TAG,	// -tag\
    MISC_SORT_FLOAT,	// -floatValue\
    MISC_SORT_DOUBLE,	// -doubleValue\
    MISC_SORT_SKIP,	// Don't compare cells in this slot.\
    MISC_SORT_TITLE_CASE_INSENSITIVE,	// -title\
    MISC_SORT_TITLE_CASE_SENSITIVE,	// -title\
    MISC_SORT_STATE,	// -state\
    MISC_SORT_UNSIGNED_STATE,	// -state\
    \} MiscSortType;\
\

\pard\tx5760\li1500\fc0\cf0 #define MISC_SORT_TYPE_MAX	MISC_SORT_UNSIGNED_STATE\
#define MISC_SORT_CUSTOM	((MiscSortType)(int(MISC_SORT_TYPE_MAX) + 1))\

\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\fc0\cf0 \
\

\pard\tx3600\li1500\fc0\cf0 @class MiscTableScroll;\
\
typedef struct MiscEntrySortInfo MiscEntrySortInfo;\
typedef struct MiscSlotSortInfo MiscSlotSortInfo;\

\pard\tx5040\li2100\fc0\cf0 \

\pard\tx3600\li1500\fc0\cf0 typedef int (*MiscCompareEntryFunc)\
	( int r1, int c1, int r2, int c2, \
	MiscEntrySortInfo const* entry_info,\
	MiscSlotSortInfo* sort_info );\
\
typedef int (*MiscCompareSlotFunc)\
	( int slot1, int slot2, MiscSlotSortInfo* );\
\
extern int MiscDefaultCompareSlotFunc\
	( int slot1, int slot2, MiscSlotSortInfo* );\

\pard\tx5040\li2100\fc0\cf0 \

\pard\tx2160\li1500\fc0\cf0 #define MISC_TS_TYPE_AT( TYPE, NAME ) \\\
	typedef TYPE (*MISC_TS_##NAME##_AT)(id,SEL,id,int r,int c, ...);\

\pard\tx3600\li1500\fc0\cf0 \

\pard\tx7020\li1500\fc0\cf0 MISC_TS_TYPE_AT( int, INT )	// MISC_TS_INT_AT\
MISC_TS_TYPE_AT( float, FLOAT )	// MISC_TS_FLOAT_AT\
MISC_TS_TYPE_AT( double, DOUBLE )	// MISC_TS_DOUBLE_AT\
MISC_TS_TYPE_AT( char const*, STRING )	// MISC_TS_STRING_AT\

\pard\tx5040\li2100\fc0\cf0 \

\pard\tx2160\tx5040\li1500\fc0\cf0 typedef union\
	\{\
	MISC_TS_INT_AT	i;\
	MISC_TS_FLOAT_AT	f;\
	MISC_TS_DOUBLE_AT	d;\
	MISC_TS_STRING_AT	s;\
	\} MISC_TS_VAL_AT_FUNC;\

\pard\tx5040\li2100\fc0\cf0 \

\pard\tx3600\li1500\fc0\cf0 #define MISC_TS_TYPE_VAL( TYPE, NAME ) \\\
typedef TYPE (*MISC_TS_##NAME##_VAL)(id,SEL);\

\pard\tx5040\li2100\fc0\cf0 \

\pard\tx7200\li1500\fc0\cf0 MISC_TS_TYPE_VAL( int, INT )	// MISC_TS_INT_VAL\
MISC_TS_TYPE_VAL( float, FLOAT )	// MISC_TS_FLOAT_VAL\
MISC_TS_TYPE_VAL( double, DOUBLE )	// MISC_TS_DOUBLE_VAL\
MISC_TS_TYPE_VAL( char const*, STRING )	// MISC_TS_STRING_VAL\

\pard\tx5040\li2100\fc0\cf0 \

\pard\tx2160\tx5040\li1500\fc0\cf0 typedef union\
	\{\
	MISC_TS_INT_VAL	i;\
	MISC_TS_FLOAT_VAL	f;\
	MISC_TS_DOUBLE_VAL	d;\
	MISC_TS_STRING_VAL	s;\
	\} MISC_TS_VAL_FUNC;\

\pard\tx3220\tx6500\li2100\fc0\cf0 \
\

\pard\tx3600\li1500\fc0\cf0 // *** WARNING ***\
// The sizes of these structures are likely to change between versions.\
// *** WARNING ***\

\pard\tx5040\li2100\fc0\cf0 \

\pard\tx2160\li1500\fc0\cf0 struct MiscEntrySortInfo\
	\{\
	int slot;\
	int ascending;\
	MISC_TS_VAL_AT_FUNC value_func;\
	id  value_target;\
	SEL value_sel;\
	id  value_obj;\
	IMP cell_at_func;\
	id  cell_class;\
	SEL cell_sel;\
	MISC_TS_VAL_FUNC cell_func;\
	MiscSortType sort_type;\
	MiscCompareEntryFunc compare_func;\
	\};\
\
\
struct MiscSlotSortInfo\
	\{\
	MiscTableScroll* table_scroll;\
	NSZone* zone;\
	MiscBorderType border_type;\
	int num_entries;\
	MiscEntrySortInfo const* entry_info;\
	BOOL need_copy;\
	\};\

\pard\tx11280\f3\fs70\fi-240\li6320\fc0\cf0 \

\pard\f0\b\fs28\fi-1020\li1200\fc0\cf0 Constants and Defined Classes
\f3\b0\fs24   [Java]
\f0\b\fs28 \

\pard\tx7140\fs16\li1360\fc0\cf0 \

\pard\tx5400\f4\b0\fs24\li1500\fc0\cf0 // Notifications.\
public static final String TableScrollSlotDraggedNotification;\
public static final String TableScrollSlotSortReversedNotification;\
public static final String TableScrollSlotResizedNotification;\
public static final String TableScrollChangeFontNotification;\
public static final String TableScrollFontChangedNotification;\
public static final String TableScrollBackgroundColorChangedNotification;\
public static final String TableScrollSelectedBackgroundColorChangedNotification;\
public static final String TableScrollSelectedTextColorChangedNotification;\
public static final String TableScrollTextColorChangedNotification;\
public static final String TableScrollWillPrintNotification;\
public static final String TableScrollDidPrintNotification;\
public static final String TableScrollWillPrintPageHeaderNotification;\
public static final String TableScrollWillPrintPageFooterNotification;\
public static final String TableScrollWillEditNotification;\
public static final String TableScrollDidEditNotification;\
\
// Slot size restrictions.\
public static final int MIN_PIXELS_SIZE = 10;\
public static final int MAX_PIXELS_SIZE = 0x7FFF0000;\
\
// Borders.\
public static final int BORDER_COLUMN = 0;\
public static final int BORDER_ROW = 1;\
\
// Title mode.\
public static final int TITLE_NONE = 0;\
public static final int TITLE_NUMBER = 1;\
public static final int TITLE_ALPHA = 2;\
public static final int TITLE_CUSTOM = 3;\
public static final int TITLE_DELEGATE = 4;\
\
// Selection mode.\
public static final int SELECTION_MODE_LIST = 0;\
public static final int SELECTION_MODE_RADIO = 1;\
public static final int SELECTION_MODE_HIGHLIGHT = 2;\
\
// Cell style.\
public static final int CELL_TYPE_TEXT = 0;\
public static final int CELL_TYPE_IMAGE = 1;\
public static final int CELL_TYPE_BUTTON = 2;\
public static final int CELL_TYPE_CALLBACK = 3;\
\
// Sort direction.\
public static final int SORT_ORDER_ASCENDING = 0;\
public static final int SORT_ORDER_DESCENDING = 1;\
\
// Sort type.\
public static final int SORT_STRING_CASE_INSENSITIVE = 0;\
public static final int SORT_STRING_CASE_SENSITIVE = 1;\
public static final int SORT_INT = 2;\
public static final int SORT_UNSIGNED_INT = 3;\
public static final int SORT_TAG = 4;\
public static final int SORT_UNSIGNED_TAG = 5;\
public static final int SORT_FLOAT = 6;\
public static final int SORT_DOUBLE = 7;\
public static final int SORT_SKIP = 8;\
public static final int SORT_TITLE_CASE_INSENSITIVE = 9;\
public static final int SORT_TITLE_CASE_SENSITIVE = 10;\
public static final int SORT_STATE = 11;\
public static final int SORT_UNSIGNED_STATE = 12;\
\
// Cell coordinate wrapper.\
public static class Location implements Cloneable \{\
    public final int row, column;\
    public String toString();\
    \}\
\}\

}
